namespace BetterWaysToDie.Mixins
{
    [System.ComponentModel.DescriptionAttribute("Generated by SharpILMixins")]
    public static class ChunkTargets
    {
        public static class Methods
        {
            public const string get_isModified = "System.Boolean Chunk::get_isModified()";
            public static class get_isModifiedInjects
            {
                public const string _isModified_k_BackingField = "System.Boolean Chunk::<isModified>k__BackingField";
            }

            public const string set_isModified = "System.Void Chunk::set_isModified(System.Boolean)";
            public static class set_isModifiedInjects
            {
                public const string _isModified_k_BackingField = "System.Boolean Chunk::<isModified>k__BackingField";
            }

            public const string Finalize = "System.Void Chunk::Finalize()";
            public static class FinalizeInjects
            {
                public const string Object_Finalize = "System.Void System.Object::Finalize()";
                public const string InstanceCount = "System.Int32 Chunk::InstanceCount";
            }

            public const string ResetLights = "System.Void Chunk::ResetLights(System.Byte)";
            public static class ResetLightsInjects
            {
                public const string ChunkBlockChannel_Clear_Int64 = "System.Void ChunkBlockChannel::Clear(System.Int64)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string Reset = "System.Void Chunk::Reset()";
            public static class ResetInjects
            {
                public const string String_Concat_Object_Object = "System.String System.String::Concat(System.Object,System.Object)";
                public const string Log_Warning_String = "System.Void Log::Warning(System.String)";
                public const string Chunk_set_ClrIdx_Int32 = "System.Void Chunk::set_ClrIdx(System.Int32)";
                public const string Chunk_set_Z_Int32 = "System.Void Chunk::set_Z(System.Int32)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<Entity>::Clear()";
                public const string DictionaryList_2_Clear = "System.Void DictionaryList`2<System.UInt64,BlockEntityData>::Clear()";
                public const string DictionarySave_2_Clear = "System.Void DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::Clear()";
                public const string HashSet_1_Clear = "System.Void System.Collections.Generic.HashSet`1<System.Int32>::Clear()";
                public const string Chunk_set_NeedsRegeneration_Boolean = "System.Void Chunk::set_NeedsRegeneration(System.Boolean)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string MemoryPooledObject_1_FreeSync_IList_1 = "System.Void MemoryPooledObject`1<ChunkBlockLayer>::FreeSync(System.Collections.Generic.IList`1<ChunkBlockLayer>)";
                public const string ChunkBlockChannel_FreeLayers = "System.Void ChunkBlockChannel::FreeLayers()";
                public const string Chunk_ResetLights_Byte = "System.Void Chunk::ResetLights(System.Byte)";
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string Array_Clear_Array_Int32_Int32 = "System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)";
                public const string Chunk_ResetBiomeIntensity_BiomeIntensity = "System.Void Chunk::ResetBiomeIntensity(BiomeIntensity)";
                public const string DictionaryKeyValueList_2_Clear = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Clear()";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string DictionaryKeyList_2_Clear = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Clear()";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string InProgressSaving = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressSaving";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string MeshLayerCount = "System.Int32 Chunk::MeshLayerCount";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string IndexedBlocks = "DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>> Chunk::IndexedBlocks";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string insideDevicesHashSet = "System.Collections.Generic.HashSet`1<System.Int32> Chunk::insideDevicesHashSet";
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
                public const string NeedsDecoration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsDecoration";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
                public const string InProgressRegeneration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressRegeneration";
                public const string InProgressCopying = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressCopying";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressLighting = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressLighting";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
                public const string NeedsOnlyCollisionMesh = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsOnlyCollisionMesh";
                public const string IsCollisionMeshGenerated = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::IsCollisionMeshGenerated";
                public const string SavedInWorldTicks = "System.UInt64 Chunk::SavedInWorldTicks";
                public const string poolCBL = "MemoryPooledObject`1<ChunkBlockLayer> MemoryPools::poolCBL";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string Default = "BiomeIntensity BiomeIntensity::Default";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string m_DecoBiomeArray = "EnumDecoAllowed[] Chunk::m_DecoBiomeArray";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
                public const string tickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::tickedBlocks";
                public const string bEmptyDirty = "System.Boolean Chunk::bEmptyDirty";
                public const string StopStabilityCalculation = "System.Boolean Chunk::StopStabilityCalculation";
            }

            public const string Cleanup = "System.Void Chunk::Cleanup()";
            public const string get_X = "System.Int32 Chunk::get_X()";
            public static class get_XInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
            }

            public const string set_X = "System.Void Chunk::set_X(System.Int32)";
            public static class set_XInjects
            {
                public const string Chunk_updateBoundingBox = "System.Void Chunk::updateBoundingBox()";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_X = "System.Int32 Chunk::m_X";
            }

            public const string get_Y = "System.Int32 Chunk::get_Y()";
            public static class get_YInjects
            {
                public const string m_Y = "System.Int32 Chunk::m_Y";
            }

            public const string get_Z = "System.Int32 Chunk::get_Z()";
            public static class get_ZInjects
            {
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string set_Z = "System.Void Chunk::set_Z(System.Int32)";
            public static class set_ZInjects
            {
                public const string Chunk_updateBoundingBox = "System.Void Chunk::updateBoundingBox()";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string get_ChunkPos = "Vector3i Chunk::get_ChunkPos()";
            public static class get_ChunkPosInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string set_ChunkPos = "System.Void Chunk::set_ChunkPos(Vector3i)";
            public static class set_ChunkPosInjects
            {
                public const string Chunk_updateBoundingBox = "System.Void Chunk::updateBoundingBox()";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string x = "System.Int32 Vector3i::x";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string z = "System.Int32 Vector3i::z";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string get_Key = "System.Int64 Chunk::get_Key()";
            public static class get_KeyInjects
            {
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string WorldChunkCache_MakeChunkKey_Int32_Int32_Int32 = "System.Int64 WorldChunkCache::MakeChunkKey(System.Int32,System.Int32,System.Int32)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
            public static class get_ClrIdxInjects
            {
                public const string _ClrIdx_k_BackingField = "System.Int32 Chunk::<ClrIdx>k__BackingField";
            }

            public const string set_ClrIdx = "System.Void Chunk::set_ClrIdx(System.Int32)";
            public static class set_ClrIdxInjects
            {
                public const string _ClrIdx_k_BackingField = "System.Int32 Chunk::<ClrIdx>k__BackingField";
            }

            public const string get_IsLocked = "System.Boolean Chunk::get_IsLocked()";
            public static class get_IsLockedInjects
            {
                public const string InProgressCopying = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressCopying";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressLighting = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressLighting";
                public const string InProgressRegeneration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressRegeneration";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
                public const string InProgressSaving = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressSaving";
                public const string InProgressNetworking = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressNetworking";
            }

            public const string get_IsLockedExceptUnloading = "System.Boolean Chunk::get_IsLockedExceptUnloading()";
            public static class get_IsLockedExceptUnloadingInjects
            {
                public const string InProgressCopying = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressCopying";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressLighting = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressLighting";
                public const string InProgressRegeneration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressRegeneration";
                public const string InProgressSaving = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressSaving";
                public const string InProgressNetworking = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressNetworking";
            }

            public const string get_IsInitialized = "System.Boolean Chunk::get_IsInitialized()";
            public static class get_IsInitializedInjects
            {
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
            }

            public const string GetAvailable = "System.Boolean Chunk::GetAvailable()";
            public static class GetAvailableInjects
            {
                public const string IsCollisionMeshGenerated = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::IsCollisionMeshGenerated";
            }

            public const string get_NeedsRegeneration = "System.Boolean Chunk::get_NeedsRegeneration()";
            public static class get_NeedsRegenerationInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
            }

            public const string set_NeedsRegeneration = "System.Void Chunk::set_NeedsRegeneration(System.Boolean)";
            public static class set_NeedsRegenerationInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string MemoryPooledObject_1_FreeSync_Queue_1 = "System.Void MemoryPooledObject`1<VoxelMeshLayer>::FreeSync(System.Collections.Generic.Queue`1<VoxelMeshLayer>)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_MeshLayers = "System.Collections.Generic.Queue`1<VoxelMeshLayer> Chunk::m_MeshLayers";
                public const string MeshLayerCount = "System.Int32 Chunk::MeshLayerCount";
                public const string poolVML = "MemoryPooledObject`1<VoxelMeshLayer> MemoryPools::poolVML";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
                public const string NeedsRegenerationDebug = "System.Int32 Chunk::NeedsRegenerationDebug";
            }

            public const string ClearNeedsRegenerationAt = "System.Void Chunk::ClearNeedsRegenerationAt(System.Int32)";
            public static class ClearNeedsRegenerationAtInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
                public const string NeedsRegenerationDebug = "System.Int32 Chunk::NeedsRegenerationDebug";
            }

            public const string get_NeedsCopying = "System.Boolean Chunk::get_NeedsCopying()";
            public static class get_NeedsCopyingInjects
            {
                public const string Chunk_HasMeshLayer = "System.Boolean Chunk::HasMeshLayer()";
            }

            public const string set_NeedsCopying = "System.Void Chunk::set_NeedsCopying(System.Boolean)";
            public const string get_NeedsRegenerationAt = "System.Int32 Chunk::get_NeedsRegenerationAt()";
            public static class get_NeedsRegenerationAtInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
            }

            public const string set_NeedsRegenerationAt = "System.Void Chunk::set_NeedsRegenerationAt(System.Int32)";
            public static class set_NeedsRegenerationAtInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
            }

            public const string SetNeedsRegenerationRaw = "System.Void Chunk::SetNeedsRegenerationRaw(System.Int32)";
            public static class SetNeedsRegenerationRawInjects
            {
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
            }

            public const string get_NeedsSaving = "System.Boolean Chunk::get_NeedsSaving()";
            public static class get_NeedsSavingInjects
            {
                public const string Chunk_get_isModified = "System.Boolean Chunk::get_isModified()";
                public const string DictionaryList_2_get_Count = "System.Int32 DictionaryList`2<Vector3i,TileEntity>::get_Count()";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
            }

            public const string load = "System.Void Chunk::load(PooledBinaryReader,System.UInt32)";
            public static class loadInjects
            {
                public const string Chunk_read_PooledBinaryReader_UInt32_Boolean = "System.Void Chunk::read(PooledBinaryReader,System.UInt32,System.Boolean)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
            }

            public const string read_PooledBinaryReader_UInt32 = "System.Void Chunk::read(PooledBinaryReader,System.UInt32)";
            public static class read_PooledBinaryReader_UInt32Injects
            {
                public const string Chunk_read_PooledBinaryReader_UInt32_Boolean = "System.Void Chunk::read(PooledBinaryReader,System.UInt32,System.Boolean)";
            }

            public const string read_PooledBinaryReader_UInt32_Boolean = "System.Void Chunk::read(PooledBinaryReader,System.UInt32,System.Boolean)";
            public static class read_PooledBinaryReader_UInt32_BooleanInjects
            {
                public const string BinaryReader_ReadInt32 = "System.Int32 System.IO.BinaryReader::ReadInt32()";
                public const string Chunk_set_Z_Int32 = "System.Void Chunk::set_Z(System.Int32)";
                public const string BinaryReader_ReadUInt64 = "System.UInt64 System.IO.BinaryReader::ReadUInt64()";
                public const string MemoryPooledObject_1_FreeSync_IList_1 = "System.Void MemoryPooledObject`1<ChunkBlockLayer>::FreeSync(System.Collections.Generic.IList`1<ChunkBlockLayer>)";
                public const string Array_Clear_Array_Int32_Int32 = "System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)";
                public const string String_Concat_Object_Object_Object = "System.String System.String::Concat(System.Object,System.Object,System.Object)";
                public const string BinaryReader_ReadBoolean = "System.Boolean System.IO.BinaryReader::ReadBoolean()";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "ChunkBlockLayer MemoryPooledObject`1<ChunkBlockLayer>::AllocSync(System.Boolean)";
                public const string ChunkBlockLayer_Read_BinaryReader_UInt32_Boolean = "System.Void ChunkBlockLayer::Read(System.IO.BinaryReader,System.UInt32,System.Boolean)";
                public const string ChunkBlockChannel_Convert_ChunkBlockLayerLegacy_ = "System.Void ChunkBlockChannel::Convert(ChunkBlockLayerLegacy[])";
                public const string ChunkBlockChannel_Read_BinaryReader_UInt32_Boolean = "System.Void ChunkBlockChannel::Read(System.IO.BinaryReader,System.UInt32,System.Boolean)";
                public const string Chunk_recalcIndexedBlocks = "System.Void Chunk::recalcIndexedBlocks()";
                public const string BinaryReader_get_BaseStream = "System.IO.Stream System.IO.BinaryReader::get_BaseStream()";
                public const string BinaryFormatter_Deserialize_Stream = "System.Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::Deserialize(System.IO.Stream)";
                public const string Byte_Get_Int32_Int32 = "System.Byte System.Byte[0...,0...]::Get(System.Int32,System.Int32)";
                public const string BinaryReader_Read_Byte_Int32_Int32 = "System.Int32 System.IO.BinaryReader::Read(System.Byte[],System.Int32,System.Int32)";
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string Chunk_SetTerrainHeight_Int32_Int32_Byte = "System.Void Chunk::SetTerrainHeight(System.Int32,System.Int32,System.Byte)";
                public const string Chunk_SetBiomeId_Int32_Int32_Byte = "System.Void Chunk::SetBiomeId(System.Int32,System.Int32,System.Byte)";
                public const string BiomeIntensity_ToArray_Byte_Int32 = "System.Void BiomeIntensity::ToArray(System.Byte[],System.Int32)";
                public const string BinaryReader_ReadByte = "System.Byte System.IO.BinaryReader::ReadByte()";
                public const string BinaryReader_ReadUInt16 = "System.UInt16 System.IO.BinaryReader::ReadUInt16()";
                public const string DictionaryKeyValueList_2_Clear = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Clear()";
                public const string ChunkCustomData_Read_BinaryReader = "System.Void ChunkCustomData::Read(System.IO.BinaryReader)";
                public const string DictionaryKeyValueList_2_Set_T_S = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Set(System.String,ChunkCustomData)";
                public const string SmartArray_read_BinaryReader = "System.Void SmartArray::read(System.IO.BinaryReader)";
                public const string ChunkBlockChannel_Convert_SmartArray_Int32 = "System.Void ChunkBlockChannel::Convert(SmartArray,System.Int32)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<Entity>::Clear()";
                public const string EntityCreationData_read_PooledBinaryReader_Boolean = "System.Void EntityCreationData::read(PooledBinaryReader,System.Boolean)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Add(EntityCreationData)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<EntityCreationData>::get_Count()";
                public const string DictionaryList_2_Clear = "System.Void DictionaryList`2<Vector3i,TileEntity>::Clear()";
                public const string TileEntity_Instantiate_TileEntityType_Chunk = "TileEntity TileEntity::Instantiate(TileEntityType,Chunk)";
                public const string TileEntity_read_PooledBinaryReader_StreamModeRead = "System.Void TileEntity::read(PooledBinaryReader,TileEntity/StreamModeRead)";
                public const string TileEntity_OnReadComplete = "System.Void TileEntity::OnReadComplete()";
                public const string TileEntity_get_localChunkPos = "Vector3i TileEntity::get_localChunkPos()";
                public const string DictionaryList_2_Set_T_S = "System.Void DictionaryList`2<Vector3i,TileEntity>::Set(Vector3i,TileEntity)";
                public const string PList_1_Read_BinaryReader = "System.Void PList`1<EntitySpawner>::Read(System.IO.BinaryReader)";
                public const string SleeperVolume_Read_BinaryReader = "SleeperVolume SleeperVolume::Read(System.IO.BinaryReader)";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string DictionaryKeyList_2_Clear = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Clear()";
                public const string ChunkBlockLayer_GetIdAt_Int32 = "System.Int32 ChunkBlockLayer::GetIdAt(System.Int32)";
                public const string ChunkBlockLayer_GetAt_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Chunk_ToWorldPos_Vector3i = "Vector3i Chunk::ToWorldPos(Vector3i)";
                public const string DictionaryKeyList_2_Add_T_S = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Add(Vector3i,System.Int32)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string BinaryReader_ReadInt16 = "System.Int16 System.IO.BinaryReader::ReadInt16()";
                public const string List_1_set_Capacity_Int32 = "System.Void System.Collections.Generic.List`1<Vector3b>::set_Capacity(System.Int32)";
                public const string Vector3b_ctor_Byte_Byte_Byte = "System.Void Vector3b::.ctor(System.Byte,System.Byte,System.Byte)";
                public const string Object_GetHashCode = "System.Int32 System.Object::GetHashCode()";
                public const string HashSet_1_Add_T = "System.Boolean System.Collections.Generic.HashSet`1<System.Int32>::Add(System.Int32)";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string SavedInWorldTicks = "System.UInt64 Chunk::SavedInWorldTicks";
                public const string LastTimeRandomTicked = "System.UInt64 Chunk::LastTimeRandomTicked";
                public const string poolCBL = "MemoryPooledObject`1<ChunkBlockLayer> MemoryPools::poolCBL";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string bEmptyDirty = "System.Boolean Chunk::bEmptyDirty";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
                public const string Default = "BiomeIntensity BiomeIntensity::Default";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string key = "System.String ChunkCustomData::key";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
                public const string NeedsDecoration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsDecoration";
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
                public const string tickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::tickedBlocks";
                public const string list = "Block[] Block::list";
                public const string IsRandomlyTick = "System.Boolean Block::IsRandomlyTick";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string insideDevicesHashSet = "System.Collections.Generic.HashSet`1<System.Int32> Chunk::insideDevicesHashSet";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
                public const string StopStabilityCalculation = "System.Boolean Chunk::StopStabilityCalculation";
                public const string Exception_ctor_String = "System.Void System.Exception::.ctor(System.String)";
                public const string BinaryFormatter_ctor = "System.Void System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::.ctor()";
                public const string ChunkCustomData_ctor = "System.Void ChunkCustomData::.ctor()";
                public const string SmartArray_ctor_Int32_Int32_Int32 = "System.Void SmartArray::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockChannel_ctor_Int64_Int32 = "System.Void ChunkBlockChannel::.ctor(System.Int64,System.Int32)";
                public const string EntityCreationData_ctor = "System.Void EntityCreationData::.ctor()";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string save = "System.Void Chunk::save(PooledBinaryWriter)";
            public static class saveInjects
            {
                public const string Chunk_saveBlockIds = "System.Void Chunk::saveBlockIds()";
                public const string Chunk_write_PooledBinaryWriter_Boolean = "System.Void Chunk::write(PooledBinaryWriter,System.Boolean)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string GameTimer_get_Instance = "GameTimer GameTimer::get_Instance()";
                public const string ticks = "System.UInt64 GameTimer::ticks";
                public const string SavedInWorldTicks = "System.UInt64 Chunk::SavedInWorldTicks";
            }

            public const string saveBlockIds = "System.Void Chunk::saveBlockIds()";
            public static class saveBlockIdsInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string NameIdMapping_AddMapping_Int32_String_Boolean = "System.Void NameIdMapping::AddMapping(System.Int32,System.String,System.Boolean)";
                public const string ChunkBlockLayer_SaveBlockMappings_NameIdMapping = "System.Void ChunkBlockLayer::SaveBlockMappings(NameIdMapping)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string nameIdMapping = "NameIdMapping Block::nameIdMapping";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string Air = "BlockValue BlockValue::Air";
                public const string blockID = "System.Int32 Block::blockID";
            }

            public const string write_PooledBinaryWriter = "System.Void Chunk::write(PooledBinaryWriter)";
            public static class write_PooledBinaryWriterInjects
            {
                public const string Chunk_write_PooledBinaryWriter_Boolean = "System.Void Chunk::write(PooledBinaryWriter,System.Boolean)";
            }

            public const string write_PooledBinaryWriter_Boolean = "System.Void Chunk::write(PooledBinaryWriter,System.Boolean)";
            public static class write_PooledBinaryWriter_BooleanInjects
            {
                public const string MemoryPooledArray_1_Alloc_Int32 = "System.Byte[] MemoryPooledArray`1<System.Byte>::Alloc(System.Int32)";
                public const string BinaryWriter_Write_Int32 = "System.Void System.IO.BinaryWriter::Write(System.Int32)";
                public const string BinaryWriter_Write_UInt64 = "System.Void System.IO.BinaryWriter::Write(System.UInt64)";
                public const string BinaryWriter_Write_Boolean = "System.Void System.IO.BinaryWriter::Write(System.Boolean)";
                public const string ChunkBlockLayer_Write_BinaryWriter_Boolean = "System.Void ChunkBlockLayer::Write(System.IO.BinaryWriter,System.Boolean)";
                public const string ChunkBlockChannel_Write_BinaryWriter_Boolean_Byte_ = "System.Void ChunkBlockChannel::Write(System.IO.BinaryWriter,System.Boolean,System.Byte[])";
                public const string BinaryWriter_Write_Byte_ = "System.Void System.IO.BinaryWriter::Write(System.Byte[])";
                public const string BinaryWriter_Write_Byte = "System.Void System.IO.BinaryWriter::Write(System.Byte)";
                public const string List_1_get_Item_Int32 = "ChunkCustomData System.Collections.Generic.List`1<ChunkCustomData>::get_Item(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<ChunkCustomData>::get_Count()";
                public const string BinaryWriter_Write_UInt16 = "System.Void System.IO.BinaryWriter::Write(System.UInt16)";
                public const string ChunkCustomData_Write_BinaryWriter = "System.Void ChunkCustomData::Write(System.IO.BinaryWriter)";
                public const string Entity_IsSavedToFile = "System.Boolean Entity::IsSavedToFile()";
                public const string Entity_IsSavedToNetwork = "System.Boolean Entity::IsSavedToNetwork()";
                public const string EntityCreationData_write_PooledBinaryWriter_Boolean = "System.Void EntityCreationData::write(PooledBinaryWriter,System.Boolean)";
                public const string DictionaryList_2_get_Count = "System.Int32 DictionaryList`2<Vector3i,TileEntity>::get_Count()";
                public const string TileEntity_GetTileEntityType = "TileEntityType TileEntity::GetTileEntityType()";
                public const string TileEntity_write_PooledBinaryWriter_StreamModeWrite = "System.Void TileEntity::write(PooledBinaryWriter,TileEntity/StreamModeWrite)";
                public const string PList_1_Write_BinaryWriter = "System.Void PList`1<EntitySpawner>::Write(System.IO.BinaryWriter)";
                public const string BinaryWriter_Write_Int16 = "System.Void System.IO.BinaryWriter::Write(System.Int16)";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Vector3b> System.Collections.Generic.List`1<Vector3b>::GetEnumerator()";
                public const string Enumerator_get_Current = "Vector3b System.Collections.Generic.List`1/Enumerator<Vector3b>::get_Current()";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<System.Byte>::Clear()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<System.Byte>::Add(System.Byte)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<Vector3b>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string MemoryPooledArray_1_Free_T_ = "System.Void MemoryPooledArray`1<System.Byte>::Free(System.Byte[])";
                public const string poolByte = "MemoryPooledArray`1<System.Byte> MemoryPools::poolByte";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string SavedInWorldTicks = "System.UInt64 Chunk::SavedInWorldTicks";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string valueList = "System.Collections.Generic.List`1<ChunkCustomData> DictionaryKeyValueList`2<System.String,ChunkCustomData>::valueList";
                public const string isSavedToNetwork = "System.Boolean ChunkCustomData::isSavedToNetwork";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string list = "System.Collections.Generic.List`1<TileEntity> DictionaryList`2<Vector3i,TileEntity>::list";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string x = "System.Byte Vector3b::x";
                public const string z = "System.Byte Vector3b::z";
                public const string y = "System.Byte Vector3b::y";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
                public const string EntityCreationData_ctor_Entity = "System.Void EntityCreationData::.ctor(Entity)";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<System.Byte>::.ctor()";
            }

            public const string recalcIndexedBlocks = "System.Void Chunk::recalcIndexedBlocks()";
            public static class recalcIndexedBlocksInjects
            {
                public const string DictionarySave_2_Clear = "System.Void DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::Clear()";
                public const string ChunkBlockLayer_AddIndexedBlocks_Int32_DictionarySave_2 = "System.Void ChunkBlockLayer::AddIndexedBlocks(System.Int32,DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>)";
                public const string IndexedBlocks = "DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>> Chunk::IndexedBlocks";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string AddEntityStub = "System.Void Chunk::AddEntityStub(EntityCreationData)";
            public static class AddEntityStubInjects
            {
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Add(EntityCreationData)";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
            }

            public const string GetBlockEntity_Vector3i = "BlockEntityData Chunk::GetBlockEntity(Vector3i)";
            public static class GetBlockEntity_Vector3iInjects
            {
                public const string GameUtils_Vector3iToUInt64_Vector3i = "System.UInt64 GameUtils::Vector3iToUInt64(Vector3i)";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::ContainsKey(System.UInt64)";
                public const string Dictionary_2_get_Item_TKey = "BlockEntityData System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::get_Item(System.UInt64)";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::dict";
            }

            public const string GetBlockEntity_Transform = "BlockEntityData Chunk::GetBlockEntity(UnityEngine.Transform)";
            public static class GetBlockEntity_TransformInjects
            {
                public const string List_1_get_Item_Int32 = "BlockEntityData System.Collections.Generic.List`1<BlockEntityData>::get_Item(System.Int32)";
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockEntityData>::get_Count()";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string list = "System.Collections.Generic.List`1<BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::list";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
            }

            public const string AddEntityBlockStub = "System.Void Chunk::AddEntityBlockStub(BlockEntityData)";
            public static class AddEntityBlockStubInjects
            {
                public const string GameUtils_Vector3iToUInt64_Vector3i = "System.UInt64 GameUtils::Vector3iToUInt64(Vector3i)";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::ContainsKey(System.UInt64)";
                public const string Dictionary_2_get_Item_TKey = "BlockEntityData System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::get_Item(System.UInt64)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<BlockEntityData>::Add(BlockEntityData)";
                public const string DictionaryList_2_Set_T_S = "System.Void DictionaryList`2<System.UInt64,BlockEntityData>::Set(System.UInt64,BlockEntityData)";
                public const string pos = "Vector3i BlockEntityData::pos";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::dict";
                public const string blockEntityStubsToRemove = "System.Collections.Generic.List`1<BlockEntityData> Chunk::blockEntityStubsToRemove";
            }

            public const string RemoveEntityBlockStub = "System.Void Chunk::RemoveEntityBlockStub(Vector3i)";
            public static class RemoveEntityBlockStubInjects
            {
                public const string GameUtils_Vector3iToUInt64_Vector3i = "System.UInt64 GameUtils::Vector3iToUInt64(Vector3i)";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::ContainsKey(System.UInt64)";
                public const string Dictionary_2_get_Item_TKey = "BlockEntityData System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::get_Item(System.UInt64)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<BlockEntityData>::Add(BlockEntityData)";
                public const string DictionaryList_2_Remove_T = "System.Void DictionaryList`2<System.UInt64,BlockEntityData>::Remove(System.UInt64)";
                public const string String_Concat_Object_Object_Object = "System.String System.String::Concat(System.Object,System.Object,System.Object)";
                public const string Log_Warning_String = "System.Void Log::Warning(System.String)";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::dict";
                public const string blockEntityStubsToRemove = "System.Collections.Generic.List`1<BlockEntityData> Chunk::blockEntityStubsToRemove";
            }

            public const string AddInsideDevicePosition = "System.Void Chunk::AddInsideDevicePosition(System.Int32,System.Int32,System.Int32,BlockValue)";
            public static class AddInsideDevicePositionInjects
            {
                public const string Vector3b_ctor_Int32_Int32_Int32 = "System.Void Vector3b::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Vector3b>::Add(Vector3b)";
                public const string Object_GetHashCode = "System.Int32 System.Object::GetHashCode()";
                public const string HashSet_1_Add_T = "System.Boolean System.Collections.Generic.HashSet`1<System.Int32>::Add(System.Int32)";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string insideDevicesHashSet = "System.Collections.Generic.HashSet`1<System.Int32> Chunk::insideDevicesHashSet";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
            }

            public const string EnableInsideBlockEntities = "System.Int32 Chunk::EnableInsideBlockEntities(System.Boolean)";
            public static class EnableInsideBlockEntitiesInjects
            {
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Vector3b> System.Collections.Generic.List`1<Vector3b>::GetEnumerator()";
                public const string Enumerator_get_Current = "Vector3b System.Collections.Generic.List`1/Enumerator<Vector3b>::get_Current()";
                public const string Vector3b_ToVector3i = "Vector3i Vector3b::ToVector3i()";
                public const string Chunk_ToWorldPos_Vector3i = "Vector3i Chunk::ToWorldPos(Vector3i)";
                public const string GameUtils_Vector3iToUInt64_Vector3i = "System.UInt64 GameUtils::Vector3iToUInt64(Vector3i)";
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::TryGetValue(System.UInt64,BlockEntityData&)";
                public const string Component_get_gameObject = "UnityEngine.GameObject UnityEngine.Component::get_gameObject()";
                public const string GameObject_SetActive_Boolean = "System.Void UnityEngine.GameObject::SetActive(System.Boolean)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<Vector3b>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::dict";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
            }

            public const string ResetStability = "System.Void Chunk::ResetStability()";
            public static class ResetStabilityInjects
            {
                public const string ChunkBlockChannel_Clear_Int64 = "System.Void ChunkBlockChannel::Clear(System.Int64)";
                public const string Chunk_GetBlockId_Int32_Int32_Int32 = "System.Int32 Chunk::GetBlockId(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string list = "Block[] Block::list";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string StabilitySupport = "System.Boolean Block::StabilitySupport";
            }

            public const string ResetStabilityToBottomMost = "System.Void Chunk::ResetStabilityToBottomMost()";
            public static class ResetStabilityToBottomMostInjects
            {
                public const string ChunkBlockChannel_Clear_Int64 = "System.Void ChunkBlockChannel::Clear(System.Int64)";
                public const string Chunk_GetBlockNoDamage_Int32_Int32_Int32 = "BlockValue Chunk::GetBlockNoDamage(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string list = "Block[] Block::list";
                public const string StabilitySupport = "System.Boolean Block::StabilitySupport";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string shape = "BlockShape Block::shape";
            }

            public const string RefreshSunlight = "System.Void Chunk::RefreshSunlight()";
            public static class RefreshSunlightInjects
            {
                public const string ChunkBlockChannel_SetHalf_Boolean_Byte = "System.Void ChunkBlockChannel::SetHalf(System.Boolean,System.Byte)";
                public const string Chunk_GetBlockId_Int32_Int32_Int32 = "System.Int32 Chunk::GetBlockId(System.Int32,System.Int32,System.Int32)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string list = "Block[] Block::list";
                public const string shape = "BlockShape Block::shape";
                public const string lightOpacity = "System.Int32 Block::lightOpacity";
            }

            public const string SetFullSunlight = "System.Void Chunk::SetFullSunlight()";
            public static class SetFullSunlightInjects
            {
                public const string ChunkBlockChannel_SetHalf_Boolean_Byte = "System.Void ChunkBlockChannel::SetHalf(System.Boolean,System.Byte)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string CopyLightsFrom = "System.Void Chunk::CopyLightsFrom(Chunk)";
            public static class CopyLightsFromInjects
            {
                public const string ChunkBlockChannel_CopyFrom_ChunkBlockChannel = "System.Void ChunkBlockChannel::CopyFrom(ChunkBlockChannel)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string CanMobsSpawnAtPos = "System.Boolean Chunk::CanMobsSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
            public static class CanMobsSpawnAtPosInjects
            {
                public const string Chunk_IsTraderArea_Int32_Int32 = "System.Boolean Chunk::IsTraderArea(System.Int32,System.Int32)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string list = "Block[] Block::list";
                public const string CanMobsSpawnOn = "System.Boolean Block::CanMobsSpawnOn";
                public const string shape = "BlockShape Block::shape";
                public const string IsSolidSpace = "System.Boolean BlockShape::IsSolidSpace";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
            }

            public const string CanPlayersSpawnAtPos = "System.Boolean Chunk::CanPlayersSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
            public static class CanPlayersSpawnAtPosInjects
            {
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string list = "Block[] Block::list";
                public const string CanPlayersSpawnOn = "System.Boolean Block::CanPlayersSpawnOn";
                public const string blockID = "System.Int32 Block::blockID";
                public const string shape = "BlockShape Block::shape";
                public const string IsSolidSpace = "System.Boolean BlockShape::IsSolidSpace";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
            }

            public const string FindRandomTopSoilPoint = "System.Boolean Chunk::FindRandomTopSoilPoint(World,System.Int32&,System.Int32&,System.Int32&,System.Int32)";
            public static class FindRandomTopSoilPointInjects
            {
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string GameRandom_RandomRange_Int32 = "System.Int32 GameRandom::RandomRange(System.Int32)";
                public const string Chunk_GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
                public const string Chunk_CanMobsSpawnAtPos_Int32_Int32_Int32_Boolean = "System.Boolean Chunk::CanMobsSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string FindRandomCavePoint = "System.Boolean Chunk::FindRandomCavePoint(World,System.Int32&,System.Int32&,System.Int32&,System.Int32,System.Int32)";
            public static class FindRandomCavePointInjects
            {
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string GameRandom_RandomRange_Int32 = "System.Int32 GameRandom::RandomRange(System.Int32)";
                public const string Chunk_GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
                public const string Chunk_CanMobsSpawnAtPos_Int32_Int32_Int32_Boolean = "System.Boolean Chunk::CanMobsSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string FindSpawnPointAtXZ = "System.Boolean Chunk::FindSpawnPointAtXZ(System.Int32,System.Int32,System.Int32&,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)";
            public static class FindSpawnPointAtXZInjects
            {
                public const string Utils_FastClamp_Int32_Int32_Int32 = "System.Int32 Utils::FastClamp(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetLightValue_Int32_Int32_Int32_Int32 = "System.Int32 Chunk::GetLightValue(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string Chunk_CanMobsSpawnAtPos_Int32_Int32_Int32_Boolean = "System.Boolean Chunk::CanMobsSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string GetLightBrightness = "System.Single Chunk::GetLightBrightness(System.Int32,System.Int32,System.Int32,System.Int32)";
            public static class GetLightBrightnessInjects
            {
                public const string Chunk_GetLightValue_Int32_Int32_Int32_Int32 = "System.Int32 Chunk::GetLightValue(System.Int32,System.Int32,System.Int32,System.Int32)";
            }

            public const string GetLightValue = "System.Int32 Chunk::GetLightValue(System.Int32,System.Int32,System.Int32,System.Int32)";
            public static class GetLightValueInjects
            {
                public const string Chunk_GetLight_Int32_Int32_Int32_LIGHT_TYPE = "System.Byte Chunk::GetLight(System.Int32,System.Int32,System.Int32,Chunk/LIGHT_TYPE)";
            }

            public const string GetLight = "System.Byte Chunk::GetLight(System.Int32,System.Int32,System.Int32,Chunk/LIGHT_TYPE)";
            public static class GetLightInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string SetLight = "System.Void Chunk::SetLight(System.Int32,System.Int32,System.Int32,System.Byte,Chunk/LIGHT_TYPE)";
            public static class SetLightInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_set_NeedsRegenerationAt_Int32 = "System.Void Chunk::set_NeedsRegenerationAt(System.Int32)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string CheckSameLight = "System.Void Chunk::CheckSameLight()";
            public static class CheckSameLightInjects
            {
                public const string ChunkBlockChannel_CheckSameValue = "System.Void ChunkBlockChannel::CheckSameValue()";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string CheckSameStability = "System.Void Chunk::CheckSameStability()";
            public static class CheckSameStabilityInjects
            {
                public const string ChunkBlockChannel_CheckSameValue = "System.Void ChunkBlockChannel::CheckSameValue()";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
            }

            public const string NeighbourChunksDecorated = "System.Boolean Chunk::NeighbourChunksDecorated(Chunk[])";
            public static class NeighbourChunksDecoratedInjects
            {
                public const string NeedsDecoration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsDecoration";
            }

            public const string NeighbourChunksLit = "System.Boolean Chunk::NeighbourChunksLit(Chunk[])";
            public static class NeighbourChunksLitInjects
            {
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
            }

            public const string GetWorldPos = "Vector3i Chunk::GetWorldPos()";
            public static class GetWorldPosInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string GetBlockWorldPosX = "System.Int32 Chunk::GetBlockWorldPosX(System.Int32)";
            public static class GetBlockWorldPosXInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
            }

            public const string GetBlockWorldPosZ = "System.Int32 Chunk::GetBlockWorldPosZ(System.Int32)";
            public static class GetBlockWorldPosZInjects
            {
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
            public static class GetHeight_Int32_Int32Injects
            {
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string SetHeight = "System.Void Chunk::SetHeight(System.Int32,System.Int32,System.Byte)";
            public static class SetHeightInjects
            {
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string GetMaxHeight = "System.Byte Chunk::GetMaxHeight()";
            public static class GetMaxHeightInjects
            {
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string GetTerrainHeight = "System.Byte Chunk::GetTerrainHeight(System.Int32,System.Int32)";
            public static class GetTerrainHeightInjects
            {
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
            }

            public const string SetTerrainHeight = "System.Void Chunk::SetTerrainHeight(System.Int32,System.Int32,System.Byte)";
            public static class SetTerrainHeightInjects
            {
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
            }

            public const string GetTopMostTerrainHeight = "System.Byte Chunk::GetTopMostTerrainHeight()";
            public static class GetTopMostTerrainHeightInjects
            {
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
            }

            public const string IsTopSoil = "System.Boolean Chunk::IsTopSoil(System.Int32,System.Int32)";
            public static class IsTopSoilInjects
            {
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
            }

            public const string SetTopSoilBroken = "System.Void Chunk::SetTopSoilBroken(System.Int32,System.Int32)";
            public static class SetTopSoilBrokenInjects
            {
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
            }

            public const string GetBlock_Vector3i = "BlockValue Chunk::GetBlock(Vector3i)";
            public static class GetBlock_Vector3iInjects
            {
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Chunk_GetDamage_Int32_Int32_Int32 = "System.Int32 Chunk::GetDamage(System.Int32,System.Int32,System.Int32)";
                public const string Air = "BlockValue BlockValue::Air";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string y = "System.Int32 Vector3i::y";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string damage = "System.Int32 BlockValue::damage";
            }

            public const string GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
            public static class GetBlock_Int32_Int32_Int32Injects
            {
                public const string Chunk_isInside_Int32_Int32_Int32 = "System.Boolean Chunk::isInside(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockByName_String_Boolean = "Block Block::GetBlockByName(System.String,System.Boolean)";
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Chunk_GetDamage_Int32_Int32_Int32 = "System.Int32 Chunk::GetDamage(System.Int32,System.Int32,System.Int32)";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
                public const string bvPOIFiller = "BlockValue Chunk::bvPOIFiller";
                public const string cPOIFillerBlock = "System.String Constants::cPOIFillerBlock";
                public const string blockID = "System.Int32 Block::blockID";
                public const string Air = "BlockValue BlockValue::Air";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string damage = "System.Int32 BlockValue::damage";
                public const string BlockValue_ctor_UInt32 = "System.Void BlockValue::.ctor(System.UInt32)";
            }

            public const string GetBlockNoDamage = "BlockValue Chunk::GetBlockNoDamage(System.Int32,System.Int32,System.Int32)";
            public static class GetBlockNoDamageInjects
            {
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Air = "BlockValue BlockValue::Air";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string GetBlockId = "System.Int32 Chunk::GetBlockId(System.Int32,System.Int32,System.Int32)";
            public static class GetBlockIdInjects
            {
                public const string ChunkBlockLayer_GetIdAt_Int32_Int32_Int32 = "System.Int32 ChunkBlockLayer::GetIdAt(System.Int32,System.Int32,System.Int32)";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string CopyMeshDataFrom = "System.Void Chunk::CopyMeshDataFrom(Chunk)";
            public static class CopyMeshDataFromInjects
            {
                public const string MemoryPooledObject_1_FreeSync_T = "System.Void MemoryPooledObject`1<ChunkBlockLayer>::FreeSync(ChunkBlockLayer)";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "ChunkBlockLayer MemoryPooledObject`1<ChunkBlockLayer>::AllocSync(System.Boolean)";
                public const string ChunkBlockLayer_CopyFrom_ChunkBlockLayer = "System.Void ChunkBlockLayer::CopyFrom(ChunkBlockLayer)";
                public const string ChunkBlockChannel_CopyFrom_ChunkBlockChannel = "System.Void ChunkBlockChannel::CopyFrom(ChunkBlockChannel)";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string poolCBL = "MemoryPooledObject`1<ChunkBlockLayer> MemoryPools::poolCBL";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
            }

            public const string GetBiomeId = "System.Byte Chunk::GetBiomeId(System.Int32,System.Int32)";
            public static class GetBiomeIdInjects
            {
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
            }

            public const string SetBiomeId = "System.Void Chunk::SetBiomeId(System.Int32,System.Int32,System.Byte)";
            public static class SetBiomeIdInjects
            {
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
            }

            public const string FillBiomeId = "System.Void Chunk::FillBiomeId(System.Byte)";
            public static class FillBiomeIdInjects
            {
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
            }

            public const string GetBiomeIntensity = "BiomeIntensity Chunk::GetBiomeIntensity(System.Int32,System.Int32)";
            public static class GetBiomeIntensityInjects
            {
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
                public const string Default = "BiomeIntensity BiomeIntensity::Default";
                public const string BiomeIntensity_ctor_Byte_Int32 = "System.Void BiomeIntensity::.ctor(System.Byte[],System.Int32)";
            }

            public const string CalcBiomeIntensity = "System.Void Chunk::CalcBiomeIntensity(Chunk[])";
            public static class CalcBiomeIntensityInjects
            {
                public const string Array_Clear_Array_Int32_Int32 = "System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)";
                public const string World_toBlockXZ_Int32 = "System.Int32 World::toBlockXZ(System.Int32)";
                public const string Chunk_GetBiomeId_Int32_Int32 = "System.Byte Chunk::GetBiomeId(System.Int32,System.Int32)";
                public const string BiomeIntensity_FromArray_Int32_ = "BiomeIntensity BiomeIntensity::FromArray(System.Int32[])";
                public const string BiomeIntensity_ToArray_Byte_Int32 = "System.Void BiomeIntensity::ToArray(System.Byte[],System.Int32)";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
            }

            public const string CalcDominantBiome = "System.Void Chunk::CalcDominantBiome()";
            public static class CalcDominantBiomeInjects
            {
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
            }

            public const string ResetBiomeIntensity = "System.Void Chunk::ResetBiomeIntensity(BiomeIntensity)";
            public static class ResetBiomeIntensityInjects
            {
                public const string BiomeIntensity_ToArray_Byte_Int32 = "System.Void BiomeIntensity::ToArray(System.Byte[],System.Int32)";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
            }

            public const string GetStability = "System.Byte Chunk::GetStability(System.Int32,System.Int32,System.Int32)";
            public static class GetStabilityInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
            }

            public const string SetStability = "System.Void Chunk::SetStability(System.Int32,System.Int32,System.Int32,System.Byte)";
            public static class SetStabilityInjects
            {
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
            }

            public const string SetDensity = "System.Void Chunk::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
            public static class SetDensityInjects
            {
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string GetDensity = "System.SByte Chunk::GetDensity(System.Int32,System.Int32,System.Int32)";
            public static class GetDensityInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string HasSameDensityValue = "System.Boolean Chunk::HasSameDensityValue(System.Int32)";
            public static class HasSameDensityValueInjects
            {
                public const string ChunkBlockChannel_HasSameValue_Int32 = "System.Boolean ChunkBlockChannel::HasSameValue(System.Int32)";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string GetSameDensityValue = "System.SByte Chunk::GetSameDensityValue(System.Int32)";
            public static class GetSameDensityValueInjects
            {
                public const string ChunkBlockChannel_GetSameValue_Int32 = "System.Int64 ChunkBlockChannel::GetSameValue(System.Int32)";
                public const string DensityTerrain = "System.SByte MarchingCubes::DensityTerrain";
                public const string DensityAir = "System.SByte MarchingCubes::DensityAir";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string CheckSameDensity = "System.Void Chunk::CheckSameDensity()";
            public static class CheckSameDensityInjects
            {
                public const string ChunkBlockChannel_CheckSameValue = "System.Void ChunkBlockChannel::CheckSameValue()";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string IsOnlyTerrain = "System.Boolean Chunk::IsOnlyTerrain(System.Int32)";
            public static class IsOnlyTerrainInjects
            {
                public const string ChunkBlockLayer_IsOnlyTerrain = "System.Boolean ChunkBlockLayer::IsOnlyTerrain()";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string CheckOnlyTerrain = "System.Void Chunk::CheckOnlyTerrain()";
            public static class CheckOnlyTerrainInjects
            {
                public const string ChunkBlockLayer_CheckOnlyTerrain = "System.Void ChunkBlockLayer::CheckOnlyTerrain()";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string GetTextureFull = "System.Int64 Chunk::GetTextureFull(System.Int32,System.Int32,System.Int32)";
            public static class GetTextureFullInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string SetTextureFull = "System.Int64 Chunk::SetTextureFull(System.Int32,System.Int32,System.Int32,System.Int64)";
            public static class SetTextureFullInjects
            {
                public const string ChunkBlockChannel_GetSet_Int32_Int32_Int32_Int64 = "System.Int64 ChunkBlockChannel::GetSet(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string GetBlockFaceTexture = "System.Int32 Chunk::GetBlockFaceTexture(System.Int32,System.Int32,System.Int32,BlockFace)";
            public static class GetBlockFaceTextureInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string SetBlockFaceTexture = "System.Int64 Chunk::SetBlockFaceTexture(System.Int32,System.Int32,System.Int32,BlockFace,System.Int32)";
            public static class SetBlockFaceTextureInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string Value64FullToIndex = "System.Int32 Chunk::Value64FullToIndex(System.Int64,BlockFace)";
            public const string TextureIdxToTextureFullValue64 = "System.Int64 Chunk::TextureIdxToTextureFullValue64(System.Int32)";
            public const string SetDamage = "System.Void Chunk::SetDamage(System.Int32,System.Int32,System.Int32,System.Int32)";
            public static class SetDamageInjects
            {
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
            }

            public const string GetDamage = "System.Int32 Chunk::GetDamage(System.Int32,System.Int32,System.Int32)";
            public static class GetDamageInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
            }

            public const string IsEmpty = "System.Boolean Chunk::IsEmpty()";
            public static class IsEmptyInjects
            {
                public const string bEmptyDirty = "System.Boolean Chunk::bEmptyDirty";
                public const string bEmpty = "System.Boolean Chunk::bEmpty";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string IsEmpty_Int32 = "System.Boolean Chunk::IsEmpty(System.Int32)";
            public static class IsEmpty_Int32Injects
            {
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string RecalcHeightAt = "System.Byte Chunk::RecalcHeightAt(System.Int32,System.Int32,System.Int32)";
            public static class RecalcHeightAtInjects
            {
                public const string ChunkBlockLayerLegacy_CalcOffset_Int32_Int32 = "System.Int32 ChunkBlockLayerLegacy::CalcOffset(System.Int32,System.Int32)";
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string SetBlock_WorldBase_Int32_Int32_Int32_BlockValue_Boolean = "BlockValue Chunk::SetBlock(WorldBase,System.Int32,System.Int32,System.Int32,BlockValue,System.Boolean)";
            public static class SetBlock_WorldBase_Int32_Int32_Int32_BlockValue_BooleanInjects
            {
                public const string Chunk_SetBlock_WorldBase_Int32_Int32_Int32_Int32_BlockValue_Boolean = "BlockValue Chunk::SetBlock(WorldBase,System.Int32,System.Int32,System.Int32,System.Int32,BlockValue,System.Boolean)";
            }

            public const string SetBlock_WorldBase_Int32_Int32_Int32_Int32_BlockValue_Boolean = "BlockValue Chunk::SetBlock(WorldBase,System.Int32,System.Int32,System.Int32,System.Int32,BlockValue,System.Boolean)";
            public static class SetBlock_WorldBase_Int32_Int32_Int32_Int32_BlockValue_BooleanInjects
            {
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_SetBlockRaw_Int32_Int32_Int32_BlockValue = "BlockValue Chunk::SetBlockRaw(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Block_OnBlockRemoved_WorldBase_Chunk_Vector3i_BlockValue = "System.Void Block::OnBlockRemoved(WorldBase,Chunk,Vector3i,BlockValue)";
                public const string Block_OnBlockAdded_WorldBase_Chunk_Vector3i_BlockValue = "System.Void Block::OnBlockAdded(WorldBase,Chunk,Vector3i,BlockValue)";
                public const string Block_OnBlockValueChanged_WorldBase_Chunk_Int32_Vector3i_BlockValue_BlockValue = "System.Void Block::OnBlockValueChanged(WorldBase,Chunk,System.Int32,Vector3i,BlockValue,BlockValue)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string SetBlockRaw = "BlockValue Chunk::SetBlockRaw(System.Int32,System.Int32,System.Int32,BlockValue)";
            public static class SetBlockRawInjects
            {
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockLayer_SetAt_Int32_Int32_Int32_UInt32 = "System.Void ChunkBlockLayer::SetAt(System.Int32,System.Int32,System.Int32,System.UInt32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Chunk_GetDamage_Int32_Int32_Int32 = "System.Int32 Chunk::GetDamage(System.Int32,System.Int32,System.Int32)";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "ChunkBlockLayer MemoryPooledObject`1<ChunkBlockLayer>::AllocSync(System.Boolean)";
                public const string Chunk_SetDamage_Int32_Int32_Int32_Int32 = "System.Void Chunk::SetDamage(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string DictionarySave_2_ContainsKey_T1 = "System.Boolean DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::ContainsKey(System.String)";
                public const string DictionarySave_2_get_Item_T1 = "System.Collections.Generic.List`1<Vector3i> DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Item(System.String)";
                public const string List_1_Remove_T = "System.Boolean System.Collections.Generic.List`1<Vector3i>::Remove(Vector3i)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Vector3i>::get_Count()";
                public const string DictionarySave_2_Remove_T1 = "System.Void DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::Remove(System.String)";
                public const string DictionarySave_2_set_Item_T1_T2 = "System.Void DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::set_Item(System.String,System.Collections.Generic.List`1<Vector3i>)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Vector3i>::Add(Vector3i)";
                public const string ChunkBlockLayerLegacy_CalcOffset_Int32_Int32 = "System.Int32 ChunkBlockLayerLegacy::CalcOffset(System.Int32,System.Int32)";
                public const string Chunk_RecalcHeightAt_Int32_Int32_Int32 = "System.Byte Chunk::RecalcHeightAt(System.Int32,System.Int32,System.Int32)";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Chunk_ToWorldPos_Vector3i = "Vector3i Chunk::ToWorldPos(Vector3i)";
                public const string DictionaryKeyList_2_Replace_T_S = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Replace(Vector3i,System.Int32)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string DictionaryKeyList_2_Remove_T = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Remove(Vector3i)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string Air = "BlockValue BlockValue::Air";
                public const string list = "Block[] Block::list";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string rawData = "System.UInt32 BlockValue::rawData";
                public const string damage = "System.Int32 BlockValue::damage";
                public const string poolCBL = "MemoryPooledObject`1<ChunkBlockLayer> MemoryPools::poolCBL";
                public const string IndexName = "System.String Block::IndexName";
                public const string IndexedBlocks = "DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>> Chunk::IndexedBlocks";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string IsRandomlyTick = "System.Boolean Block::IsRandomlyTick";
                public const string tickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::tickedBlocks";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
                public const string bEmptyDirty = "System.Boolean Chunk::bEmptyDirty";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Vector3i>::.ctor()";
            }

            public const string GetTickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::GetTickedBlocks()";
            public static class GetTickedBlocksInjects
            {
                public const string tickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::tickedBlocks";
            }

            public const string RemoveTileEntityAt = "System.Void Chunk::RemoveTileEntityAt<T>(World,Vector3i)";
            public static class RemoveTileEntityAtInjects
            {
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::TryGetValue(Vector3i,TileEntity&)";
                public const string TileEntity_OnRemove_World = "System.Void TileEntity::OnRemove(World)";
                public const string DictionaryList_2_Remove_T = "System.Void DictionaryList`2<Vector3i,TileEntity>::Remove(Vector3i)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string dict = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> DictionaryList`2<Vector3i,TileEntity>::dict";
            }

            public const string RemoveAllTileEntities = "System.Void Chunk::RemoveAllTileEntities()";
            public static class RemoveAllTileEntitiesInjects
            {
                public const string DictionaryList_2_get_Count = "System.Int32 DictionaryList`2<Vector3i,TileEntity>::get_Count()";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string DictionaryList_2_Clear = "System.Void DictionaryList`2<Vector3i,TileEntity>::Clear()";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
            }

            public const string GetHeight_Int32 = "System.Byte Chunk::GetHeight(System.Int32)";
            public static class GetHeight_Int32Injects
            {
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string AddTileEntity = "System.Void Chunk::AddTileEntity(TileEntity)";
            public static class AddTileEntityInjects
            {
                public const string TileEntity_get_localChunkPos = "Vector3i TileEntity::get_localChunkPos()";
                public const string DictionaryList_2_Set_T_S = "System.Void DictionaryList`2<Vector3i,TileEntity>::Set(Vector3i,TileEntity)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
            }

            public const string RemoveTileEntity = "System.Void Chunk::RemoveTileEntity(World,TileEntity)";
            public static class RemoveTileEntityInjects
            {
                public const string TileEntity_get_localChunkPos = "Vector3i TileEntity::get_localChunkPos()";
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::TryGetValue(Vector3i,TileEntity&)";
                public const string TileEntity_OnRemove_World = "System.Void TileEntity::OnRemove(World)";
                public const string DictionaryList_2_Remove_T = "System.Void DictionaryList`2<Vector3i,TileEntity>::Remove(Vector3i)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string dict = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> DictionaryList`2<Vector3i,TileEntity>::dict";
            }

            public const string GetTileEntity = "TileEntity Chunk::GetTileEntity(Vector3i)";
            public static class GetTileEntityInjects
            {
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::TryGetValue(Vector3i,TileEntity&)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string dict = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> DictionaryList`2<Vector3i,TileEntity>::dict";
            }

            public const string GetTileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::GetTileEntities()";
            public static class GetTileEntitiesInjects
            {
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
            }

            public const string GetEntitySpawners = "EntitySpawnerList Chunk::GetEntitySpawners()";
            public static class GetEntitySpawnersInjects
            {
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
            }

            public const string GetSleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::GetSleeperVolumes()";
            public static class GetSleeperVolumesInjects
            {
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
            }

            public const string GetTickRefCount = "System.Int32 Chunk::GetTickRefCount(System.Int32)";
            public static class GetTickRefCountInjects
            {
                public const string ChunkBlockLayer_GetTickRefCount = "System.Int32 ChunkBlockLayer::GetTickRefCount()";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string UpdateTick = "System.Void Chunk::UpdateTick(World,System.Boolean)";
            public static class UpdateTickInjects
            {
                public const string List_1_get_Item_Int32 = "TileEntity System.Collections.Generic.List`1<TileEntity>::get_Item(System.Int32)";
                public const string TileEntity_UpdateTick_World = "System.Void TileEntity::UpdateTick(World)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<TileEntity>::get_Count()";
                public const string WorldBase_IsEditor = "System.Boolean WorldBase::IsEditor()";
                public const string AIDirector_get_BloodMoonComponent = "AIDirectorBloodMoonComponent AIDirector::get_BloodMoonComponent()";
                public const string AIDirectorBloodMoonComponent_get_BloodMoonActive = "System.Boolean AIDirectorBloodMoonComponent::get_BloodMoonActive()";
                public const string GameUtils_WorldTimeToDays_UInt64 = "System.Int32 GameUtils::WorldTimeToDays(System.UInt64)";
                public const string EntitySpawner_Spawn_World_Int32_Boolean = "System.Void EntitySpawner::Spawn(World,System.Int32,System.Boolean)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string list = "System.Collections.Generic.List`1<TileEntity> DictionaryList`2<Vector3i,TileEntity>::list";
                public const string aiDirector = "AIDirector World::aiDirector";
                public const string worldTime = "System.UInt64 World::worldTime";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
            }

            public const string get_NeedsTicking = "System.Boolean Chunk::get_NeedsTicking()";
            public static class get_NeedsTickingInjects
            {
                public const string DictionaryList_2_get_Count = "System.Int32 DictionaryList`2<Vector3i,TileEntity>::get_Count()";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<EntitySpawner>::get_Count()";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
            }

            public const string IsOpenSkyAbove = "System.Boolean Chunk::IsOpenSkyAbove(System.Int32,System.Int32,System.Int32)";
            public static class IsOpenSkyAboveInjects
            {
                public const string Chunk_GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
            }

            public const string GetLivingEntitiesInBounds = "System.Void Chunk::GetLivingEntitiesInBounds(EntityAlive,UnityEngine.Bounds,System.Collections.Generic.List`1<EntityAlive>)";
            public static class GetLivingEntitiesInBoundsInjects
            {
                public const string Bounds_get_min = "UnityEngine.Vector3 UnityEngine.Bounds::get_min()";
                public const string Utils_Fastfloor_Double = "System.Int32 Utils::Fastfloor(System.Double)";
                public const string Bounds_get_max = "UnityEngine.Vector3 UnityEngine.Bounds::get_max()";
                public const string List_1_get_Item_Int32 = "Entity System.Collections.Generic.List`1<Entity>::get_Item(System.Int32)";
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string Entity_IsDead = "System.Boolean Entity::IsDead()";
                public const string Bounds_Intersects_Bounds = "System.Boolean UnityEngine.Bounds::Intersects(UnityEngine.Bounds)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string Entity_CanCollideWith_Entity = "System.Boolean Entity::CanCollideWith(Entity)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<EntityAlive>::Add(EntityAlive)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Entity>::get_Count()";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string cCollisionBlocks = "System.Int32 World::cCollisionBlocks";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string boundingBox = "UnityEngine.Bounds Entity::boundingBox";
            }

            public const string RemoveEntityFromChunk = "System.Void Chunk::RemoveEntityFromChunk(Entity)";
            public static class RemoveEntityFromChunkInjects
            {
                public const string List_1_Remove_T = "System.Boolean System.Collections.Generic.List`1<Entity>::Remove(Entity)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Entity>::get_Count()";
                public const string chunkPosAddedEntityTo = "Vector3i Entity::chunkPosAddedEntityTo";
                public const string y = "System.Int32 Vector3i::y";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
            }

            public const string AddEntityToChunk = "System.Void Chunk::AddEntityToChunk(Entity)";
            public static class AddEntityToChunkInjects
            {
                public const string Utils_Fastfloor_Single = "System.Int32 Utils::Fastfloor(System.Single)";
                public const string World_toChunkXZ_Int32 = "System.Int32 World::toChunkXZ(System.Int32)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Utils_Fastfloor_Double = "System.Int32 Utils::Fastfloor(System.Double)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Entity>::Add(Entity)";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
                public const string position = "UnityEngine.Vector3 Entity::position";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string addedToChunk = "System.Boolean Entity::addedToChunk";
                public const string chunkPosAddedEntityTo = "Vector3i Entity::chunkPosAddedEntityTo";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string GetAABB = "UnityEngine.Bounds Chunk::GetAABB()";
            public static class GetAABBInjects
            {
                public const string boundingBox = "UnityEngine.Bounds Chunk::boundingBox";
            }

            public const string updateBoundingBox = "System.Void Chunk::updateBoundingBox()";
            public static class updateBoundingBoxInjects
            {
                public const string BoundsUtils_BoundsForMinMax_Single_Single_Single_Single_Single_Single = "UnityEngine.Bounds BoundsUtils::BoundsForMinMax(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string boundingBox = "UnityEngine.Bounds Chunk::boundingBox";
            }

            public const string GetTris = "System.Int32 Chunk::GetTris()";
            public static class GetTrisInjects
            {
                public const string totalTris = "System.Int32 Chunk::totalTris";
            }

            public const string GetTrisInMesh = "System.Int32 Chunk::GetTrisInMesh(System.Int32)";
            public static class GetTrisInMeshInjects
            {
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string trisInMesh = "System.Int32[][] Chunk::trisInMesh";
            }

            public const string GetSizeOfMesh = "System.Int32 Chunk::GetSizeOfMesh(System.Int32)";
            public static class GetSizeOfMeshInjects
            {
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string sizeOfMesh = "System.Int32[][] Chunk::sizeOfMesh";
                public const string trisInMesh = "System.Int32[][] Chunk::trisInMesh";
            }

            public const string GetUsedMem = "System.Int32 Chunk::GetUsedMem()";
            public static class GetUsedMemInjects
            {
                public const string ChunkBlockLayer_GetUsedMem = "System.Int32 ChunkBlockLayer::GetUsedMem()";
                public const string ChunkBlockChannel_GetUsedMem = "System.Int32 ChunkBlockChannel::GetUsedMem()";
                public const string TotalMemory = "System.Int32 Chunk::TotalMemory";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string OnLoadedFromCache = "System.Void Chunk::OnLoadedFromCache()";
            public static class OnLoadedFromCacheInjects
            {
                public const string Chunk_set_NeedsRegeneration_Boolean = "System.Void Chunk::set_NeedsRegeneration(System.Boolean)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Clear()";
                public const string List_1_get_Item_Int32 = "Entity System.Collections.Generic.List`1<Entity>::get_Item(System.Int32)";
                public const string Entity_IsSavedToFile = "System.Boolean Entity::IsSavedToFile()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Add(EntityCreationData)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Entity>::get_Count()";
                public const string InProgressRegeneration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressRegeneration";
                public const string InProgressSaving = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressSaving";
                public const string InProgressCopying = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressCopying";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressLighting = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressLighting";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
                public const string NeedsOnlyCollisionMesh = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsOnlyCollisionMesh";
                public const string IsCollisionMeshGenerated = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::IsCollisionMeshGenerated";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string EntityCreationData_ctor_Entity = "System.Void EntityCreationData::.ctor(Entity)";
            }

            public const string OnLoad = "System.Void Chunk::OnLoad(World)";
            public static class OnLoadInjects
            {
                public const string WorldBase_IsRemote = "System.Boolean WorldBase::IsRemote()";
                public const string List_1_get_Item_Int32 = "EntityCreationData System.Collections.Generic.List`1<EntityCreationData>::get_Item(System.Int32)";
                public const string WorldBase_GetEntity_Int32 = "Entity WorldBase::GetEntity(System.Int32)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string EntityFactory_CreateEntity_EntityCreationData = "Entity EntityFactory::CreateEntity(EntityCreationData)";
                public const string World_SpawnEntityInWorld_Entity = "System.Void World::SpawnEntityInWorld(Entity)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<EntityCreationData>::get_Count()";
                public const string WorldBase_GetWorldTime = "System.UInt64 WorldBase::GetWorldTime()";
                public const string Chunk_removeExpiredCustomChunkDataEntries_UInt64 = "System.Void Chunk::removeExpiredCustomChunkDataEntries(System.UInt64)";
                public const string WorldBase_IsEditor = "System.Boolean WorldBase::IsEditor()";
                public const string GamePrefs_GetBool_EnumGamePrefs = "System.Boolean GamePrefs::GetBool(EnumGamePrefs)";
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string Chunk_get_X = "System.Int32 Chunk::get_X()";
                public const string Chunk_get_Z = "System.Int32 Chunk::get_Z()";
                public const string ChunkBlockLayer_OnLoad_WorldBase_Int32_Int32_Int32_Int32 = "System.Void ChunkBlockLayer::OnLoad(WorldBase,System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
                public const string id = "System.Int32 EntityCreationData::id";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string OnUnload = "System.Void Chunk::OnUnload(WorldBase)";
            public static class OnUnloadInjects
            {
                public const string List_1_get_Item_Int32 = "UnityEngine.GameObject System.Collections.Generic.List`1<UnityEngine.GameObject>::get_Item(System.Int32)";
                public const string Object_Destroy_Object = "System.Void UnityEngine.Object::Destroy(UnityEngine.Object)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<UnityEngine.GameObject>::get_Count()";
                public const string WorldBase_IsRemote = "System.Boolean WorldBase::IsRemote()";
                public const string WorldBase_UnloadEntities_List_1 = "System.Void WorldBase::UnloadEntities(System.Collections.Generic.List`1<Entity>)";
                public const string WorldBase_GetWorldTime = "System.UInt64 WorldBase::GetWorldTime()";
                public const string Chunk_removeExpiredCustomChunkDataEntries_UInt64 = "System.Void Chunk::removeExpiredCustomChunkDataEntries(System.UInt64)";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string TileEntity_OnUnload_World = "System.Void TileEntity::OnUnload(World)";
                public const string Chunk_removeBlockEntityTransforms = "System.Void Chunk::removeBlockEntityTransforms()";
                public const string WorldBase_IsEditor = "System.Boolean WorldBase::IsEditor()";
                public const string GamePrefs_GetBool_EnumGamePrefs = "System.Boolean GamePrefs::GetBool(EnumGamePrefs)";
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string Chunk_get_X = "System.Int32 Chunk::get_X()";
                public const string Chunk_get_Z = "System.Int32 Chunk::get_Z()";
                public const string ChunkBlockLayer_OnUnload_WorldBase_Int32_Int32_Int32_Int32 = "System.Void ChunkBlockLayer::OnUnload(WorldBase,System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
                public const string biomeParticles = "System.Collections.Generic.List`1<UnityEngine.GameObject> Chunk::biomeParticles";
                public const string spawnedBiomeParticles = "System.Boolean Chunk::spawnedBiomeParticles";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string list = "System.Collections.Generic.List`1<TileEntity> DictionaryList`2<Vector3i,TileEntity>::list";
                public const string Instance = "GameManager GameManager::Instance";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string SpawnBiomeParticles = "System.Void Chunk::SpawnBiomeParticles(UnityEngine.Transform)";
            public static class SpawnBiomeParticlesInjects
            {
                public const string BiomeParticleManager_SpawnParticles_Chunk_Transform = "System.Collections.Generic.List`1<UnityEngine.GameObject> BiomeParticleManager::SpawnParticles(Chunk,UnityEngine.Transform)";
                public const string spawnedBiomeParticles = "System.Boolean Chunk::spawnedBiomeParticles";
                public const string biomeParticles = "System.Collections.Generic.List`1<UnityEngine.GameObject> Chunk::biomeParticles";
            }

            public const string OnDisplay = "System.Void Chunk::OnDisplay(World,UnityEngine.Transform,ChunkCluster)";
            public static class OnDisplayInjects
            {
                public const string Chunk_SpawnBiomeParticles_Transform = "System.Void Chunk::SpawnBiomeParticles(UnityEngine.Transform)";
                public const string Chunk_get_X = "System.Int32 Chunk::get_X()";
                public const string Chunk_get_Z = "System.Int32 Chunk::get_Z()";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
                public const string Dictionary_2_get_Item_TKey = "System.Int32 System.Collections.Generic.Dictionary`2<System.String,System.Int32>::get_Item(System.String)";
                public const string List_1_get_Item_Int32 = "BlockEntityData System.Collections.Generic.List`1<BlockEntityData>::get_Item(System.Int32)";
                public const string Chunk_setBlockEntityRendering_BlockEntityData_Boolean = "System.Void Chunk::setBlockEntityRendering(BlockEntityData,System.Boolean)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string ChunkCluster_GetBlock_Vector3i = "BlockValue ChunkCluster::GetBlock(Vector3i)";
                public const string Chunk_RemoveEntityBlockStub_Vector3i = "System.Void Chunk::RemoveEntityBlockStub(Vector3i)";
                public const string Vector3i_op_Subtraction_Vector3i_Vector3i = "Vector3i Vector3i::op_Subtraction(Vector3i,Vector3i)";
                public const string WorldBase_GetBlock_Vector3i = "BlockValue WorldBase::GetBlock(Vector3i)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string World_GetDecorationOffsetY_Vector3i = "System.Single World::GetDecorationOffsetY(Vector3i)";
                public const string BlockShape_GetRotation_BlockValue = "UnityEngine.Quaternion BlockShape::GetRotation(BlockValue)";
                public const string BlockShapeModelEntity_GetRotatedOffset_Block_Quaternion = "UnityEngine.Vector3 BlockShapeModelEntity::GetRotatedOffset(Block,UnityEngine.Quaternion)";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string GameObjectPool_get_Instance = "GameObjectPool GameObjectPool::get_Instance()";
                public const string GameObjectPool_GetObjectForType_String = "UnityEngine.GameObject GameObjectPool::GetObjectForType(System.String)";
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string GameObject_get_transform = "UnityEngine.Transform UnityEngine.GameObject::get_transform()";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<WorldRefMono> System.Collections.Generic.List`1<WorldRefMono>::GetEnumerator()";
                public const string Enumerator_get_Current = "WorldRefMono System.Collections.Generic.List`1/Enumerator<WorldRefMono>::get_Current()";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<WorldRefMono>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<WorldRefMono>::Clear()";
                public const string Transform_set_parent_Transform = "System.Void UnityEngine.Transform::set_parent(UnityEngine.Transform)";
                public const string Vector3_get_one = "UnityEngine.Vector3 UnityEngine.Vector3::get_one()";
                public const string Transform_set_localScale_Vector3 = "System.Void UnityEngine.Transform::set_localScale(UnityEngine.Vector3)";
                public const string Vector3_op_Subtraction_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Subtraction(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Transform_set_localPosition_Vector3 = "System.Void UnityEngine.Transform::set_localPosition(UnityEngine.Vector3)";
                public const string Transform_set_localRotation_Quaternion = "System.Void UnityEngine.Transform::set_localRotation(UnityEngine.Quaternion)";
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string GameObject_get_layer = "System.Int32 UnityEngine.GameObject::get_layer()";
                public const string Utils_SetColliderLayerRecursively_GameObject_Int32 = "System.Void Utils::SetColliderLayerRecursively(UnityEngine.GameObject,System.Int32)";
                public const string Chunk_ToLocalPosition_Vector3i = "Vector3i Chunk::ToLocalPosition(Vector3i)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string Block_OnBlockEntityTransformBeforeActivated_WorldBase_Vector3i_Int32_BlockValue_BlockEntityData = "System.Void Block::OnBlockEntityTransformBeforeActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
                public const string GameObject_SetActive_Boolean = "System.Void UnityEngine.GameObject::SetActive(System.Boolean)";
                public const string Block_OnBlockEntityTransformAfterActivated_WorldBase_Vector3i_Int32_BlockValue_BlockEntityData = "System.Void Block::OnBlockEntityTransformAfterActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<UnityEngine.Transform>::Add(UnityEngine.Transform)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockEntityData>::get_Count()";
                public const string OcclusionManager_AddChunkTransforms_Chunk_List_1 = "System.Void OcclusionManager::AddChunkTransforms(Chunk,System.Collections.Generic.List`1<UnityEngine.Transform>)";
                public const string Chunk_removeBlockEntitesMarkedForRemoval = "System.Void Chunk::removeBlockEntitesMarkedForRemoval()";
                public const string AstarManager_AddBoundsToUpdate_Bounds = "System.Void AstarManager::AddBoundsToUpdate(UnityEngine.Bounds)";
                public const string LayerMappingTable = "System.Collections.Generic.Dictionary`2<System.String,System.Int32> ChunkCluster::LayerMappingTable";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string list = "System.Collections.Generic.List`1<BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::list";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
                public const string NeedsOnlyCollisionMesh = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsOnlyCollisionMesh";
                public const string bRenderingOn = "System.Boolean BlockEntityData::bRenderingOn";
                public const string blockValue = "BlockValue BlockEntityData::blockValue";
                public const string pos = "Vector3i BlockEntityData::pos";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
                public const string shape = "BlockShape Block::shape";
                public const string IsTerrainDecoration = "System.Boolean Block::IsTerrainDecoration";
                public const string up = "Vector3i Vector3i::up";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string modelName = "System.String BlockShapeModelEntity::modelName";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
                public const string wref = "System.Collections.Generic.List`1<WorldRefMono> Chunk::wref";
                public const string ChunkCluster = "ChunkCluster WorldRefMono::ChunkCluster";
                public const string ClusterIdx = "System.Int32 ChunkCluster::ClusterIdx";
                public const string occlusionTs = "System.Collections.Generic.List`1<UnityEngine.Transform> Chunk::occlusionTs";
                public const string Instance = "OcclusionManager OcclusionManager::Instance";
                public const string cullChunkEntities = "System.Boolean OcclusionManager::cullChunkEntities";
                public const string boundingBox = "UnityEngine.Bounds Chunk::boundingBox";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<WorldRefMono>::.ctor()";
            }

            public const string ToLocalPosition = "Vector3i Chunk::ToLocalPosition(Vector3i)";
            public static class ToLocalPositionInjects
            {
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
            }

            public const string removeBlockEntitesMarkedForRemoval = "System.Void Chunk::removeBlockEntitesMarkedForRemoval()";
            public static class removeBlockEntitesMarkedForRemovalInjects
            {
                public const string List_1_get_Item_Int32 = "BlockEntityData System.Collections.Generic.List`1<BlockEntityData>::get_Item(System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<UnityEngine.Transform>::Add(UnityEngine.Transform)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockEntityData>::get_Count()";
                public const string OcclusionManager_RemoveChunkTransforms_Chunk_List_1 = "System.Void OcclusionManager::RemoveChunkTransforms(Chunk,System.Collections.Generic.List`1<UnityEngine.Transform>)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<UnityEngine.Transform>::Clear()";
                public const string BlockEntityData_Cleanup = "System.Void BlockEntityData::Cleanup()";
                public const string Chunk_poolBlockEntityTransform_BlockEntityData = "System.Void Chunk::poolBlockEntityTransform(BlockEntityData)";
                public const string Instance = "OcclusionManager OcclusionManager::Instance";
                public const string cullChunkEntities = "System.Boolean OcclusionManager::cullChunkEntities";
                public const string blockEntityStubsToRemove = "System.Collections.Generic.List`1<BlockEntityData> Chunk::blockEntityStubsToRemove";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
                public const string occlusionTs = "System.Collections.Generic.List`1<UnityEngine.Transform> Chunk::occlusionTs";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
            }

            public const string OnHide = "System.Void Chunk::OnHide()";
            public static class OnHideInjects
            {
                public const string Chunk_removeBlockEntityTransforms = "System.Void Chunk::removeBlockEntityTransforms()";
                public const string AstarManager_AddBoundsToUpdate_Bounds = "System.Void AstarManager::AddBoundsToUpdate(UnityEngine.Bounds)";
                public const string boundingBox = "UnityEngine.Bounds Chunk::boundingBox";
            }

            public const string removeBlockEntityTransforms = "System.Void Chunk::removeBlockEntityTransforms()";
            public static class removeBlockEntityTransformsInjects
            {
                public const string OcclusionManager_RemoveChunk_Chunk = "System.Void OcclusionManager::RemoveChunk(Chunk)";
                public const string List_1_get_Item_Int32 = "BlockEntityData System.Collections.Generic.List`1<BlockEntityData>::get_Item(System.Int32)";
                public const string Chunk_poolBlockEntityTransform_BlockEntityData = "System.Void Chunk::poolBlockEntityTransform(BlockEntityData)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockEntityData>::get_Count()";
                public const string Instance = "OcclusionManager OcclusionManager::Instance";
                public const string cullChunkEntities = "System.Boolean OcclusionManager::cullChunkEntities";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string list = "System.Collections.Generic.List`1<BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::list";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
            }

            public const string poolBlockEntityTransform = "System.Void Chunk::poolBlockEntityTransform(BlockEntityData)";
            public static class poolBlockEntityTransformInjects
            {
                public const string Chunk_setBlockEntityRendering_BlockEntityData_Boolean = "System.Void Chunk::setBlockEntityRendering(BlockEntityData,System.Boolean)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string Component_get_gameObject = "UnityEngine.GameObject UnityEngine.Component::get_gameObject()";
                public const string GameObjectPool_get_Instance = "GameObjectPool GameObjectPool::get_Instance()";
                public const string GameObjectPool_PoolObject_GameObject = "System.Void GameObjectPool::PoolObject(UnityEngine.GameObject)";
                public const string Object_ToString = "System.String System.Object::ToString()";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string bRenderingOn = "System.Boolean BlockEntityData::bRenderingOn";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
                public const string pos = "Vector3i BlockEntityData::pos";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
            }

            public const string setBlockEntityRendering = "System.Void Chunk::setBlockEntityRendering(BlockEntityData,System.Boolean)";
            public static class setBlockEntityRenderingInjects
            {
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string Component_get_gameObject = "UnityEngine.GameObject UnityEngine.Component::get_gameObject()";
                public const string Object_ToString = "System.String System.Object::ToString()";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Renderer_set_enabled_Boolean = "System.Void UnityEngine.Renderer::set_enabled(System.Boolean)";
                public const string Component_BroadcastMessage_String_SendMessageOptions = "System.Void UnityEngine.Component::BroadcastMessage(System.String,UnityEngine.SendMessageOptions)";
                public const string bRenderingOn = "System.Boolean BlockEntityData::bRenderingOn";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
                public const string pos = "Vector3i BlockEntityData::pos";
            }

            public const string ToTerrain = "System.Void Chunk::ToTerrain(Chunk,Chunk)";
            public static class ToTerrainInjects
            {
                public const string Chunk_GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Chunk_SetBlockRaw_Int32_Int32_Int32_BlockValue = "BlockValue Chunk::SetBlockRaw(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string Chunk_GetDensity_Int32_Int32_Int32 = "System.SByte Chunk::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_SetDensity_Int32_Int32_Int32_SByte = "System.Void Chunk::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string Chunk_SetHeight_Int32_Int32_Byte = "System.Void Chunk::SetHeight(System.Int32,System.Int32,System.Byte)";
                public const string Chunk_SetTerrainHeight_Int32_Int32_Byte = "System.Void Chunk::SetTerrainHeight(System.Int32,System.Int32,System.Byte)";
                public const string Chunk_CopyLightsFrom_Chunk = "System.Void Chunk::CopyLightsFrom(Chunk)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string cTerrainBlockValue = "BlockValue Constants::cTerrainBlockValue";
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
            }

            public const string AddMeshLayer = "System.Void Chunk::AddMeshLayer(VoxelMeshLayer)";
            public static class AddMeshLayerInjects
            {
                public const string VoxelMeshLayer_GetTrisInMesh_Int32 = "System.Int32 VoxelMeshLayer::GetTrisInMesh(System.Int32)";
                public const string VoxelMeshLayer_GetSizeOfMesh_Int32 = "System.Int32 VoxelMeshLayer::GetSizeOfMesh(System.Int32)";
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Queue_1_Enqueue_T = "System.Void System.Collections.Generic.Queue`1<VoxelMeshLayer>::Enqueue(VoxelMeshLayer)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string trisInMesh = "System.Int32[][] Chunk::trisInMesh";
                public const string idx = "System.Int32 VoxelMeshLayer::idx";
                public const string sizeOfMesh = "System.Int32[][] Chunk::sizeOfMesh";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string totalTris = "System.Int32 Chunk::totalTris";
                public const string m_MeshLayers = "System.Collections.Generic.Queue`1<VoxelMeshLayer> Chunk::m_MeshLayers";
                public const string MeshLayerCount = "System.Int32 Chunk::MeshLayerCount";
            }

            public const string HasMeshLayer = "System.Boolean Chunk::HasMeshLayer()";
            public static class HasMeshLayerInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Queue_1_get_Count = "System.Int32 System.Collections.Generic.Queue`1<VoxelMeshLayer>::get_Count()";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_MeshLayers = "System.Collections.Generic.Queue`1<VoxelMeshLayer> Chunk::m_MeshLayers";
            }

            public const string GetMeshLayer = "VoxelMeshLayer Chunk::GetMeshLayer()";
            public static class GetMeshLayerInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Queue_1_Dequeue = "VoxelMeshLayer System.Collections.Generic.Queue`1<VoxelMeshLayer>::Dequeue()";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_MeshLayers = "System.Collections.Generic.Queue`1<VoxelMeshLayer> Chunk::m_MeshLayers";
                public const string MeshLayerCount = "System.Int32 Chunk::MeshLayerCount";
            }

            public const string GetDecoAllowedAt = "EnumDecoAllowed Chunk::GetDecoAllowedAt(System.Int32,System.Int32)";
            public static class GetDecoAllowedAtInjects
            {
                public const string DecoManager_get_Instance = "DecoManager DecoManager::get_Instance()";
                public const string DecoManager_IsPositionDecorateable_Int32_Int32 = "System.Boolean DecoManager::IsPositionDecorateable(System.Int32,System.Int32)";
                public const string m_DecoBiomeArray = "EnumDecoAllowed[] Chunk::m_DecoBiomeArray";
                public const string IsEnabled = "System.Boolean DecoManager::IsEnabled";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string SetDecoAllowedAt = "System.Void Chunk::SetDecoAllowedAt(System.Int32,System.Int32,EnumDecoAllowed)";
            public static class SetDecoAllowedAtInjects
            {
                public const string m_DecoBiomeArray = "EnumDecoAllowed[] Chunk::m_DecoBiomeArray";
            }

            public const string GetTerrainNormal = "UnityEngine.Vector3 Chunk::GetTerrainNormal(System.Int32,System.Int32)";
            public static class GetTerrainNormalInjects
            {
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string SetTerrainNormal = "System.Void Chunk::SetTerrainNormal(System.Int32,System.Int32,UnityEngine.Vector3)";
            public static class SetTerrainNormalInjects
            {
                public const string Utils_FastClamp_Single_Single_Single = "System.Single Utils::FastClamp(System.Single,System.Single,System.Single)";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string z = "System.Single UnityEngine.Vector3::z";
            }

            public const string ToWorldPos = "Vector3i Chunk::ToWorldPos(Vector3i)";
            public static class ToWorldPosInjects
            {
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string updateFullMap = "System.Void Chunk::updateFullMap()";
            public static class updateFullMapInjects
            {
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_Equals_BlockValue = "System.Boolean BlockValue::Equals(BlockValue)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetMapColor_BlockValue_Vector3_Int32 = "UnityEngine.Color Block::GetMapColor(BlockValue,UnityEngine.Vector3,System.Int32)";
                public const string Utils_ToColor5_Color = "System.UInt16 Utils::ToColor5(UnityEngine.Color)";
                public const string ModEvent_1_Invoke_T1 = "System.Void ModEvent`1<Chunk>::Invoke(Chunk)";
                public const string mapColors = "System.UInt16[] Chunk::mapColors";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string Air = "BlockValue BlockValue::Air";
                public const string list = "Block[] Block::list";
                public const string IsTerrainDecoration = "System.Boolean Block::IsTerrainDecoration";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
                public const string CalcChunkColorsDone = "ModEvent`1<Chunk> ModEvents::CalcChunkColorsDone";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string GetMapColors = "System.UInt16[] Chunk::GetMapColors()";
            public static class GetMapColorsInjects
            {
                public const string Chunk_updateFullMap = "System.Void Chunk::updateFullMap()";
                public const string mapColors = "System.UInt16[] Chunk::mapColors";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
            }

            public const string OnDecorated = "System.Void Chunk::OnDecorated()";
            public static class OnDecoratedInjects
            {
                public const string Chunk_CheckSameDensity = "System.Void Chunk::CheckSameDensity()";
                public const string Chunk_CheckOnlyTerrain = "System.Void Chunk::CheckOnlyTerrain()";
            }

            public const string IsAreaMaster = "System.Boolean Chunk::IsAreaMaster()";
            public static class IsAreaMasterInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string IsAreaMasterCornerChunksLoaded = "System.Boolean Chunk::IsAreaMasterCornerChunksLoaded(ChunkCluster)";
            public static class IsAreaMasterCornerChunksLoadedInjects
            {
                public const string WorldChunkCache_GetChunkSync_Int32_Int32 = "Chunk WorldChunkCache::GetChunkSync(System.Int32,System.Int32)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string ToAreaMasterChunkPos = "Vector3i Chunk::ToAreaMasterChunkPos(Vector3i)";
            public static class ToAreaMasterChunkPosInjects
            {
                public const string World_toChunkXZ_Int32 = "System.Int32 World::toChunkXZ(System.Int32)";
                public const string World_toChunkY_Int32 = "System.Int32 World::toChunkY(System.Int32)";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string IsAreaMasterDominantBiomeInitialized = "System.Boolean Chunk::IsAreaMasterDominantBiomeInitialized(ChunkCluster)";
            public static class IsAreaMasterDominantBiomeInitializedInjects
            {
                public const string WorldChunkCache_GetChunkSync_Int32_Int32 = "Chunk WorldChunkCache::GetChunkSync(System.Int32,System.Int32)";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string biomeCnt = "System.Int32[] Chunk::biomeCnt";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
            }

            public const string GetChunkBiomeSpawnData = "ChunkAreaBiomeSpawnData Chunk::GetChunkBiomeSpawnData()";
            public static class GetChunkBiomeSpawnDataInjects
            {
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<System.String,ChunkCustomData>::TryGetValue(System.String,ChunkCustomData&)";
                public const string DictionaryKeyValueList_2_Set_T_S = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Set(System.String,ChunkCustomData)";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string biomeSpawnData = "ChunkAreaBiomeSpawnData Chunk::biomeSpawnData";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.String,ChunkCustomData> DictionaryKeyValueList`2<System.String,ChunkCustomData>::dict";
                public const string key = "System.String ChunkCustomData::key";
                public const string ChunkCustomData_ctor_String_UInt64_Boolean = "System.Void ChunkCustomData::.ctor(System.String,System.UInt64,System.Boolean)";
                public const string ChunkAreaBiomeSpawnData_ctor_Chunk_Byte_ChunkCustomData = "System.Void ChunkAreaBiomeSpawnData::.ctor(Chunk,System.Byte,ChunkCustomData)";
            }

            public const string removeExpiredCustomChunkDataEntries = "System.Void Chunk::removeExpiredCustomChunkDataEntries(System.UInt64)";
            public static class removeExpiredCustomChunkDataEntriesInjects
            {
                public const string List_1_get_Item_Int32 = "ChunkCustomData System.Collections.Generic.List`1<ChunkCustomData>::get_Item(System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<System.String>::Add(System.String)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<ChunkCustomData>::get_Count()";
                public const string DictionaryKeyValueList_2_Remove_T = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Remove(System.String)";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string valueList = "System.Collections.Generic.List`1<ChunkCustomData> DictionaryKeyValueList`2<System.String,ChunkCustomData>::valueList";
                public const string expiresInWorldTime = "System.UInt64 ChunkCustomData::expiresInWorldTime";
                public const string keyList = "System.Collections.Generic.List`1<System.String> DictionaryKeyValueList`2<System.String,ChunkCustomData>::keyList";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<System.String>::.ctor()";
            }

            public const string SetTraderArea = "System.Void Chunk::SetTraderArea(System.Int32,System.Int32,System.Boolean)";
            public static class SetTraderAreaInjects
            {
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
            }

            public const string IsTraderArea = "System.Boolean Chunk::IsTraderArea(System.Int32,System.Int32)";
            public static class IsTraderAreaInjects
            {
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
            }

            public const string IsAnyTraderArea = "System.Boolean Chunk::IsAnyTraderArea()";
            public static class IsAnyTraderAreaInjects
            {
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
            }

            public const string GetHashCode = "System.Int32 Chunk::GetHashCode()";
            public static class GetHashCodeInjects
            {
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string Equals = "System.Boolean Chunk::Equals(System.Object)";
            public static class EqualsInjects
            {
                public const string Object_Equals_Object = "System.Boolean System.Object::Equals(System.Object)";
                public const string Object_GetHashCode = "System.Int32 System.Object::GetHashCode()";
            }

            public const string ToString = "System.String Chunk::ToString()";
            public static class ToStringInjects
            {
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string CheckDensities = "System.Collections.Generic.List`1<Chunk/DensityMismatchInformation> Chunk::CheckDensities(System.Boolean)";
            public static class CheckDensitiesInjects
            {
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetDensity_Int32_Int32_Int32 = "System.SByte Chunk::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string DensityMismatchInformation_ctor_Int32_Int32_Int32_SByte_Int32_Boolean = "System.Void Chunk/DensityMismatchInformation::.ctor(System.Int32,System.Int32,System.Int32,System.SByte,System.Int32,System.Boolean)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Chunk/DensityMismatchInformation>::Add(Chunk/DensityMismatchInformation)";
                public const string Object_ToString = "System.String System.Object::ToString()";
                public const string Log_Warning_String = "System.Void Log::Warning(System.String)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string y = "System.Int32 Vector3i::y";
                public const string list = "Block[] Block::list";
                public const string shape = "BlockShape Block::shape";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Chunk/DensityMismatchInformation>::.ctor()";
            }

            public const string RepairDensities = "System.Boolean Chunk::RepairDensities()";
            public static class RepairDensitiesInjects
            {
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Chunk_GetDensity_Int32_Int32_Int32 = "System.SByte Chunk::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string Chunk_SetDensity_Int32_Int32_Int32_SByte = "System.Void Chunk::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string y = "System.Int32 Vector3i::y";
                public const string list = "Block[] Block::list";
                public const string shape = "BlockShape Block::shape";
            }

            public const string LoopOverAllBlocks = "System.Void Chunk::LoopOverAllBlocks(ChunkBlockLayer/LoopBlocksDelegate,System.Boolean,System.Boolean)";
            public static class LoopOverAllBlocksInjects
            {
                public const string ChunkBlockLayer_LoopOverAllBlocks_Chunk_Int32_LoopBlocksDelegate_Boolean_Boolean = "System.Void ChunkBlockLayer::LoopOverAllBlocks(Chunk,System.Int32,ChunkBlockLayer/LoopBlocksDelegate,System.Boolean,System.Boolean)";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string isInside = "System.Boolean Chunk::isInside(System.Int32,System.Int32,System.Int32)";
            public static class isInsideInjects
            {
                public const string Vector3b_ctor_Int32_Int32_Int32 = "System.Void Vector3b::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Object_GetHashCode = "System.Int32 System.Object::GetHashCode()";
                public const string HashSet_1_Contains_T = "System.Boolean System.Collections.Generic.HashSet`1<System.Int32>::Contains(System.Int32)";
                public const string insideDevicesHashSet = "System.Collections.Generic.HashSet`1<System.Int32> Chunk::insideDevicesHashSet";
            }

            public const string RestoreCulledBlocks = "BlockFaceFlag Chunk::RestoreCulledBlocks(World)";
            public static class RestoreCulledBlocksInjects
            {
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Vector3b>::get_Count()";
                public const string List_1_get_Item_Int32 = "Vector3b System.Collections.Generic.List`1<Vector3b>::get_Item(System.Int32)";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string x = "System.Byte Vector3b::x";
                public const string z = "System.Byte Vector3b::z";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
            }
        }
    }
}
