namespace BetterWaysToDie.Mixins
{
    [System.ComponentModel.DescriptionAttribute("Generated by SharpILMixins")]
    public static class ChunkTargets
    {
        public static class Methods
        {
            public const string get_isModified = "System.Boolean Chunk::get_isModified()";
            public static class get_isModifiedInjects
            {
                public const string _isModified_k_BackingField = "System.Boolean Chunk::<isModified>k__BackingField";
            }

            public const string set_isModified = "System.Void Chunk::set_isModified(System.Boolean)";
            public static class set_isModifiedInjects
            {
                public const string _isModified_k_BackingField = "System.Boolean Chunk::<isModified>k__BackingField";
            }

            public const string Finalize = "System.Void Chunk::Finalize()";
            public static class FinalizeInjects
            {
                public const string Object_Finalize = "System.Void System.Object::Finalize()";
                public const string InstanceCount = "System.Int32 Chunk::InstanceCount";
            }

            public const string ResetLights = "System.Void Chunk::ResetLights(System.Byte)";
            public static class ResetLightsInjects
            {
                public const string ChunkBlockChannel_Clear_Int64 = "System.Void ChunkBlockChannel::Clear(System.Int64)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string Reset = "System.Void Chunk::Reset()";
            public static class ResetInjects
            {
                public const string String_Concat_Object_Object = "System.String System.String::Concat(System.Object,System.Object)";
                public const string Log_Warning_String = "System.Void Log::Warning(System.String)";
                public const string Chunk_set_ClrIdx_Int32 = "System.Void Chunk::set_ClrIdx(System.Int32)";
                public const string Chunk_set_Z_Int32 = "System.Void Chunk::set_Z(System.Int32)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<Entity>::Clear()";
                public const string DictionaryList_2_Clear = "System.Void DictionaryList`2<System.UInt64,BlockEntityData>::Clear()";
                public const string DictionarySave_2_Clear = "System.Void DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::Clear()";
                public const string HashSet_1_Clear = "System.Void System.Collections.Generic.HashSet`1<System.Int32>::Clear()";
                public const string Chunk_set_NeedsRegeneration_Boolean = "System.Void Chunk::set_NeedsRegeneration(System.Boolean)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string MemoryPooledObject_1_FreeSync_IList_1 = "System.Void MemoryPooledObject`1<ChunkBlockLayer>::FreeSync(System.Collections.Generic.IList`1<ChunkBlockLayer>)";
                public const string ChunkBlockChannel_FreeLayers = "System.Void ChunkBlockChannel::FreeLayers()";
                public const string Chunk_ResetLights_Byte = "System.Void Chunk::ResetLights(System.Byte)";
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string Array_Clear_Array_Int32_Int32 = "System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)";
                public const string Chunk_ResetBiomeIntensity_BiomeIntensity = "System.Void Chunk::ResetBiomeIntensity(BiomeIntensity)";
                public const string DictionaryKeyValueList_2_Clear = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Clear()";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string DictionaryKeyList_2_Clear = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Clear()";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string InProgressSaving = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressSaving";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string MeshLayerCount = "System.Int32 Chunk::MeshLayerCount";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string IndexedBlocks = "DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>> Chunk::IndexedBlocks";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string insideDevicesHashSet = "System.Collections.Generic.HashSet`1<System.Int32> Chunk::insideDevicesHashSet";
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
                public const string NeedsDecoration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsDecoration";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
                public const string InProgressRegeneration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressRegeneration";
                public const string InProgressCopying = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressCopying";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressLighting = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressLighting";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
                public const string NeedsOnlyCollisionMesh = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsOnlyCollisionMesh";
                public const string IsCollisionMeshGenerated = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::IsCollisionMeshGenerated";
                public const string SavedInWorldTicks = "System.UInt64 Chunk::SavedInWorldTicks";
                public const string poolCBL = "MemoryPooledObject`1<ChunkBlockLayer> MemoryPools::poolCBL";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string Default = "BiomeIntensity BiomeIntensity::Default";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string m_DecoBiomeArray = "EnumDecoAllowed[] Chunk::m_DecoBiomeArray";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
                public const string tickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::tickedBlocks";
                public const string bEmptyDirty = "System.Boolean Chunk::bEmptyDirty";
                public const string StopStabilityCalculation = "System.Boolean Chunk::StopStabilityCalculation";
            }

            public const string Cleanup = "System.Void Chunk::Cleanup()";
            public const string get_X = "System.Int32 Chunk::get_X()";
            public static class get_XInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
            }

            public const string set_X = "System.Void Chunk::set_X(System.Int32)";
            public static class set_XInjects
            {
                public const string Chunk_updateBoundingBox = "System.Void Chunk::updateBoundingBox()";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_X = "System.Int32 Chunk::m_X";
            }

            public const string get_Y = "System.Int32 Chunk::get_Y()";
            public static class get_YInjects
            {
                public const string m_Y = "System.Int32 Chunk::m_Y";
            }

            public const string get_Z = "System.Int32 Chunk::get_Z()";
            public static class get_ZInjects
            {
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string set_Z = "System.Void Chunk::set_Z(System.Int32)";
            public static class set_ZInjects
            {
                public const string Chunk_updateBoundingBox = "System.Void Chunk::updateBoundingBox()";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string get_ChunkPos = "Vector3i Chunk::get_ChunkPos()";
            public static class get_ChunkPosInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string set_ChunkPos = "System.Void Chunk::set_ChunkPos(Vector3i)";
            public static class set_ChunkPosInjects
            {
                public const string Chunk_updateBoundingBox = "System.Void Chunk::updateBoundingBox()";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string x = "System.Int32 Vector3i::x";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string z = "System.Int32 Vector3i::z";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string get_Key = "System.Int64 Chunk::get_Key()";
            public static class get_KeyInjects
            {
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string WorldChunkCache_MakeChunkKey_Int32_Int32_Int32 = "System.Int64 WorldChunkCache::MakeChunkKey(System.Int32,System.Int32,System.Int32)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
            public static class get_ClrIdxInjects
            {
                public const string _ClrIdx_k_BackingField = "System.Int32 Chunk::<ClrIdx>k__BackingField";
            }

            public const string set_ClrIdx = "System.Void Chunk::set_ClrIdx(System.Int32)";
            public static class set_ClrIdxInjects
            {
                public const string _ClrIdx_k_BackingField = "System.Int32 Chunk::<ClrIdx>k__BackingField";
            }

            public const string get_IsLocked = "System.Boolean Chunk::get_IsLocked()";
            public static class get_IsLockedInjects
            {
                public const string InProgressCopying = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressCopying";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressLighting = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressLighting";
                public const string InProgressRegeneration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressRegeneration";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
                public const string InProgressSaving = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressSaving";
                public const string InProgressNetworking = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressNetworking";
            }

            public const string get_IsLockedExceptUnloading = "System.Boolean Chunk::get_IsLockedExceptUnloading()";
            public static class get_IsLockedExceptUnloadingInjects
            {
                public const string InProgressCopying = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressCopying";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressLighting = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressLighting";
                public const string InProgressRegeneration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressRegeneration";
                public const string InProgressSaving = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressSaving";
                public const string InProgressNetworking = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressNetworking";
            }

            public const string get_IsInitialized = "System.Boolean Chunk::get_IsInitialized()";
            public static class get_IsInitializedInjects
            {
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
            }

            public const string GetAvailable = "System.Boolean Chunk::GetAvailable()";
            public static class GetAvailableInjects
            {
                public const string IsCollisionMeshGenerated = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::IsCollisionMeshGenerated";
            }

            public const string get_NeedsRegeneration = "System.Boolean Chunk::get_NeedsRegeneration()";
            public static class get_NeedsRegenerationInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
            }

            public const string set_NeedsRegeneration = "System.Void Chunk::set_NeedsRegeneration(System.Boolean)";
            public static class set_NeedsRegenerationInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string MemoryPooledObject_1_FreeSync_Queue_1 = "System.Void MemoryPooledObject`1<VoxelMeshLayer>::FreeSync(System.Collections.Generic.Queue`1<VoxelMeshLayer>)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_MeshLayers = "System.Collections.Generic.Queue`1<VoxelMeshLayer> Chunk::m_MeshLayers";
                public const string MeshLayerCount = "System.Int32 Chunk::MeshLayerCount";
                public const string poolVML = "MemoryPooledObject`1<VoxelMeshLayer> MemoryPools::poolVML";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
                public const string NeedsRegenerationDebug = "System.Int32 Chunk::NeedsRegenerationDebug";
            }

            public const string ClearNeedsRegenerationAt = "System.Void Chunk::ClearNeedsRegenerationAt(System.Int32)";
            public static class ClearNeedsRegenerationAtInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
                public const string NeedsRegenerationDebug = "System.Int32 Chunk::NeedsRegenerationDebug";
            }

            public const string get_NeedsCopying = "System.Boolean Chunk::get_NeedsCopying()";
            public static class get_NeedsCopyingInjects
            {
                public const string Chunk_HasMeshLayer = "System.Boolean Chunk::HasMeshLayer()";
            }

            public const string set_NeedsCopying = "System.Void Chunk::set_NeedsCopying(System.Boolean)";
            public const string get_NeedsRegenerationAt = "System.Int32 Chunk::get_NeedsRegenerationAt()";
            public static class get_NeedsRegenerationAtInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
            }

            public const string set_NeedsRegenerationAt = "System.Void Chunk::set_NeedsRegenerationAt(System.Int32)";
            public static class set_NeedsRegenerationAtInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
            }

            public const string SetNeedsRegenerationRaw = "System.Void Chunk::SetNeedsRegenerationRaw(System.Int32)";
            public static class SetNeedsRegenerationRawInjects
            {
                public const string m_NeedsRegenerationAtY = "System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::m_NeedsRegenerationAtY";
            }

            public const string get_NeedsSaving = "System.Boolean Chunk::get_NeedsSaving()";
            public static class get_NeedsSavingInjects
            {
                public const string Chunk_get_isModified = "System.Boolean Chunk::get_isModified()";
                public const string DictionaryList_2_get_Count = "System.Int32 DictionaryList`2<Vector3i,TileEntity>::get_Count()";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
            }

            public const string load = "System.Void Chunk::load(PooledBinaryReader,System.UInt32)";
            public static class loadInjects
            {
                public const string Chunk_read_PooledBinaryReader_UInt32_Boolean = "System.Void Chunk::read(PooledBinaryReader,System.UInt32,System.Boolean)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
            }

            public const string read_PooledBinaryReader_UInt32 = "System.Void Chunk::read(PooledBinaryReader,System.UInt32)";
            public static class read_PooledBinaryReader_UInt32Injects
            {
                public const string Chunk_read_PooledBinaryReader_UInt32_Boolean = "System.Void Chunk::read(PooledBinaryReader,System.UInt32,System.Boolean)";
            }

            public const string read_PooledBinaryReader_UInt32_Boolean = "System.Void Chunk::read(PooledBinaryReader,System.UInt32,System.Boolean)";
            public static class read_PooledBinaryReader_UInt32_BooleanInjects
            {
                public const string BinaryReader_ReadInt32 = "System.Int32 System.IO.BinaryReader::ReadInt32()";
                public const string Chunk_set_Z_Int32 = "System.Void Chunk::set_Z(System.Int32)";
                public const string BinaryReader_ReadUInt64 = "System.UInt64 System.IO.BinaryReader::ReadUInt64()";
                public const string MemoryPooledObject_1_FreeSync_IList_1 = "System.Void MemoryPooledObject`1<ChunkBlockLayer>::FreeSync(System.Collections.Generic.IList`1<ChunkBlockLayer>)";
                public const string Array_Clear_Array_Int32_Int32 = "System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)";
                public const string String_Concat_Object_Object_Object = "System.String System.String::Concat(System.Object,System.Object,System.Object)";
                public const string BinaryReader_ReadBoolean = "System.Boolean System.IO.BinaryReader::ReadBoolean()";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "ChunkBlockLayer MemoryPooledObject`1<ChunkBlockLayer>::AllocSync(System.Boolean)";
                public const string ChunkBlockLayer_Read_BinaryReader_UInt32_Boolean = "System.Void ChunkBlockLayer::Read(System.IO.BinaryReader,System.UInt32,System.Boolean)";
                public const string ChunkBlockChannel_Convert_ChunkBlockLayerLegacy_ = "System.Void ChunkBlockChannel::Convert(ChunkBlockLayerLegacy[])";
                public const string ChunkBlockChannel_Read_BinaryReader_UInt32_Boolean = "System.Void ChunkBlockChannel::Read(System.IO.BinaryReader,System.UInt32,System.Boolean)";
                public const string Chunk_recalcIndexedBlocks = "System.Void Chunk::recalcIndexedBlocks()";
                public const string BinaryReader_get_BaseStream = "System.IO.Stream System.IO.BinaryReader::get_BaseStream()";
                public const string BinaryFormatter_Deserialize_Stream = "System.Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::Deserialize(System.IO.Stream)";
                public const string Byte_Get_Int32_Int32 = "System.Byte System.Byte[0...,0...]::Get(System.Int32,System.Int32)";
                public const string BinaryReader_Read_Byte_Int32_Int32 = "System.Int32 System.IO.BinaryReader::Read(System.Byte[],System.Int32,System.Int32)";
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string Chunk_SetTerrainHeight_Int32_Int32_Byte = "System.Void Chunk::SetTerrainHeight(System.Int32,System.Int32,System.Byte)";
                public const string Chunk_SetBiomeId_Int32_Int32_Byte = "System.Void Chunk::SetBiomeId(System.Int32,System.Int32,System.Byte)";
                public const string BiomeIntensity_ToArray_Byte_Int32 = "System.Void BiomeIntensity::ToArray(System.Byte[],System.Int32)";
                public const string BinaryReader_ReadByte = "System.Byte System.IO.BinaryReader::ReadByte()";
                public const string BinaryReader_ReadUInt16 = "System.UInt16 System.IO.BinaryReader::ReadUInt16()";
                public const string DictionaryKeyValueList_2_Clear = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Clear()";
                public const string ChunkCustomData_Read_BinaryReader = "System.Void ChunkCustomData::Read(System.IO.BinaryReader)";
                public const string DictionaryKeyValueList_2_Set_T_S = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Set(System.String,ChunkCustomData)";
                public const string SmartArray_read_BinaryReader = "System.Void SmartArray::read(System.IO.BinaryReader)";
                public const string ChunkBlockChannel_Convert_SmartArray_Int32 = "System.Void ChunkBlockChannel::Convert(SmartArray,System.Int32)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<Entity>::Clear()";
                public const string EntityCreationData_read_PooledBinaryReader_Boolean = "System.Void EntityCreationData::read(PooledBinaryReader,System.Boolean)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Add(EntityCreationData)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<EntityCreationData>::get_Count()";
                public const string DictionaryList_2_Clear = "System.Void DictionaryList`2<Vector3i,TileEntity>::Clear()";
                public const string TileEntity_Instantiate_TileEntityType_Chunk = "TileEntity TileEntity::Instantiate(TileEntityType,Chunk)";
                public const string TileEntity_read_PooledBinaryReader_StreamModeRead = "System.Void TileEntity::read(PooledBinaryReader,TileEntity/StreamModeRead)";
                public const string TileEntity_OnReadComplete = "System.Void TileEntity::OnReadComplete()";
                public const string TileEntity_get_localChunkPos = "Vector3i TileEntity::get_localChunkPos()";
                public const string DictionaryList_2_Set_T_S = "System.Void DictionaryList`2<Vector3i,TileEntity>::Set(Vector3i,TileEntity)";
                public const string PList_1_Read_BinaryReader = "System.Void PList`1<EntitySpawner>::Read(System.IO.BinaryReader)";
                public const string SleeperVolume_Read_BinaryReader = "SleeperVolume SleeperVolume::Read(System.IO.BinaryReader)";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string DictionaryKeyList_2_Clear = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Clear()";
                public const string ChunkBlockLayer_GetIdAt_Int32 = "System.Int32 ChunkBlockLayer::GetIdAt(System.Int32)";
                public const string ChunkBlockLayer_GetAt_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Chunk_ToWorldPos_Vector3i = "Vector3i Chunk::ToWorldPos(Vector3i)";
                public const string DictionaryKeyList_2_Add_T_S = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Add(Vector3i,System.Int32)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string BinaryReader_ReadInt16 = "System.Int16 System.IO.BinaryReader::ReadInt16()";
                public const string List_1_set_Capacity_Int32 = "System.Void System.Collections.Generic.List`1<Vector3b>::set_Capacity(System.Int32)";
                public const string Vector3b_ctor_Byte_Byte_Byte = "System.Void Vector3b::.ctor(System.Byte,System.Byte,System.Byte)";
                public const string Object_GetHashCode = "System.Int32 System.Object::GetHashCode()";
                public const string HashSet_1_Add_T = "System.Boolean System.Collections.Generic.HashSet`1<System.Int32>::Add(System.Int32)";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string SavedInWorldTicks = "System.UInt64 Chunk::SavedInWorldTicks";
                public const string LastTimeRandomTicked = "System.UInt64 Chunk::LastTimeRandomTicked";
                public const string poolCBL = "MemoryPooledObject`1<ChunkBlockLayer> MemoryPools::poolCBL";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string bEmptyDirty = "System.Boolean Chunk::bEmptyDirty";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
                public const string Default = "BiomeIntensity BiomeIntensity::Default";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string key = "System.String ChunkCustomData::key";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
                public const string NeedsDecoration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsDecoration";
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
                public const string tickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::tickedBlocks";
                public const string list = "Block[] Block::list";
                public const string IsRandomlyTick = "System.Boolean Block::IsRandomlyTick";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string insideDevicesHashSet = "System.Collections.Generic.HashSet`1<System.Int32> Chunk::insideDevicesHashSet";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
                public const string StopStabilityCalculation = "System.Boolean Chunk::StopStabilityCalculation";
                public const string Exception_ctor_String = "System.Void System.Exception::.ctor(System.String)";
                public const string BinaryFormatter_ctor = "System.Void System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::.ctor()";
                public const string ChunkCustomData_ctor = "System.Void ChunkCustomData::.ctor()";
                public const string SmartArray_ctor_Int32_Int32_Int32 = "System.Void SmartArray::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockChannel_ctor_Int64_Int32 = "System.Void ChunkBlockChannel::.ctor(System.Int64,System.Int32)";
                public const string EntityCreationData_ctor = "System.Void EntityCreationData::.ctor()";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string save = "System.Void Chunk::save(PooledBinaryWriter)";
            public static class saveInjects
            {
                public const string Chunk_saveBlockIds = "System.Void Chunk::saveBlockIds()";
                public const string Chunk_write_PooledBinaryWriter_Boolean = "System.Void Chunk::write(PooledBinaryWriter,System.Boolean)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string GameTimer_get_Instance = "GameTimer GameTimer::get_Instance()";
                public const string ticks = "System.UInt64 GameTimer::ticks";
                public const string SavedInWorldTicks = "System.UInt64 Chunk::SavedInWorldTicks";
            }

            public const string saveBlockIds = "System.Void Chunk::saveBlockIds()";
            public static class saveBlockIdsInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string NameIdMapping_AddMapping_Int32_String_Boolean = "System.Void NameIdMapping::AddMapping(System.Int32,System.String,System.Boolean)";
                public const string ChunkBlockLayer_SaveBlockMappings_NameIdMapping = "System.Void ChunkBlockLayer::SaveBlockMappings(NameIdMapping)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string nameIdMapping = "NameIdMapping Block::nameIdMapping";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string Air = "BlockValue BlockValue::Air";
                public const string blockID = "System.Int32 Block::blockID";
            }

            public const string write_PooledBinaryWriter = "System.Void Chunk::write(PooledBinaryWriter)";
            public static class write_PooledBinaryWriterInjects
            {
                public const string Chunk_write_PooledBinaryWriter_Boolean = "System.Void Chunk::write(PooledBinaryWriter,System.Boolean)";
            }

            public const string write_PooledBinaryWriter_Boolean = "System.Void Chunk::write(PooledBinaryWriter,System.Boolean)";
            public static class write_PooledBinaryWriter_BooleanInjects
            {
                public const string MemoryPooledArray_1_Alloc_Int32 = "System.Byte[] MemoryPooledArray`1<System.Byte>::Alloc(System.Int32)";
                public const string BinaryWriter_Write_Int32 = "System.Void System.IO.BinaryWriter::Write(System.Int32)";
                public const string BinaryWriter_Write_UInt64 = "System.Void System.IO.BinaryWriter::Write(System.UInt64)";
                public const string BinaryWriter_Write_Boolean = "System.Void System.IO.BinaryWriter::Write(System.Boolean)";
                public const string ChunkBlockLayer_Write_BinaryWriter_Boolean = "System.Void ChunkBlockLayer::Write(System.IO.BinaryWriter,System.Boolean)";
                public const string ChunkBlockChannel_Write_BinaryWriter_Boolean_Byte_ = "System.Void ChunkBlockChannel::Write(System.IO.BinaryWriter,System.Boolean,System.Byte[])";
                public const string BinaryWriter_Write_Byte_ = "System.Void System.IO.BinaryWriter::Write(System.Byte[])";
                public const string BinaryWriter_Write_Byte = "System.Void System.IO.BinaryWriter::Write(System.Byte)";
                public const string List_1_get_Item_Int32 = "ChunkCustomData System.Collections.Generic.List`1<ChunkCustomData>::get_Item(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<ChunkCustomData>::get_Count()";
                public const string BinaryWriter_Write_UInt16 = "System.Void System.IO.BinaryWriter::Write(System.UInt16)";
                public const string ChunkCustomData_Write_BinaryWriter = "System.Void ChunkCustomData::Write(System.IO.BinaryWriter)";
                public const string Entity_IsSavedToFile = "System.Boolean Entity::IsSavedToFile()";
                public const string Entity_IsSavedToNetwork = "System.Boolean Entity::IsSavedToNetwork()";
                public const string EntityCreationData_write_PooledBinaryWriter_Boolean = "System.Void EntityCreationData::write(PooledBinaryWriter,System.Boolean)";
                public const string DictionaryList_2_get_Count = "System.Int32 DictionaryList`2<Vector3i,TileEntity>::get_Count()";
                public const string TileEntity_GetTileEntityType = "TileEntityType TileEntity::GetTileEntityType()";
                public const string TileEntity_write_PooledBinaryWriter_StreamModeWrite = "System.Void TileEntity::write(PooledBinaryWriter,TileEntity/StreamModeWrite)";
                public const string PList_1_Write_BinaryWriter = "System.Void PList`1<EntitySpawner>::Write(System.IO.BinaryWriter)";
                public const string BinaryWriter_Write_Int16 = "System.Void System.IO.BinaryWriter::Write(System.Int16)";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Vector3b> System.Collections.Generic.List`1<Vector3b>::GetEnumerator()";
                public const string Enumerator_get_Current = "Vector3b System.Collections.Generic.List`1/Enumerator<Vector3b>::get_Current()";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<System.Byte>::Clear()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<System.Byte>::Add(System.Byte)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<Vector3b>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string MemoryPooledArray_1_Free_T_ = "System.Void MemoryPooledArray`1<System.Byte>::Free(System.Byte[])";
                public const string poolByte = "MemoryPooledArray`1<System.Byte> MemoryPools::poolByte";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string SavedInWorldTicks = "System.UInt64 Chunk::SavedInWorldTicks";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string valueList = "System.Collections.Generic.List`1<ChunkCustomData> DictionaryKeyValueList`2<System.String,ChunkCustomData>::valueList";
                public const string isSavedToNetwork = "System.Boolean ChunkCustomData::isSavedToNetwork";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string list = "System.Collections.Generic.List`1<TileEntity> DictionaryList`2<Vector3i,TileEntity>::list";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string x = "System.Byte Vector3b::x";
                public const string z = "System.Byte Vector3b::z";
                public const string y = "System.Byte Vector3b::y";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
                public const string EntityCreationData_ctor_Entity = "System.Void EntityCreationData::.ctor(Entity)";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<System.Byte>::.ctor()";
            }

            public const string recalcIndexedBlocks = "System.Void Chunk::recalcIndexedBlocks()";
            public static class recalcIndexedBlocksInjects
            {
                public const string DictionarySave_2_Clear = "System.Void DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::Clear()";
                public const string ChunkBlockLayer_AddIndexedBlocks_Int32_DictionarySave_2 = "System.Void ChunkBlockLayer::AddIndexedBlocks(System.Int32,DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>)";
                public const string IndexedBlocks = "DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>> Chunk::IndexedBlocks";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string AddEntityStub = "System.Void Chunk::AddEntityStub(EntityCreationData)";
            public static class AddEntityStubInjects
            {
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Add(EntityCreationData)";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
            }

            public const string GetBlockEntity_Vector3i = "BlockEntityData Chunk::GetBlockEntity(Vector3i)";
            public static class GetBlockEntity_Vector3iInjects
            {
                public const string GameUtils_Vector3iToUInt64_Vector3i = "System.UInt64 GameUtils::Vector3iToUInt64(Vector3i)";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::ContainsKey(System.UInt64)";
                public const string Dictionary_2_get_Item_TKey = "BlockEntityData System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::get_Item(System.UInt64)";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::dict";
            }

            public const string GetBlockEntity_Transform = "BlockEntityData Chunk::GetBlockEntity(UnityEngine.Transform)";
            public static class GetBlockEntity_TransformInjects
            {
                public const string List_1_get_Item_Int32 = "BlockEntityData System.Collections.Generic.List`1<BlockEntityData>::get_Item(System.Int32)";
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockEntityData>::get_Count()";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string list = "System.Collections.Generic.List`1<BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::list";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
            }

            public const string AddEntityBlockStub = "System.Void Chunk::AddEntityBlockStub(BlockEntityData)";
            public static class AddEntityBlockStubInjects
            {
                public const string GameUtils_Vector3iToUInt64_Vector3i = "System.UInt64 GameUtils::Vector3iToUInt64(Vector3i)";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::ContainsKey(System.UInt64)";
                public const string Dictionary_2_get_Item_TKey = "BlockEntityData System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::get_Item(System.UInt64)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<BlockEntityData>::Add(BlockEntityData)";
                public const string DictionaryList_2_Set_T_S = "System.Void DictionaryList`2<System.UInt64,BlockEntityData>::Set(System.UInt64,BlockEntityData)";
                public const string pos = "Vector3i BlockEntityData::pos";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::dict";
                public const string blockEntityStubsToRemove = "System.Collections.Generic.List`1<BlockEntityData> Chunk::blockEntityStubsToRemove";
            }

            public const string RemoveEntityBlockStub = "System.Void Chunk::RemoveEntityBlockStub(Vector3i)";
            public static class RemoveEntityBlockStubInjects
            {
                public const string GameUtils_Vector3iToUInt64_Vector3i = "System.UInt64 GameUtils::Vector3iToUInt64(Vector3i)";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::ContainsKey(System.UInt64)";
                public const string Dictionary_2_get_Item_TKey = "BlockEntityData System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::get_Item(System.UInt64)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<BlockEntityData>::Add(BlockEntityData)";
                public const string DictionaryList_2_Remove_T = "System.Void DictionaryList`2<System.UInt64,BlockEntityData>::Remove(System.UInt64)";
                public const string String_Concat_Object_Object_Object = "System.String System.String::Concat(System.Object,System.Object,System.Object)";
                public const string Log_Warning_String = "System.Void Log::Warning(System.String)";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::dict";
                public const string blockEntityStubsToRemove = "System.Collections.Generic.List`1<BlockEntityData> Chunk::blockEntityStubsToRemove";
            }

            public const string AddInsideDevicePosition = "System.Void Chunk::AddInsideDevicePosition(System.Int32,System.Int32,System.Int32,BlockValue)";
            public static class AddInsideDevicePositionInjects
            {
                public const string Vector3b_ctor_Int32_Int32_Int32 = "System.Void Vector3b::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Vector3b>::Add(Vector3b)";
                public const string Object_GetHashCode = "System.Int32 System.Object::GetHashCode()";
                public const string HashSet_1_Add_T = "System.Boolean System.Collections.Generic.HashSet`1<System.Int32>::Add(System.Int32)";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string insideDevicesHashSet = "System.Collections.Generic.HashSet`1<System.Int32> Chunk::insideDevicesHashSet";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
            }

            public const string EnableInsideBlockEntities = "System.Int32 Chunk::EnableInsideBlockEntities(System.Boolean)";
            public static class EnableInsideBlockEntitiesInjects
            {
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Vector3b> System.Collections.Generic.List`1<Vector3b>::GetEnumerator()";
                public const string Enumerator_get_Current = "Vector3b System.Collections.Generic.List`1/Enumerator<Vector3b>::get_Current()";
                public const string Vector3b_ToVector3i = "Vector3i Vector3b::ToVector3i()";
                public const string Chunk_ToWorldPos_Vector3i = "Vector3i Chunk::ToWorldPos(Vector3i)";
                public const string GameUtils_Vector3iToUInt64_Vector3i = "System.UInt64 GameUtils::Vector3iToUInt64(Vector3i)";
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData>::TryGetValue(System.UInt64,BlockEntityData&)";
                public const string Component_get_gameObject = "UnityEngine.GameObject UnityEngine.Component::get_gameObject()";
                public const string GameObject_SetActive_Boolean = "System.Void UnityEngine.GameObject::SetActive(System.Boolean)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<Vector3b>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.UInt64,BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::dict";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
            }

            public const string ResetStability = "System.Void Chunk::ResetStability()";
            public static class ResetStabilityInjects
            {
                public const string ChunkBlockChannel_Clear_Int64 = "System.Void ChunkBlockChannel::Clear(System.Int64)";
                public const string Chunk_GetBlockId_Int32_Int32_Int32 = "System.Int32 Chunk::GetBlockId(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string list = "Block[] Block::list";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string StabilitySupport = "System.Boolean Block::StabilitySupport";
            }

            public const string ResetStabilityToBottomMost = "System.Void Chunk::ResetStabilityToBottomMost()";
            public static class ResetStabilityToBottomMostInjects
            {
                public const string ChunkBlockChannel_Clear_Int64 = "System.Void ChunkBlockChannel::Clear(System.Int64)";
                public const string Chunk_GetBlockNoDamage_Int32_Int32_Int32 = "BlockValue Chunk::GetBlockNoDamage(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string list = "Block[] Block::list";
                public const string StabilitySupport = "System.Boolean Block::StabilitySupport";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string shape = "BlockShape Block::shape";
            }

            public const string RefreshSunlight = "System.Void Chunk::RefreshSunlight()";
            public static class RefreshSunlightInjects
            {
                public const string ChunkBlockChannel_SetHalf_Boolean_Byte = "System.Void ChunkBlockChannel::SetHalf(System.Boolean,System.Byte)";
                public const string Chunk_GetBlockId_Int32_Int32_Int32 = "System.Int32 Chunk::GetBlockId(System.Int32,System.Int32,System.Int32)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string list = "Block[] Block::list";
                public const string shape = "BlockShape Block::shape";
                public const string lightOpacity = "System.Int32 Block::lightOpacity";
            }

            public const string SetFullSunlight = "System.Void Chunk::SetFullSunlight()";
            public static class SetFullSunlightInjects
            {
                public const string ChunkBlockChannel_SetHalf_Boolean_Byte = "System.Void ChunkBlockChannel::SetHalf(System.Boolean,System.Byte)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string CopyLightsFrom = "System.Void Chunk::CopyLightsFrom(Chunk)";
            public static class CopyLightsFromInjects
            {
                public const string ChunkBlockChannel_CopyFrom_ChunkBlockChannel = "System.Void ChunkBlockChannel::CopyFrom(ChunkBlockChannel)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string CanMobsSpawnAtPos = "System.Boolean Chunk::CanMobsSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
            public static class CanMobsSpawnAtPosInjects
            {
                public const string Chunk_IsTraderArea_Int32_Int32 = "System.Boolean Chunk::IsTraderArea(System.Int32,System.Int32)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string list = "Block[] Block::list";
                public const string CanMobsSpawnOn = "System.Boolean Block::CanMobsSpawnOn";
                public const string shape = "BlockShape Block::shape";
                public const string IsSolidSpace = "System.Boolean BlockShape::IsSolidSpace";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
            }

            public const string CanPlayersSpawnAtPos = "System.Boolean Chunk::CanPlayersSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
            public static class CanPlayersSpawnAtPosInjects
            {
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string list = "Block[] Block::list";
                public const string CanPlayersSpawnOn = "System.Boolean Block::CanPlayersSpawnOn";
                public const string blockID = "System.Int32 Block::blockID";
                public const string shape = "BlockShape Block::shape";
                public const string IsSolidSpace = "System.Boolean BlockShape::IsSolidSpace";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
            }

            public const string FindRandomTopSoilPoint = "System.Boolean Chunk::FindRandomTopSoilPoint(World,System.Int32&,System.Int32&,System.Int32&,System.Int32)";
            public static class FindRandomTopSoilPointInjects
            {
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string GameRandom_RandomRange_Int32 = "System.Int32 GameRandom::RandomRange(System.Int32)";
                public const string Chunk_GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
                public const string Chunk_CanMobsSpawnAtPos_Int32_Int32_Int32_Boolean = "System.Boolean Chunk::CanMobsSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string FindRandomCavePoint = "System.Boolean Chunk::FindRandomCavePoint(World,System.Int32&,System.Int32&,System.Int32&,System.Int32,System.Int32)";
            public static class FindRandomCavePointInjects
            {
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string GameRandom_RandomRange_Int32 = "System.Int32 GameRandom::RandomRange(System.Int32)";
                public const string Chunk_GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
                public const string Chunk_CanMobsSpawnAtPos_Int32_Int32_Int32_Boolean = "System.Boolean Chunk::CanMobsSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string FindSpawnPointAtXZ = "System.Boolean Chunk::FindSpawnPointAtXZ(System.Int32,System.Int32,System.Int32&,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)";
            public static class FindSpawnPointAtXZInjects
            {
                public const string Utils_FastClamp_Int32_Int32_Int32 = "System.Int32 Utils::FastClamp(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetLightValue_Int32_Int32_Int32_Int32 = "System.Int32 Chunk::GetLightValue(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string Chunk_CanMobsSpawnAtPos_Int32_Int32_Int32_Boolean = "System.Boolean Chunk::CanMobsSpawnAtPos(System.Int32,System.Int32,System.Int32,System.Boolean)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string GetLightBrightness = "System.Single Chunk::GetLightBrightness(System.Int32,System.Int32,System.Int32,System.Int32)";
            public static class GetLightBrightnessInjects
            {
                public const string Chunk_GetLightValue_Int32_Int32_Int32_Int32 = "System.Int32 Chunk::GetLightValue(System.Int32,System.Int32,System.Int32,System.Int32)";
            }

            public const string GetLightValue = "System.Int32 Chunk::GetLightValue(System.Int32,System.Int32,System.Int32,System.Int32)";
            public static class GetLightValueInjects
            {
                public const string Chunk_GetLight_Int32_Int32_Int32_LIGHT_TYPE = "System.Byte Chunk::GetLight(System.Int32,System.Int32,System.Int32,Chunk/LIGHT_TYPE)";
            }

            public const string GetLight = "System.Byte Chunk::GetLight(System.Int32,System.Int32,System.Int32,Chunk/LIGHT_TYPE)";
            public static class GetLightInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string SetLight = "System.Void Chunk::SetLight(System.Int32,System.Int32,System.Int32,System.Byte,Chunk/LIGHT_TYPE)";
            public static class SetLightInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_set_NeedsRegenerationAt_Int32 = "System.Void Chunk::set_NeedsRegenerationAt(System.Int32)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string CheckSameLight = "System.Void Chunk::CheckSameLight()";
            public static class CheckSameLightInjects
            {
                public const string ChunkBlockChannel_CheckSameValue = "System.Void ChunkBlockChannel::CheckSameValue()";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
            }

            public const string CheckSameStability = "System.Void Chunk::CheckSameStability()";
            public static class CheckSameStabilityInjects
            {
                public const string ChunkBlockChannel_CheckSameValue = "System.Void ChunkBlockChannel::CheckSameValue()";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
            }

            public const string NeighbourChunksDecorated = "System.Boolean Chunk::NeighbourChunksDecorated(Chunk[])";
            public static class NeighbourChunksDecoratedInjects
            {
                public const string NeedsDecoration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsDecoration";
            }

            public const string NeighbourChunksLit = "System.Boolean Chunk::NeighbourChunksLit(Chunk[])";
            public static class NeighbourChunksLitInjects
            {
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
            }

            public const string GetWorldPos = "Vector3i Chunk::GetWorldPos()";
            public static class GetWorldPosInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string GetBlockWorldPosX = "System.Int32 Chunk::GetBlockWorldPosX(System.Int32)";
            public static class GetBlockWorldPosXInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
            }

            public const string GetBlockWorldPosZ = "System.Int32 Chunk::GetBlockWorldPosZ(System.Int32)";
            public static class GetBlockWorldPosZInjects
            {
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
            public static class GetHeight_Int32_Int32Injects
            {
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string SetHeight = "System.Void Chunk::SetHeight(System.Int32,System.Int32,System.Byte)";
            public static class SetHeightInjects
            {
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string GetMaxHeight = "System.Byte Chunk::GetMaxHeight()";
            public static class GetMaxHeightInjects
            {
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string GetTerrainHeight = "System.Byte Chunk::GetTerrainHeight(System.Int32,System.Int32)";
            public static class GetTerrainHeightInjects
            {
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
            }

            public const string SetTerrainHeight = "System.Void Chunk::SetTerrainHeight(System.Int32,System.Int32,System.Byte)";
            public static class SetTerrainHeightInjects
            {
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
            }

            public const string GetTopMostTerrainHeight = "System.Byte Chunk::GetTopMostTerrainHeight()";
            public static class GetTopMostTerrainHeightInjects
            {
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
            }

            public const string IsTopSoil = "System.Boolean Chunk::IsTopSoil(System.Int32,System.Int32)";
            public static class IsTopSoilInjects
            {
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
            }

            public const string SetTopSoilBroken = "System.Void Chunk::SetTopSoilBroken(System.Int32,System.Int32)";
            public static class SetTopSoilBrokenInjects
            {
                public const string m_bTopSoilBroken = "System.Byte[] Chunk::m_bTopSoilBroken";
            }

            public const string GetBlock_Vector3i = "BlockValue Chunk::GetBlock(Vector3i)";
            public static class GetBlock_Vector3iInjects
            {
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Chunk_GetDamage_Int32_Int32_Int32 = "System.Int32 Chunk::GetDamage(System.Int32,System.Int32,System.Int32)";
                public const string Air = "BlockValue BlockValue::Air";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string y = "System.Int32 Vector3i::y";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string damage = "System.Int32 BlockValue::damage";
            }

            public const string GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
            public static class GetBlock_Int32_Int32_Int32Injects
            {
                public const string Chunk_isInside_Int32_Int32_Int32 = "System.Boolean Chunk::isInside(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockByName_String_Boolean = "Block Block::GetBlockByName(System.String,System.Boolean)";
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Chunk_GetDamage_Int32_Int32_Int32 = "System.Int32 Chunk::GetDamage(System.Int32,System.Int32,System.Int32)";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
                public const string bvPOIFiller = "BlockValue Chunk::bvPOIFiller";
                public const string cPOIFillerBlock = "System.String Constants::cPOIFillerBlock";
                public const string blockID = "System.Int32 Block::blockID";
                public const string Air = "BlockValue BlockValue::Air";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string damage = "System.Int32 BlockValue::damage";
                public const string BlockValue_ctor_UInt32 = "System.Void BlockValue::.ctor(System.UInt32)";
            }

            public const string GetBlockNoDamage = "BlockValue Chunk::GetBlockNoDamage(System.Int32,System.Int32,System.Int32)";
            public static class GetBlockNoDamageInjects
            {
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Air = "BlockValue BlockValue::Air";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string GetBlockId = "System.Int32 Chunk::GetBlockId(System.Int32,System.Int32,System.Int32)";
            public static class GetBlockIdInjects
            {
                public const string ChunkBlockLayer_GetIdAt_Int32_Int32_Int32 = "System.Int32 ChunkBlockLayer::GetIdAt(System.Int32,System.Int32,System.Int32)";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string CopyMeshDataFrom = "System.Void Chunk::CopyMeshDataFrom(Chunk)";
            public static class CopyMeshDataFromInjects
            {
                public const string MemoryPooledObject_1_FreeSync_T = "System.Void MemoryPooledObject`1<ChunkBlockLayer>::FreeSync(ChunkBlockLayer)";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "ChunkBlockLayer MemoryPooledObject`1<ChunkBlockLayer>::AllocSync(System.Boolean)";
                public const string ChunkBlockLayer_CopyFrom_ChunkBlockLayer = "System.Void ChunkBlockLayer::CopyFrom(ChunkBlockLayer)";
                public const string ChunkBlockChannel_CopyFrom_ChunkBlockChannel = "System.Void ChunkBlockChannel::CopyFrom(ChunkBlockChannel)";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string poolCBL = "MemoryPooledObject`1<ChunkBlockLayer> MemoryPools::poolCBL";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
            }

            public const string GetBiomeId = "System.Byte Chunk::GetBiomeId(System.Int32,System.Int32)";
            public static class GetBiomeIdInjects
            {
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
            }

            public const string SetBiomeId = "System.Void Chunk::SetBiomeId(System.Int32,System.Int32,System.Byte)";
            public static class SetBiomeIdInjects
            {
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
            }

            public const string FillBiomeId = "System.Void Chunk::FillBiomeId(System.Byte)";
            public static class FillBiomeIdInjects
            {
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
            }

            public const string GetBiomeIntensity = "BiomeIntensity Chunk::GetBiomeIntensity(System.Int32,System.Int32)";
            public static class GetBiomeIntensityInjects
            {
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
                public const string Default = "BiomeIntensity BiomeIntensity::Default";
                public const string BiomeIntensity_ctor_Byte_Int32 = "System.Void BiomeIntensity::.ctor(System.Byte[],System.Int32)";
            }

            public const string CalcBiomeIntensity = "System.Void Chunk::CalcBiomeIntensity(Chunk[])";
            public static class CalcBiomeIntensityInjects
            {
                public const string Array_Clear_Array_Int32_Int32 = "System.Void System.Array::Clear(System.Array,System.Int32,System.Int32)";
                public const string World_toBlockXZ_Int32 = "System.Int32 World::toBlockXZ(System.Int32)";
                public const string Chunk_GetBiomeId_Int32_Int32 = "System.Byte Chunk::GetBiomeId(System.Int32,System.Int32)";
                public const string BiomeIntensity_FromArray_Int32_ = "BiomeIntensity BiomeIntensity::FromArray(System.Int32[])";
                public const string BiomeIntensity_ToArray_Byte_Int32 = "System.Void BiomeIntensity::ToArray(System.Byte[],System.Int32)";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
            }

            public const string CalcDominantBiome = "System.Void Chunk::CalcDominantBiome()";
            public static class CalcDominantBiomeInjects
            {
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
            }

            public const string ResetBiomeIntensity = "System.Void Chunk::ResetBiomeIntensity(BiomeIntensity)";
            public static class ResetBiomeIntensityInjects
            {
                public const string BiomeIntensity_ToArray_Byte_Int32 = "System.Void BiomeIntensity::ToArray(System.Byte[],System.Int32)";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
            }

            public const string GetStability = "System.Byte Chunk::GetStability(System.Int32,System.Int32,System.Int32)";
            public static class GetStabilityInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
            }

            public const string SetStability = "System.Void Chunk::SetStability(System.Int32,System.Int32,System.Int32,System.Byte)";
            public static class SetStabilityInjects
            {
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
            }

            public const string SetDensity = "System.Void Chunk::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
            public static class SetDensityInjects
            {
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string GetDensity = "System.SByte Chunk::GetDensity(System.Int32,System.Int32,System.Int32)";
            public static class GetDensityInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string HasSameDensityValue = "System.Boolean Chunk::HasSameDensityValue(System.Int32)";
            public static class HasSameDensityValueInjects
            {
                public const string ChunkBlockChannel_HasSameValue_Int32 = "System.Boolean ChunkBlockChannel::HasSameValue(System.Int32)";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string GetSameDensityValue = "System.SByte Chunk::GetSameDensityValue(System.Int32)";
            public static class GetSameDensityValueInjects
            {
                public const string ChunkBlockChannel_GetSameValue_Int32 = "System.Int64 ChunkBlockChannel::GetSameValue(System.Int32)";
                public const string DensityTerrain = "System.SByte MarchingCubes::DensityTerrain";
                public const string DensityAir = "System.SByte MarchingCubes::DensityAir";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string CheckSameDensity = "System.Void Chunk::CheckSameDensity()";
            public static class CheckSameDensityInjects
            {
                public const string ChunkBlockChannel_CheckSameValue = "System.Void ChunkBlockChannel::CheckSameValue()";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
            }

            public const string IsOnlyTerrain = "System.Boolean Chunk::IsOnlyTerrain(System.Int32)";
            public static class IsOnlyTerrainInjects
            {
                public const string ChunkBlockLayer_IsOnlyTerrain = "System.Boolean ChunkBlockLayer::IsOnlyTerrain()";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string CheckOnlyTerrain = "System.Void Chunk::CheckOnlyTerrain()";
            public static class CheckOnlyTerrainInjects
            {
                public const string ChunkBlockLayer_CheckOnlyTerrain = "System.Void ChunkBlockLayer::CheckOnlyTerrain()";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string GetTextureFull = "System.Int64 Chunk::GetTextureFull(System.Int32,System.Int32,System.Int32)";
            public static class GetTextureFullInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string SetTextureFull = "System.Int64 Chunk::SetTextureFull(System.Int32,System.Int32,System.Int32,System.Int64)";
            public static class SetTextureFullInjects
            {
                public const string ChunkBlockChannel_GetSet_Int32_Int32_Int32_Int64 = "System.Int64 ChunkBlockChannel::GetSet(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string GetBlockFaceTexture = "System.Int32 Chunk::GetBlockFaceTexture(System.Int32,System.Int32,System.Int32,BlockFace)";
            public static class GetBlockFaceTextureInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string SetBlockFaceTexture = "System.Int64 Chunk::SetBlockFaceTexture(System.Int32,System.Int32,System.Int32,BlockFace,System.Int32)";
            public static class SetBlockFaceTextureInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string Value64FullToIndex = "System.Int32 Chunk::Value64FullToIndex(System.Int64,BlockFace)";
            public const string TextureIdxToTextureFullValue64 = "System.Int64 Chunk::TextureIdxToTextureFullValue64(System.Int32)";
            public const string SetDamage = "System.Void Chunk::SetDamage(System.Int32,System.Int32,System.Int32,System.Int32)";
            public static class SetDamageInjects
            {
                public const string ChunkBlockChannel_Set_Int32_Int32_Int32_Int64 = "System.Void ChunkBlockChannel::Set(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
            }

            public const string GetDamage = "System.Int32 Chunk::GetDamage(System.Int32,System.Int32,System.Int32)";
            public static class GetDamageInjects
            {
                public const string ChunkBlockChannel_Get_Int32_Int32_Int32 = "System.Int64 ChunkBlockChannel::Get(System.Int32,System.Int32,System.Int32)";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
            }

            public const string IsEmpty = "System.Boolean Chunk::IsEmpty()";
            public static class IsEmptyInjects
            {
                public const string bEmptyDirty = "System.Boolean Chunk::bEmptyDirty";
                public const string bEmpty = "System.Boolean Chunk::bEmpty";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string IsEmpty_Int32 = "System.Boolean Chunk::IsEmpty(System.Int32)";
            public static class IsEmpty_Int32Injects
            {
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string RecalcHeightAt = "System.Byte Chunk::RecalcHeightAt(System.Int32,System.Int32,System.Int32)";
            public static class RecalcHeightAtInjects
            {
                public const string ChunkBlockLayerLegacy_CalcOffset_Int32_Int32 = "System.Int32 ChunkBlockLayerLegacy::CalcOffset(System.Int32,System.Int32)";
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string SetBlock_WorldBase_Int32_Int32_Int32_BlockValue_Boolean = "BlockValue Chunk::SetBlock(WorldBase,System.Int32,System.Int32,System.Int32,BlockValue,System.Boolean)";
            public static class SetBlock_WorldBase_Int32_Int32_Int32_BlockValue_BooleanInjects
            {
                public const string Chunk_SetBlock_WorldBase_Int32_Int32_Int32_Int32_BlockValue_Boolean = "BlockValue Chunk::SetBlock(WorldBase,System.Int32,System.Int32,System.Int32,System.Int32,BlockValue,System.Boolean)";
            }

            public const string SetBlock_WorldBase_Int32_Int32_Int32_Int32_BlockValue_Boolean = "BlockValue Chunk::SetBlock(WorldBase,System.Int32,System.Int32,System.Int32,System.Int32,BlockValue,System.Boolean)";
            public static class SetBlock_WorldBase_Int32_Int32_Int32_Int32_BlockValue_BooleanInjects
            {
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_SetBlockRaw_Int32_Int32_Int32_BlockValue = "BlockValue Chunk::SetBlockRaw(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Block_OnBlockRemoved_WorldBase_Chunk_Vector3i_BlockValue = "System.Void Block::OnBlockRemoved(WorldBase,Chunk,Vector3i,BlockValue)";
                public const string Block_OnBlockAdded_WorldBase_Chunk_Vector3i_BlockValue = "System.Void Block::OnBlockAdded(WorldBase,Chunk,Vector3i,BlockValue)";
                public const string Block_OnBlockValueChanged_WorldBase_Chunk_Int32_Vector3i_BlockValue_BlockValue = "System.Void Block::OnBlockValueChanged(WorldBase,Chunk,System.Int32,Vector3i,BlockValue,BlockValue)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string SetBlockRaw = "BlockValue Chunk::SetBlockRaw(System.Int32,System.Int32,System.Int32,BlockValue)";
            public static class SetBlockRawInjects
            {
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string ChunkBlockLayer_SetAt_Int32_Int32_Int32_UInt32 = "System.Void ChunkBlockLayer::SetAt(System.Int32,System.Int32,System.Int32,System.UInt32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Chunk_GetDamage_Int32_Int32_Int32 = "System.Int32 Chunk::GetDamage(System.Int32,System.Int32,System.Int32)";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "ChunkBlockLayer MemoryPooledObject`1<ChunkBlockLayer>::AllocSync(System.Boolean)";
                public const string Chunk_SetDamage_Int32_Int32_Int32_Int32 = "System.Void Chunk::SetDamage(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string DictionarySave_2_ContainsKey_T1 = "System.Boolean DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::ContainsKey(System.String)";
                public const string DictionarySave_2_get_Item_T1 = "System.Collections.Generic.List`1<Vector3i> DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Item(System.String)";
                public const string List_1_Remove_T = "System.Boolean System.Collections.Generic.List`1<Vector3i>::Remove(Vector3i)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Vector3i>::get_Count()";
                public const string DictionarySave_2_Remove_T1 = "System.Void DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::Remove(System.String)";
                public const string DictionarySave_2_set_Item_T1_T2 = "System.Void DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::set_Item(System.String,System.Collections.Generic.List`1<Vector3i>)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Vector3i>::Add(Vector3i)";
                public const string ChunkBlockLayerLegacy_CalcOffset_Int32_Int32 = "System.Int32 ChunkBlockLayerLegacy::CalcOffset(System.Int32,System.Int32)";
                public const string Chunk_RecalcHeightAt_Int32_Int32_Int32 = "System.Byte Chunk::RecalcHeightAt(System.Int32,System.Int32,System.Int32)";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Chunk_ToWorldPos_Vector3i = "Vector3i Chunk::ToWorldPos(Vector3i)";
                public const string DictionaryKeyList_2_Replace_T_S = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Replace(Vector3i,System.Int32)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string DictionaryKeyList_2_Remove_T = "System.Void DictionaryKeyList`2<Vector3i,System.Int32>::Remove(Vector3i)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string Air = "BlockValue BlockValue::Air";
                public const string list = "Block[] Block::list";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string rawData = "System.UInt32 BlockValue::rawData";
                public const string damage = "System.Int32 BlockValue::damage";
                public const string poolCBL = "MemoryPooledObject`1<ChunkBlockLayer> MemoryPools::poolCBL";
                public const string IndexName = "System.String Block::IndexName";
                public const string IndexedBlocks = "DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>> Chunk::IndexedBlocks";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string IsRandomlyTick = "System.Boolean Block::IsRandomlyTick";
                public const string tickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::tickedBlocks";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
                public const string bEmptyDirty = "System.Boolean Chunk::bEmptyDirty";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Vector3i>::.ctor()";
            }

            public const string GetTickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::GetTickedBlocks()";
            public static class GetTickedBlocksInjects
            {
                public const string tickedBlocks = "DictionaryKeyList`2<Vector3i,System.Int32> Chunk::tickedBlocks";
            }

            public const string RemoveTileEntityAt = "System.Void Chunk::RemoveTileEntityAt<T>(World,Vector3i)";
            public static class RemoveTileEntityAtInjects
            {
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::TryGetValue(Vector3i,TileEntity&)";
                public const string TileEntity_OnRemove_World = "System.Void TileEntity::OnRemove(World)";
                public const string DictionaryList_2_Remove_T = "System.Void DictionaryList`2<Vector3i,TileEntity>::Remove(Vector3i)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string dict = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> DictionaryList`2<Vector3i,TileEntity>::dict";
            }

            public const string RemoveAllTileEntities = "System.Void Chunk::RemoveAllTileEntities()";
            public static class RemoveAllTileEntitiesInjects
            {
                public const string DictionaryList_2_get_Count = "System.Int32 DictionaryList`2<Vector3i,TileEntity>::get_Count()";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string DictionaryList_2_Clear = "System.Void DictionaryList`2<Vector3i,TileEntity>::Clear()";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
            }

            public const string GetHeight_Int32 = "System.Byte Chunk::GetHeight(System.Int32)";
            public static class GetHeight_Int32Injects
            {
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
            }

            public const string AddTileEntity = "System.Void Chunk::AddTileEntity(TileEntity)";
            public static class AddTileEntityInjects
            {
                public const string TileEntity_get_localChunkPos = "Vector3i TileEntity::get_localChunkPos()";
                public const string DictionaryList_2_Set_T_S = "System.Void DictionaryList`2<Vector3i,TileEntity>::Set(Vector3i,TileEntity)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
            }

            public const string RemoveTileEntity = "System.Void Chunk::RemoveTileEntity(World,TileEntity)";
            public static class RemoveTileEntityInjects
            {
                public const string TileEntity_get_localChunkPos = "Vector3i TileEntity::get_localChunkPos()";
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::TryGetValue(Vector3i,TileEntity&)";
                public const string TileEntity_OnRemove_World = "System.Void TileEntity::OnRemove(World)";
                public const string DictionaryList_2_Remove_T = "System.Void DictionaryList`2<Vector3i,TileEntity>::Remove(Vector3i)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string dict = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> DictionaryList`2<Vector3i,TileEntity>::dict";
            }

            public const string GetTileEntity = "TileEntity Chunk::GetTileEntity(Vector3i)";
            public static class GetTileEntityInjects
            {
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::TryGetValue(Vector3i,TileEntity&)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string dict = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> DictionaryList`2<Vector3i,TileEntity>::dict";
            }

            public const string GetTileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::GetTileEntities()";
            public static class GetTileEntitiesInjects
            {
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
            }

            public const string GetEntitySpawners = "EntitySpawnerList Chunk::GetEntitySpawners()";
            public static class GetEntitySpawnersInjects
            {
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
            }

            public const string GetSleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::GetSleeperVolumes()";
            public static class GetSleeperVolumesInjects
            {
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
            }

            public const string GetTickRefCount = "System.Int32 Chunk::GetTickRefCount(System.Int32)";
            public static class GetTickRefCountInjects
            {
                public const string ChunkBlockLayer_GetTickRefCount = "System.Int32 ChunkBlockLayer::GetTickRefCount()";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string UpdateTick = "System.Void Chunk::UpdateTick(World,System.Boolean)";
            public static class UpdateTickInjects
            {
                public const string List_1_get_Item_Int32 = "TileEntity System.Collections.Generic.List`1<TileEntity>::get_Item(System.Int32)";
                public const string TileEntity_UpdateTick_World = "System.Void TileEntity::UpdateTick(World)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<TileEntity>::get_Count()";
                public const string WorldBase_IsEditor = "System.Boolean WorldBase::IsEditor()";
                public const string AIDirector_get_BloodMoonComponent = "AIDirectorBloodMoonComponent AIDirector::get_BloodMoonComponent()";
                public const string AIDirectorBloodMoonComponent_get_BloodMoonActive = "System.Boolean AIDirectorBloodMoonComponent::get_BloodMoonActive()";
                public const string GameUtils_WorldTimeToDays_UInt64 = "System.Int32 GameUtils::WorldTimeToDays(System.UInt64)";
                public const string EntitySpawner_Spawn_World_Int32_Boolean = "System.Void EntitySpawner::Spawn(World,System.Int32,System.Boolean)";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string list = "System.Collections.Generic.List`1<TileEntity> DictionaryList`2<Vector3i,TileEntity>::list";
                public const string aiDirector = "AIDirector World::aiDirector";
                public const string worldTime = "System.UInt64 World::worldTime";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
            }

            public const string get_NeedsTicking = "System.Boolean Chunk::get_NeedsTicking()";
            public static class get_NeedsTickingInjects
            {
                public const string DictionaryList_2_get_Count = "System.Int32 DictionaryList`2<Vector3i,TileEntity>::get_Count()";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<EntitySpawner>::get_Count()";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string entitySpawners = "EntitySpawnerList Chunk::entitySpawners";
                public const string sleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::sleeperVolumes";
            }

            public const string IsOpenSkyAbove = "System.Boolean Chunk::IsOpenSkyAbove(System.Int32,System.Int32,System.Int32)";
            public static class IsOpenSkyAboveInjects
            {
                public const string Chunk_GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
            }

            public const string GetLivingEntitiesInBounds = "System.Void Chunk::GetLivingEntitiesInBounds(EntityAlive,UnityEngine.Bounds,System.Collections.Generic.List`1<EntityAlive>)";
            public static class GetLivingEntitiesInBoundsInjects
            {
                public const string Bounds_get_min = "UnityEngine.Vector3 UnityEngine.Bounds::get_min()";
                public const string Utils_Fastfloor_Double = "System.Int32 Utils::Fastfloor(System.Double)";
                public const string Bounds_get_max = "UnityEngine.Vector3 UnityEngine.Bounds::get_max()";
                public const string List_1_get_Item_Int32 = "Entity System.Collections.Generic.List`1<Entity>::get_Item(System.Int32)";
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string Entity_IsDead = "System.Boolean Entity::IsDead()";
                public const string Bounds_Intersects_Bounds = "System.Boolean UnityEngine.Bounds::Intersects(UnityEngine.Bounds)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string Entity_CanCollideWith_Entity = "System.Boolean Entity::CanCollideWith(Entity)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<EntityAlive>::Add(EntityAlive)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Entity>::get_Count()";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string cCollisionBlocks = "System.Int32 World::cCollisionBlocks";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string boundingBox = "UnityEngine.Bounds Entity::boundingBox";
            }

            public const string RemoveEntityFromChunk = "System.Void Chunk::RemoveEntityFromChunk(Entity)";
            public static class RemoveEntityFromChunkInjects
            {
                public const string List_1_Remove_T = "System.Boolean System.Collections.Generic.List`1<Entity>::Remove(Entity)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Entity>::get_Count()";
                public const string chunkPosAddedEntityTo = "Vector3i Entity::chunkPosAddedEntityTo";
                public const string y = "System.Int32 Vector3i::y";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
            }

            public const string AddEntityToChunk = "System.Void Chunk::AddEntityToChunk(Entity)";
            public static class AddEntityToChunkInjects
            {
                public const string Utils_Fastfloor_Single = "System.Int32 Utils::Fastfloor(System.Single)";
                public const string World_toChunkXZ_Int32 = "System.Int32 World::toChunkXZ(System.Int32)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Utils_Fastfloor_Double = "System.Int32 Utils::Fastfloor(System.Double)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Entity>::Add(Entity)";
                public const string hasEntities = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::hasEntities";
                public const string position = "UnityEngine.Vector3 Entity::position";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string addedToChunk = "System.Boolean Entity::addedToChunk";
                public const string chunkPosAddedEntityTo = "Vector3i Entity::chunkPosAddedEntityTo";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string GetAABB = "UnityEngine.Bounds Chunk::GetAABB()";
            public static class GetAABBInjects
            {
                public const string boundingBox = "UnityEngine.Bounds Chunk::boundingBox";
            }

            public const string updateBoundingBox = "System.Void Chunk::updateBoundingBox()";
            public static class updateBoundingBoxInjects
            {
                public const string BoundsUtils_BoundsForMinMax_Single_Single_Single_Single_Single_Single = "UnityEngine.Bounds BoundsUtils::BoundsForMinMax(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string boundingBox = "UnityEngine.Bounds Chunk::boundingBox";
            }

            public const string GetTris = "System.Int32 Chunk::GetTris()";
            public static class GetTrisInjects
            {
                public const string totalTris = "System.Int32 Chunk::totalTris";
            }

            public const string GetTrisInMesh = "System.Int32 Chunk::GetTrisInMesh(System.Int32)";
            public static class GetTrisInMeshInjects
            {
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string trisInMesh = "System.Int32[][] Chunk::trisInMesh";
            }

            public const string GetSizeOfMesh = "System.Int32 Chunk::GetSizeOfMesh(System.Int32)";
            public static class GetSizeOfMeshInjects
            {
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string sizeOfMesh = "System.Int32[][] Chunk::sizeOfMesh";
                public const string trisInMesh = "System.Int32[][] Chunk::trisInMesh";
            }

            public const string GetUsedMem = "System.Int32 Chunk::GetUsedMem()";
            public static class GetUsedMemInjects
            {
                public const string ChunkBlockLayer_GetUsedMem = "System.Int32 ChunkBlockLayer::GetUsedMem()";
                public const string ChunkBlockChannel_GetUsedMem = "System.Int32 ChunkBlockChannel::GetUsedMem()";
                public const string TotalMemory = "System.Int32 Chunk::TotalMemory";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string m_TerrainHeight = "System.Byte[] Chunk::m_TerrainHeight";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string m_Biomes = "System.Byte[] Chunk::m_Biomes";
                public const string m_BiomeIntensities = "System.Byte[] Chunk::m_BiomeIntensities";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string chnStability = "ChunkBlockChannel Chunk::chnStability";
                public const string chnLight = "ChunkBlockChannel Chunk::chnLight";
                public const string chnDensity = "ChunkBlockChannel Chunk::chnDensity";
                public const string chnDamage = "ChunkBlockChannel Chunk::chnDamage";
                public const string chnTextures = "ChunkBlockChannel Chunk::chnTextures";
            }

            public const string OnLoadedFromCache = "System.Void Chunk::OnLoadedFromCache()";
            public static class OnLoadedFromCacheInjects
            {
                public const string Chunk_set_NeedsRegeneration_Boolean = "System.Void Chunk::set_NeedsRegeneration(System.Boolean)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Clear()";
                public const string List_1_get_Item_Int32 = "Entity System.Collections.Generic.List`1<Entity>::get_Item(System.Int32)";
                public const string Entity_IsSavedToFile = "System.Boolean Entity::IsSavedToFile()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Add(EntityCreationData)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Entity>::get_Count()";
                public const string InProgressRegeneration = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressRegeneration";
                public const string InProgressSaving = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressSaving";
                public const string InProgressCopying = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressCopying";
                public const string InProgressDecorating = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressDecorating";
                public const string InProgressLighting = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressLighting";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
                public const string NeedsOnlyCollisionMesh = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsOnlyCollisionMesh";
                public const string IsCollisionMeshGenerated = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::IsCollisionMeshGenerated";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string EntityCreationData_ctor_Entity = "System.Void EntityCreationData::.ctor(Entity)";
            }

            public const string OnLoad = "System.Void Chunk::OnLoad(World)";
            public static class OnLoadInjects
            {
                public const string WorldBase_IsRemote = "System.Boolean WorldBase::IsRemote()";
                public const string List_1_get_Item_Int32 = "EntityCreationData System.Collections.Generic.List`1<EntityCreationData>::get_Item(System.Int32)";
                public const string WorldBase_GetEntity_Int32 = "Entity WorldBase::GetEntity(System.Int32)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string EntityFactory_CreateEntity_EntityCreationData = "Entity EntityFactory::CreateEntity(EntityCreationData)";
                public const string World_SpawnEntityInWorld_Entity = "System.Void World::SpawnEntityInWorld(Entity)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<EntityCreationData>::get_Count()";
                public const string WorldBase_GetWorldTime = "System.UInt64 WorldBase::GetWorldTime()";
                public const string Chunk_removeExpiredCustomChunkDataEntries_UInt64 = "System.Void Chunk::removeExpiredCustomChunkDataEntries(System.UInt64)";
                public const string WorldBase_IsEditor = "System.Boolean WorldBase::IsEditor()";
                public const string GamePrefs_GetBool_EnumGamePrefs = "System.Boolean GamePrefs::GetBool(EnumGamePrefs)";
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string Chunk_get_X = "System.Int32 Chunk::get_X()";
                public const string Chunk_get_Z = "System.Int32 Chunk::get_Z()";
                public const string ChunkBlockLayer_OnLoad_WorldBase_Int32_Int32_Int32_Int32 = "System.Void ChunkBlockLayer::OnLoad(WorldBase,System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string entityStubs = "System.Collections.Generic.List`1<EntityCreationData> Chunk::entityStubs";
                public const string id = "System.Int32 EntityCreationData::id";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string OnUnload = "System.Void Chunk::OnUnload(WorldBase)";
            public static class OnUnloadInjects
            {
                public const string List_1_get_Item_Int32 = "UnityEngine.GameObject System.Collections.Generic.List`1<UnityEngine.GameObject>::get_Item(System.Int32)";
                public const string Object_Destroy_Object = "System.Void UnityEngine.Object::Destroy(UnityEngine.Object)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<UnityEngine.GameObject>::get_Count()";
                public const string WorldBase_IsRemote = "System.Boolean WorldBase::IsRemote()";
                public const string WorldBase_UnloadEntities_List_1 = "System.Void WorldBase::UnloadEntities(System.Collections.Generic.List`1<Entity>)";
                public const string WorldBase_GetWorldTime = "System.UInt64 WorldBase::GetWorldTime()";
                public const string Chunk_removeExpiredCustomChunkDataEntries_UInt64 = "System.Void Chunk::removeExpiredCustomChunkDataEntries(System.UInt64)";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string TileEntity_OnUnload_World = "System.Void TileEntity::OnUnload(World)";
                public const string Chunk_removeBlockEntityTransforms = "System.Void Chunk::removeBlockEntityTransforms()";
                public const string WorldBase_IsEditor = "System.Boolean WorldBase::IsEditor()";
                public const string GamePrefs_GetBool_EnumGamePrefs = "System.Boolean GamePrefs::GetBool(EnumGamePrefs)";
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string Chunk_get_X = "System.Int32 Chunk::get_X()";
                public const string Chunk_get_Z = "System.Int32 Chunk::get_Z()";
                public const string ChunkBlockLayer_OnUnload_WorldBase_Int32_Int32_Int32_Int32 = "System.Void ChunkBlockLayer::OnUnload(WorldBase,System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string InProgressUnloading = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::InProgressUnloading";
                public const string biomeParticles = "System.Collections.Generic.List`1<UnityEngine.GameObject> Chunk::biomeParticles";
                public const string spawnedBiomeParticles = "System.Boolean Chunk::spawnedBiomeParticles";
                public const string entityLists = "System.Collections.Generic.List`1<Entity>[] Chunk::entityLists";
                public const string tileEntities = "DictionaryList`2<Vector3i,TileEntity> Chunk::tileEntities";
                public const string list = "System.Collections.Generic.List`1<TileEntity> DictionaryList`2<Vector3i,TileEntity>::list";
                public const string Instance = "GameManager GameManager::Instance";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string SpawnBiomeParticles = "System.Void Chunk::SpawnBiomeParticles(UnityEngine.Transform)";
            public static class SpawnBiomeParticlesInjects
            {
                public const string BiomeParticleManager_SpawnParticles_Chunk_Transform = "System.Collections.Generic.List`1<UnityEngine.GameObject> BiomeParticleManager::SpawnParticles(Chunk,UnityEngine.Transform)";
                public const string spawnedBiomeParticles = "System.Boolean Chunk::spawnedBiomeParticles";
                public const string biomeParticles = "System.Collections.Generic.List`1<UnityEngine.GameObject> Chunk::biomeParticles";
            }

            public const string OnDisplay = "System.Void Chunk::OnDisplay(World,UnityEngine.Transform,ChunkCluster)";
            public static class OnDisplayInjects
            {
                public const string Chunk_SpawnBiomeParticles_Transform = "System.Void Chunk::SpawnBiomeParticles(UnityEngine.Transform)";
                public const string Chunk_get_X = "System.Int32 Chunk::get_X()";
                public const string Chunk_get_Z = "System.Int32 Chunk::get_Z()";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
                public const string Dictionary_2_get_Item_TKey = "System.Int32 System.Collections.Generic.Dictionary`2<System.String,System.Int32>::get_Item(System.String)";
                public const string List_1_get_Item_Int32 = "BlockEntityData System.Collections.Generic.List`1<BlockEntityData>::get_Item(System.Int32)";
                public const string Chunk_setBlockEntityRendering_BlockEntityData_Boolean = "System.Void Chunk::setBlockEntityRendering(BlockEntityData,System.Boolean)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string ChunkCluster_GetBlock_Vector3i = "BlockValue ChunkCluster::GetBlock(Vector3i)";
                public const string Chunk_RemoveEntityBlockStub_Vector3i = "System.Void Chunk::RemoveEntityBlockStub(Vector3i)";
                public const string Vector3i_op_Subtraction_Vector3i_Vector3i = "Vector3i Vector3i::op_Subtraction(Vector3i,Vector3i)";
                public const string WorldBase_GetBlock_Vector3i = "BlockValue WorldBase::GetBlock(Vector3i)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string World_GetDecorationOffsetY_Vector3i = "System.Single World::GetDecorationOffsetY(Vector3i)";
                public const string BlockShape_GetRotation_BlockValue = "UnityEngine.Quaternion BlockShape::GetRotation(BlockValue)";
                public const string BlockShapeModelEntity_GetRotatedOffset_Block_Quaternion = "UnityEngine.Vector3 BlockShapeModelEntity::GetRotatedOffset(Block,UnityEngine.Quaternion)";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string GameObjectPool_get_Instance = "GameObjectPool GameObjectPool::get_Instance()";
                public const string GameObjectPool_GetObjectForType_String = "UnityEngine.GameObject GameObjectPool::GetObjectForType(System.String)";
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string GameObject_get_transform = "UnityEngine.Transform UnityEngine.GameObject::get_transform()";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<WorldRefMono> System.Collections.Generic.List`1<WorldRefMono>::GetEnumerator()";
                public const string Enumerator_get_Current = "WorldRefMono System.Collections.Generic.List`1/Enumerator<WorldRefMono>::get_Current()";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<WorldRefMono>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<WorldRefMono>::Clear()";
                public const string Transform_set_parent_Transform = "System.Void UnityEngine.Transform::set_parent(UnityEngine.Transform)";
                public const string Vector3_get_one = "UnityEngine.Vector3 UnityEngine.Vector3::get_one()";
                public const string Transform_set_localScale_Vector3 = "System.Void UnityEngine.Transform::set_localScale(UnityEngine.Vector3)";
                public const string Vector3_op_Subtraction_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Subtraction(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Transform_set_localPosition_Vector3 = "System.Void UnityEngine.Transform::set_localPosition(UnityEngine.Vector3)";
                public const string Transform_set_localRotation_Quaternion = "System.Void UnityEngine.Transform::set_localRotation(UnityEngine.Quaternion)";
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string GameObject_get_layer = "System.Int32 UnityEngine.GameObject::get_layer()";
                public const string Utils_SetColliderLayerRecursively_GameObject_Int32 = "System.Void Utils::SetColliderLayerRecursively(UnityEngine.GameObject,System.Int32)";
                public const string Chunk_ToLocalPosition_Vector3i = "Vector3i Chunk::ToLocalPosition(Vector3i)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string Block_OnBlockEntityTransformBeforeActivated_WorldBase_Vector3i_Int32_BlockValue_BlockEntityData = "System.Void Block::OnBlockEntityTransformBeforeActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
                public const string GameObject_SetActive_Boolean = "System.Void UnityEngine.GameObject::SetActive(System.Boolean)";
                public const string Block_OnBlockEntityTransformAfterActivated_WorldBase_Vector3i_Int32_BlockValue_BlockEntityData = "System.Void Block::OnBlockEntityTransformAfterActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<UnityEngine.Transform>::Add(UnityEngine.Transform)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockEntityData>::get_Count()";
                public const string OcclusionManager_AddChunkTransforms_Chunk_List_1 = "System.Void OcclusionManager::AddChunkTransforms(Chunk,System.Collections.Generic.List`1<UnityEngine.Transform>)";
                public const string Chunk_removeBlockEntitesMarkedForRemoval = "System.Void Chunk::removeBlockEntitesMarkedForRemoval()";
                public const string AstarManager_AddBoundsToUpdate_Bounds = "System.Void AstarManager::AddBoundsToUpdate(UnityEngine.Bounds)";
                public const string LayerMappingTable = "System.Collections.Generic.Dictionary`2<System.String,System.Int32> ChunkCluster::LayerMappingTable";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string list = "System.Collections.Generic.List`1<BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::list";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
                public const string NeedsOnlyCollisionMesh = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsOnlyCollisionMesh";
                public const string bRenderingOn = "System.Boolean BlockEntityData::bRenderingOn";
                public const string blockValue = "BlockValue BlockEntityData::blockValue";
                public const string pos = "Vector3i BlockEntityData::pos";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
                public const string shape = "BlockShape Block::shape";
                public const string IsTerrainDecoration = "System.Boolean Block::IsTerrainDecoration";
                public const string up = "Vector3i Vector3i::up";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string modelName = "System.String BlockShapeModelEntity::modelName";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
                public const string wref = "System.Collections.Generic.List`1<WorldRefMono> Chunk::wref";
                public const string ChunkCluster = "ChunkCluster WorldRefMono::ChunkCluster";
                public const string ClusterIdx = "System.Int32 ChunkCluster::ClusterIdx";
                public const string occlusionTs = "System.Collections.Generic.List`1<UnityEngine.Transform> Chunk::occlusionTs";
                public const string Instance = "OcclusionManager OcclusionManager::Instance";
                public const string cullChunkEntities = "System.Boolean OcclusionManager::cullChunkEntities";
                public const string boundingBox = "UnityEngine.Bounds Chunk::boundingBox";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<WorldRefMono>::.ctor()";
            }

            public const string ToLocalPosition = "Vector3i Chunk::ToLocalPosition(Vector3i)";
            public static class ToLocalPositionInjects
            {
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
            }

            public const string removeBlockEntitesMarkedForRemoval = "System.Void Chunk::removeBlockEntitesMarkedForRemoval()";
            public static class removeBlockEntitesMarkedForRemovalInjects
            {
                public const string List_1_get_Item_Int32 = "BlockEntityData System.Collections.Generic.List`1<BlockEntityData>::get_Item(System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<UnityEngine.Transform>::Add(UnityEngine.Transform)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockEntityData>::get_Count()";
                public const string OcclusionManager_RemoveChunkTransforms_Chunk_List_1 = "System.Void OcclusionManager::RemoveChunkTransforms(Chunk,System.Collections.Generic.List`1<UnityEngine.Transform>)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<UnityEngine.Transform>::Clear()";
                public const string BlockEntityData_Cleanup = "System.Void BlockEntityData::Cleanup()";
                public const string Chunk_poolBlockEntityTransform_BlockEntityData = "System.Void Chunk::poolBlockEntityTransform(BlockEntityData)";
                public const string Instance = "OcclusionManager OcclusionManager::Instance";
                public const string cullChunkEntities = "System.Boolean OcclusionManager::cullChunkEntities";
                public const string blockEntityStubsToRemove = "System.Collections.Generic.List`1<BlockEntityData> Chunk::blockEntityStubsToRemove";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
                public const string occlusionTs = "System.Collections.Generic.List`1<UnityEngine.Transform> Chunk::occlusionTs";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
            }

            public const string OnHide = "System.Void Chunk::OnHide()";
            public static class OnHideInjects
            {
                public const string Chunk_removeBlockEntityTransforms = "System.Void Chunk::removeBlockEntityTransforms()";
                public const string AstarManager_AddBoundsToUpdate_Bounds = "System.Void AstarManager::AddBoundsToUpdate(UnityEngine.Bounds)";
                public const string boundingBox = "UnityEngine.Bounds Chunk::boundingBox";
            }

            public const string removeBlockEntityTransforms = "System.Void Chunk::removeBlockEntityTransforms()";
            public static class removeBlockEntityTransformsInjects
            {
                public const string OcclusionManager_RemoveChunk_Chunk = "System.Void OcclusionManager::RemoveChunk(Chunk)";
                public const string List_1_get_Item_Int32 = "BlockEntityData System.Collections.Generic.List`1<BlockEntityData>::get_Item(System.Int32)";
                public const string Chunk_poolBlockEntityTransform_BlockEntityData = "System.Void Chunk::poolBlockEntityTransform(BlockEntityData)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockEntityData>::get_Count()";
                public const string Instance = "OcclusionManager OcclusionManager::Instance";
                public const string cullChunkEntities = "System.Boolean OcclusionManager::cullChunkEntities";
                public const string blockEntityStubs = "DictionaryList`2<System.UInt64,BlockEntityData> Chunk::blockEntityStubs";
                public const string list = "System.Collections.Generic.List`1<BlockEntityData> DictionaryList`2<System.UInt64,BlockEntityData>::list";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
            }

            public const string poolBlockEntityTransform = "System.Void Chunk::poolBlockEntityTransform(BlockEntityData)";
            public static class poolBlockEntityTransformInjects
            {
                public const string Chunk_setBlockEntityRendering_BlockEntityData_Boolean = "System.Void Chunk::setBlockEntityRendering(BlockEntityData,System.Boolean)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string Component_get_gameObject = "UnityEngine.GameObject UnityEngine.Component::get_gameObject()";
                public const string GameObjectPool_get_Instance = "GameObjectPool GameObjectPool::get_Instance()";
                public const string GameObjectPool_PoolObject_GameObject = "System.Void GameObjectPool::PoolObject(UnityEngine.GameObject)";
                public const string Object_ToString = "System.String System.Object::ToString()";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string bRenderingOn = "System.Boolean BlockEntityData::bRenderingOn";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
                public const string pos = "Vector3i BlockEntityData::pos";
                public const string bHasTransform = "System.Boolean BlockEntityData::bHasTransform";
            }

            public const string setBlockEntityRendering = "System.Void Chunk::setBlockEntityRendering(BlockEntityData,System.Boolean)";
            public static class setBlockEntityRenderingInjects
            {
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string Component_get_gameObject = "UnityEngine.GameObject UnityEngine.Component::get_gameObject()";
                public const string Object_ToString = "System.String System.Object::ToString()";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Renderer_set_enabled_Boolean = "System.Void UnityEngine.Renderer::set_enabled(System.Boolean)";
                public const string Component_BroadcastMessage_String_SendMessageOptions = "System.Void UnityEngine.Component::BroadcastMessage(System.String,UnityEngine.SendMessageOptions)";
                public const string bRenderingOn = "System.Boolean BlockEntityData::bRenderingOn";
                public const string transform = "UnityEngine.Transform BlockEntityData::transform";
                public const string pos = "Vector3i BlockEntityData::pos";
            }

            public const string ToTerrain = "System.Void Chunk::ToTerrain(Chunk,Chunk)";
            public static class ToTerrainInjects
            {
                public const string Chunk_GetHeight_Int32_Int32 = "System.Byte Chunk::GetHeight(System.Int32,System.Int32)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Chunk_SetBlockRaw_Int32_Int32_Int32_BlockValue = "BlockValue Chunk::SetBlockRaw(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string Chunk_GetDensity_Int32_Int32_Int32 = "System.SByte Chunk::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_SetDensity_Int32_Int32_Int32_SByte = "System.Void Chunk::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string Chunk_SetHeight_Int32_Int32_Byte = "System.Void Chunk::SetHeight(System.Int32,System.Int32,System.Byte)";
                public const string Chunk_SetTerrainHeight_Int32_Int32_Byte = "System.Void Chunk::SetTerrainHeight(System.Int32,System.Int32,System.Byte)";
                public const string Chunk_CopyLightsFrom_Chunk = "System.Void Chunk::CopyLightsFrom(Chunk)";
                public const string Chunk_set_isModified_Boolean = "System.Void Chunk::set_isModified(System.Boolean)";
                public const string cTerrainBlockValue = "BlockValue Constants::cTerrainBlockValue";
                public const string NeedsLightCalculation = "System.Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Chunk::NeedsLightCalculation";
            }

            public const string AddMeshLayer = "System.Void Chunk::AddMeshLayer(VoxelMeshLayer)";
            public static class AddMeshLayerInjects
            {
                public const string VoxelMeshLayer_GetTrisInMesh_Int32 = "System.Int32 VoxelMeshLayer::GetTrisInMesh(System.Int32)";
                public const string VoxelMeshLayer_GetSizeOfMesh_Int32 = "System.Int32 VoxelMeshLayer::GetSizeOfMesh(System.Int32)";
                public const string Array_GetLength_Int32 = "System.Int32 System.Array::GetLength(System.Int32)";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Queue_1_Enqueue_T = "System.Void System.Collections.Generic.Queue`1<VoxelMeshLayer>::Enqueue(VoxelMeshLayer)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string trisInMesh = "System.Int32[][] Chunk::trisInMesh";
                public const string idx = "System.Int32 VoxelMeshLayer::idx";
                public const string sizeOfMesh = "System.Int32[][] Chunk::sizeOfMesh";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string totalTris = "System.Int32 Chunk::totalTris";
                public const string m_MeshLayers = "System.Collections.Generic.Queue`1<VoxelMeshLayer> Chunk::m_MeshLayers";
                public const string MeshLayerCount = "System.Int32 Chunk::MeshLayerCount";
            }

            public const string HasMeshLayer = "System.Boolean Chunk::HasMeshLayer()";
            public static class HasMeshLayerInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Queue_1_get_Count = "System.Int32 System.Collections.Generic.Queue`1<VoxelMeshLayer>::get_Count()";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_MeshLayers = "System.Collections.Generic.Queue`1<VoxelMeshLayer> Chunk::m_MeshLayers";
            }

            public const string GetMeshLayer = "VoxelMeshLayer Chunk::GetMeshLayer()";
            public static class GetMeshLayerInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string Queue_1_Dequeue = "VoxelMeshLayer System.Collections.Generic.Queue`1<VoxelMeshLayer>::Dequeue()";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string m_MeshLayers = "System.Collections.Generic.Queue`1<VoxelMeshLayer> Chunk::m_MeshLayers";
                public const string MeshLayerCount = "System.Int32 Chunk::MeshLayerCount";
            }

            public const string GetDecoAllowedAt = "EnumDecoAllowed Chunk::GetDecoAllowedAt(System.Int32,System.Int32)";
            public static class GetDecoAllowedAtInjects
            {
                public const string DecoManager_get_Instance = "DecoManager DecoManager::get_Instance()";
                public const string DecoManager_IsPositionDecorateable_Int32_Int32 = "System.Boolean DecoManager::IsPositionDecorateable(System.Int32,System.Int32)";
                public const string m_DecoBiomeArray = "EnumDecoAllowed[] Chunk::m_DecoBiomeArray";
                public const string IsEnabled = "System.Boolean DecoManager::IsEnabled";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string SetDecoAllowedAt = "System.Void Chunk::SetDecoAllowedAt(System.Int32,System.Int32,EnumDecoAllowed)";
            public static class SetDecoAllowedAtInjects
            {
                public const string m_DecoBiomeArray = "EnumDecoAllowed[] Chunk::m_DecoBiomeArray";
            }

            public const string GetTerrainNormal = "UnityEngine.Vector3 Chunk::GetTerrainNormal(System.Int32,System.Int32)";
            public static class GetTerrainNormalInjects
            {
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string SetTerrainNormal = "System.Void Chunk::SetTerrainNormal(System.Int32,System.Int32,UnityEngine.Vector3)";
            public static class SetTerrainNormalInjects
            {
                public const string Utils_FastClamp_Single_Single_Single = "System.Single Utils::FastClamp(System.Single,System.Single,System.Single)";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string z = "System.Single UnityEngine.Vector3::z";
            }

            public const string ToWorldPos = "Vector3i Chunk::ToWorldPos(Vector3i)";
            public static class ToWorldPosInjects
            {
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string updateFullMap = "System.Void Chunk::updateFullMap()";
            public static class updateFullMapInjects
            {
                public const string ChunkBlockLayer_GetAt_Int32_Int32_Int32 = "BlockValue ChunkBlockLayer::GetAt(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_Equals_BlockValue = "System.Boolean BlockValue::Equals(BlockValue)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetMapColor_BlockValue_Vector3_Int32 = "UnityEngine.Color Block::GetMapColor(BlockValue,UnityEngine.Vector3,System.Int32)";
                public const string Utils_ToColor5_Color = "System.UInt16 Utils::ToColor5(UnityEngine.Color)";
                public const string ModEvent_1_Invoke_T1 = "System.Void ModEvent`1<Chunk>::Invoke(Chunk)";
                public const string mapColors = "System.UInt16[] Chunk::mapColors";
                public const string m_HeightMap = "System.Byte[] Chunk::m_HeightMap";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
                public const string Air = "BlockValue BlockValue::Air";
                public const string list = "Block[] Block::list";
                public const string IsTerrainDecoration = "System.Boolean Block::IsTerrainDecoration";
                public const string m_NormalX = "System.Byte[] Chunk::m_NormalX";
                public const string m_NormalY = "System.Byte[] Chunk::m_NormalY";
                public const string m_NormalZ = "System.Byte[] Chunk::m_NormalZ";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
                public const string CalcChunkColorsDone = "ModEvent`1<Chunk> ModEvents::CalcChunkColorsDone";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string GetMapColors = "System.UInt16[] Chunk::GetMapColors()";
            public static class GetMapColorsInjects
            {
                public const string Chunk_updateFullMap = "System.Void Chunk::updateFullMap()";
                public const string mapColors = "System.UInt16[] Chunk::mapColors";
                public const string bMapDirty = "System.Boolean Chunk::bMapDirty";
            }

            public const string OnDecorated = "System.Void Chunk::OnDecorated()";
            public static class OnDecoratedInjects
            {
                public const string Chunk_CheckSameDensity = "System.Void Chunk::CheckSameDensity()";
                public const string Chunk_CheckOnlyTerrain = "System.Void Chunk::CheckOnlyTerrain()";
            }

            public const string IsAreaMaster = "System.Boolean Chunk::IsAreaMaster()";
            public static class IsAreaMasterInjects
            {
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string IsAreaMasterCornerChunksLoaded = "System.Boolean Chunk::IsAreaMasterCornerChunksLoaded(ChunkCluster)";
            public static class IsAreaMasterCornerChunksLoadedInjects
            {
                public const string WorldChunkCache_GetChunkSync_Int32_Int32 = "Chunk WorldChunkCache::GetChunkSync(System.Int32,System.Int32)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string ToAreaMasterChunkPos = "Vector3i Chunk::ToAreaMasterChunkPos(Vector3i)";
            public static class ToAreaMasterChunkPosInjects
            {
                public const string World_toChunkXZ_Int32 = "System.Int32 World::toChunkXZ(System.Int32)";
                public const string World_toChunkY_Int32 = "System.Int32 World::toChunkY(System.Int32)";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string IsAreaMasterDominantBiomeInitialized = "System.Boolean Chunk::IsAreaMasterDominantBiomeInitialized(ChunkCluster)";
            public static class IsAreaMasterDominantBiomeInitializedInjects
            {
                public const string WorldChunkCache_GetChunkSync_Int32_Int32 = "Chunk WorldChunkCache::GetChunkSync(System.Int32,System.Int32)";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string biomeCnt = "System.Int32[] Chunk::biomeCnt";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string DominantBiome = "System.Byte Chunk::DominantBiome";
            }

            public const string GetChunkBiomeSpawnData = "ChunkAreaBiomeSpawnData Chunk::GetChunkBiomeSpawnData()";
            public static class GetChunkBiomeSpawnDataInjects
            {
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<System.String,ChunkCustomData>::TryGetValue(System.String,ChunkCustomData&)";
                public const string DictionaryKeyValueList_2_Set_T_S = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Set(System.String,ChunkCustomData)";
                public const string AreaMasterDominantBiome = "System.Byte Chunk::AreaMasterDominantBiome";
                public const string biomeSpawnData = "ChunkAreaBiomeSpawnData Chunk::biomeSpawnData";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string dict = "System.Collections.Generic.Dictionary`2<System.String,ChunkCustomData> DictionaryKeyValueList`2<System.String,ChunkCustomData>::dict";
                public const string key = "System.String ChunkCustomData::key";
                public const string ChunkCustomData_ctor_String_UInt64_Boolean = "System.Void ChunkCustomData::.ctor(System.String,System.UInt64,System.Boolean)";
                public const string ChunkAreaBiomeSpawnData_ctor_Chunk_Byte_ChunkCustomData = "System.Void ChunkAreaBiomeSpawnData::.ctor(Chunk,System.Byte,ChunkCustomData)";
            }

            public const string removeExpiredCustomChunkDataEntries = "System.Void Chunk::removeExpiredCustomChunkDataEntries(System.UInt64)";
            public static class removeExpiredCustomChunkDataEntriesInjects
            {
                public const string List_1_get_Item_Int32 = "ChunkCustomData System.Collections.Generic.List`1<ChunkCustomData>::get_Item(System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<System.String>::Add(System.String)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<ChunkCustomData>::get_Count()";
                public const string DictionaryKeyValueList_2_Remove_T = "System.Void DictionaryKeyValueList`2<System.String,ChunkCustomData>::Remove(System.String)";
                public const string ChunkCustomData = "DictionaryKeyValueList`2<System.String,ChunkCustomData> Chunk::ChunkCustomData";
                public const string valueList = "System.Collections.Generic.List`1<ChunkCustomData> DictionaryKeyValueList`2<System.String,ChunkCustomData>::valueList";
                public const string expiresInWorldTime = "System.UInt64 ChunkCustomData::expiresInWorldTime";
                public const string keyList = "System.Collections.Generic.List`1<System.String> DictionaryKeyValueList`2<System.String,ChunkCustomData>::keyList";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<System.String>::.ctor()";
            }

            public const string SetTraderArea = "System.Void Chunk::SetTraderArea(System.Int32,System.Int32,System.Boolean)";
            public static class SetTraderAreaInjects
            {
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
            }

            public const string IsTraderArea = "System.Boolean Chunk::IsTraderArea(System.Int32,System.Int32)";
            public static class IsTraderAreaInjects
            {
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
            }

            public const string IsAnyTraderArea = "System.Boolean Chunk::IsAnyTraderArea()";
            public static class IsAnyTraderAreaInjects
            {
                public const string traderArea = "System.UInt16[] Chunk::traderArea";
            }

            public const string GetHashCode = "System.Int32 Chunk::GetHashCode()";
            public static class GetHashCodeInjects
            {
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string Equals = "System.Boolean Chunk::Equals(System.Object)";
            public static class EqualsInjects
            {
                public const string Object_Equals_Object = "System.Boolean System.Object::Equals(System.Object)";
                public const string Object_GetHashCode = "System.Int32 System.Object::GetHashCode()";
            }

            public const string ToString = "System.String Chunk::ToString()";
            public static class ToStringInjects
            {
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string cachedToString = "System.String Chunk::cachedToString";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Z = "System.Int32 Chunk::m_Z";
            }

            public const string CheckDensities = "System.Collections.Generic.List`1<Chunk/DensityMismatchInformation> Chunk::CheckDensities(System.Boolean)";
            public static class CheckDensitiesInjects
            {
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetDensity_Int32_Int32_Int32 = "System.SByte Chunk::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string DensityMismatchInformation_ctor_Int32_Int32_Int32_SByte_Int32_Boolean = "System.Void Chunk/DensityMismatchInformation::.ctor(System.Int32,System.Int32,System.Int32,System.SByte,System.Int32,System.Boolean)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Chunk/DensityMismatchInformation>::Add(Chunk/DensityMismatchInformation)";
                public const string Object_ToString = "System.String System.Object::ToString()";
                public const string Log_Warning_String = "System.Void Log::Warning(System.String)";
                public const string m_X = "System.Int32 Chunk::m_X";
                public const string m_Y = "System.Int32 Chunk::m_Y";
                public const string m_Z = "System.Int32 Chunk::m_Z";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string y = "System.Int32 Vector3i::y";
                public const string list = "Block[] Block::list";
                public const string shape = "BlockShape Block::shape";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Chunk/DensityMismatchInformation>::.ctor()";
            }

            public const string RepairDensities = "System.Boolean Chunk::RepairDensities()";
            public static class RepairDensitiesInjects
            {
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Chunk_GetDensity_Int32_Int32_Int32 = "System.SByte Chunk::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string Chunk_SetDensity_Int32_Int32_Int32_SByte = "System.Void Chunk::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string y = "System.Int32 Vector3i::y";
                public const string list = "Block[] Block::list";
                public const string shape = "BlockShape Block::shape";
            }

            public const string LoopOverAllBlocks = "System.Void Chunk::LoopOverAllBlocks(ChunkBlockLayer/LoopBlocksDelegate,System.Boolean,System.Boolean)";
            public static class LoopOverAllBlocksInjects
            {
                public const string ChunkBlockLayer_LoopOverAllBlocks_Chunk_Int32_LoopBlocksDelegate_Boolean_Boolean = "System.Void ChunkBlockLayer::LoopOverAllBlocks(Chunk,System.Int32,ChunkBlockLayer/LoopBlocksDelegate,System.Boolean,System.Boolean)";
                public const string m_BlockLayers = "ChunkBlockLayer[] Chunk::m_BlockLayers";
            }

            public const string isInside = "System.Boolean Chunk::isInside(System.Int32,System.Int32,System.Int32)";
            public static class isInsideInjects
            {
                public const string Vector3b_ctor_Int32_Int32_Int32 = "System.Void Vector3b::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Object_GetHashCode = "System.Int32 System.Object::GetHashCode()";
                public const string HashSet_1_Contains_T = "System.Boolean System.Collections.Generic.HashSet`1<System.Int32>::Contains(System.Int32)";
                public const string insideDevicesHashSet = "System.Collections.Generic.HashSet`1<System.Int32> Chunk::insideDevicesHashSet";
            }

            public const string RestoreCulledBlocks = "BlockFaceFlag Chunk::RestoreCulledBlocks(World)";
            public static class RestoreCulledBlocksInjects
            {
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Vector3b>::get_Count()";
                public const string List_1_get_Item_Int32 = "Vector3b System.Collections.Generic.List`1<Vector3b>::get_Item(System.Int32)";
                public const string insideDevices = "System.Collections.Generic.List`1<Vector3b> Chunk::insideDevices";
                public const string x = "System.Byte Vector3b::x";
                public const string z = "System.Byte Vector3b::z";
                public const string IsInternalBlocksCulled = "System.Boolean Chunk::IsInternalBlocksCulled";
            }
        }
    }

    [System.ComponentModel.DescriptionAttribute("Generated by SharpILMixins")]
    public static class PrefabTargets
    {
        public static class Methods
        {
            public const string get_bSleeperVolumes = "System.Boolean Prefab::get_bSleeperVolumes()";
            public static class get_bSleeperVolumesInjects
            {
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Count()";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
            }

            public const string get_RenderingCostStats = "WorldStats Prefab::get_RenderingCostStats()";
            public static class get_RenderingCostStatsInjects
            {
                public const string renderingCost = "WorldStats Prefab::renderingCost";
            }

            public const string set_RenderingCostStats = "System.Void Prefab::set_RenderingCostStats(WorldStats)";
            public static class set_RenderingCostStatsInjects
            {
                public const string renderingCost = "WorldStats Prefab::renderingCost";
            }

            public const string get_Tags = "POITags Prefab::get_Tags()";
            public static class get_TagsInjects
            {
                public const string tags = "POITags Prefab::tags";
            }

            public const string set_Tags = "System.Void Prefab::set_Tags(POITags)";
            public static class set_TagsInjects
            {
                public const string tags = "POITags Prefab::tags";
            }

            public const string LocationForPrefabName = "PathAbstractions/AbstractedLocation Prefab::LocationForPrefabName(System.String)";
            public static class LocationForPrefabNameInjects
            {
                public const string Utils_GetGameDir_String = "System.String Utils::GetGameDir(System.String)";
                public const string AbstractedLocation_ctor_EAbstractedLocationType_String_String_String_String_Mod = "System.Void PathAbstractions/AbstractedLocation::.ctor(PathAbstractions/EAbstractedLocationType,System.String,System.String,System.String,System.String,Mod)";
            }

            public const string GetLocalRotation = "System.Int32 Prefab::GetLocalRotation()";
            public static class GetLocalRotationInjects
            {
                public const string localRotation = "System.Int32 Prefab::localRotation";
            }

            public const string SetLocalRotation = "System.Void Prefab::SetLocalRotation(System.Int32)";
            public static class SetLocalRotationInjects
            {
                public const string localRotation = "System.Int32 Prefab::localRotation";
            }

            public const string CoordToOffset = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
            public static class CoordToOffsetInjects
            {
                public const string size = "Vector3i Prefab::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
            }

            public const string offsetToCoord = "System.Void Prefab::offsetToCoord(System.Int32,System.Int32&,System.Int32&,System.Int32&)";
            public static class offsetToCoordInjects
            {
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string size = "Vector3i Prefab::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
            }

            public const string SetBlock = "System.Void Prefab::SetBlock(System.Int32,System.Int32,System.Int32,BlockValue)";
            public static class SetBlockInjects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string m_Damage = "System.UInt16[] Prefab::m_Damage";
                public const string damage = "System.Int32 BlockValue::damage";
            }

            public const string SetBlockNoDamage = "System.Void Prefab::SetBlockNoDamage(System.Int32,System.Int32,System.Int32,BlockValue)";
            public static class SetBlockNoDamageInjects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
            }

            public const string GetBlock = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
            public static class GetBlockInjects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string m_Damage = "System.UInt16[] Prefab::m_Damage";
                public const string damage = "System.Int32 BlockValue::damage";
            }

            public const string GetBlockNoDamage_Int32_Int32_Int32_Int32 = "BlockValue Prefab::GetBlockNoDamage(System.Int32,System.Int32,System.Int32,System.Int32)";
            public static class GetBlockNoDamage_Int32_Int32_Int32_Int32Injects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
            }

            public const string GetBlockNoDamage_Int32 = "BlockValue Prefab::GetBlockNoDamage(System.Int32)";
            public static class GetBlockNoDamage_Int32Injects
            {
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
            }

            public const string GetBlockCount = "System.Int32 Prefab::GetBlockCount()";
            public static class GetBlockCountInjects
            {
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
            }

            public const string GetStab = "System.Byte Prefab::GetStab(System.Int32,System.Int32,System.Int32)";
            public const string SetDensity = "System.SByte Prefab::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
            public static class SetDensityInjects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string m_Density = "System.Byte[] Prefab::m_Density";
                public const string size = "Vector3i Prefab::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
            }

            public const string GetDensity_Int32_Int32_Int32 = "System.SByte Prefab::GetDensity(System.Int32,System.Int32,System.Int32)";
            public static class GetDensity_Int32_Int32_Int32Injects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string m_Density = "System.Byte[] Prefab::m_Density";
            }

            public const string GetDensity_Int32_Int32_Int32_Int32 = "System.SByte Prefab::GetDensity(System.Int32,System.Int32,System.Int32,System.Int32)";
            public static class GetDensity_Int32_Int32_Int32_Int32Injects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string m_Density = "System.Byte[] Prefab::m_Density";
            }

            public const string SetTexture = "System.Void Prefab::SetTexture(System.Int32,System.Int32,System.Int32,System.Int64)";
            public static class SetTextureInjects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string m_Textures = "System.Int64[] Prefab::m_Textures";
            }

            public const string GetTexture = "System.Int64 Prefab::GetTexture(System.Int32,System.Int32,System.Int32)";
            public static class GetTextureInjects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string m_Textures = "System.Int64[] Prefab::m_Textures";
            }

            public const string IsInsidePrefab = "System.Boolean Prefab::IsInsidePrefab(System.Int32,System.Int32,System.Int32)";
            public static class IsInsidePrefabInjects
            {
                public const string HashSet_1_Contains_T = "System.Boolean System.Collections.Generic.HashSet`1<Vector3b>::Contains(Vector3b)";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string size = "Vector3i Prefab::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string insidePos = "PrefabInsideDataFile Prefab::insidePos";
                public const string Data = "System.Collections.Generic.HashSet`1<Vector3b> PrefabInsideDataFile::Data";
                public const string Vector3b_ctor_Int32_Int32_Int32 = "System.Void Vector3b::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string GetQuestTag = "System.Boolean Prefab::GetQuestTag(QuestTags)";
            public static class GetQuestTagInjects
            {
                public const string questTags = "QuestTags Prefab::questTags";
            }

            public const string HasQuestTag = "System.Boolean Prefab::HasQuestTag()";
            public static class HasQuestTagInjects
            {
                public const string questTags = "QuestTags Prefab::questTags";
            }

            public const string GetTileEntity = "TileEntity Prefab::GetTileEntity(Vector3i)";
            public static class GetTileEntityInjects
            {
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::TryGetValue(Vector3i,TileEntity&)";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string size = "Vector3i Prefab::size";
                public const string tileEntities = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> Prefab::tileEntities";
            }

            public const string readFromProperties = "System.Void Prefab::readFromProperties()";
            public static class readFromPropertiesInjects
            {
                public const string DynamicProperties_GetBool_String = "System.Boolean DynamicProperties::GetBool(System.String)";
                public const string DynamicProperties_GetFloat_String = "System.Single DynamicProperties::GetFloat(System.String)";
                public const string ValueWrapper_ContainsKey_String = "System.Boolean DynamicProperties/ValueWrapper::ContainsKey(System.String)";
                public const string DynamicProperties_GetStringValue_String = "System.String DynamicProperties::GetStringValue(System.String)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<System.String>::Clear()";
                public const string String_Split_Char_ = "System.String[] System.String::Split(System.Char[])";
                public const string List_1_AddRange_IEnumerable_1 = "System.Void System.Collections.Generic.List`1<System.String>::AddRange(System.Collections.Generic.IEnumerable`1<System.String>)";
                public const string List_1_get_Item_Int32 = "System.String System.Collections.Generic.List`1<System.String>::get_Item(System.Int32)";
                public const string String_Trim = "System.String System.String::Trim()";
                public const string List_1_set_Item_Int32_T = "System.Void System.Collections.Generic.List`1<System.String>::set_Item(System.Int32,System.String)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<System.String>::get_Count()";
                public const string DynamicProperties_GetInt_String = "System.Int32 DynamicProperties::GetInt(System.String)";
                public const string ValueWrapper_get_Item_String = "System.String DynamicProperties/ValueWrapper::get_Item(System.String)";
                public const string StringParsers_ParseVector3i_String_Int32_Int32_Boolean = "Vector3i StringParsers::ParseVector3i(System.String,System.Int32,System.Int32,System.Boolean)";
                public const string ValueWrapper_TryGetString_String_String_ = "System.Boolean DynamicProperties/ValueWrapper::TryGetString(System.String,System.String&)";
                public const string StringParsers_ParseSInt16_String_Int32_Int32_NumberStyles = "System.Int16 StringParsers::ParseSInt16(System.String,System.Int32,System.Int32,System.Globalization.NumberStyles)";
                public const string String_IsNullOrEmpty_String = "System.Boolean System.String::IsNullOrEmpty(System.String)";
                public const string GameStageGroup_TryGet_String = "GameStageGroup GameStageGroup::TryGet(System.String)";
                public const string ReadOnlyCollection_1_get_Count = "System.Int32 System.Collections.ObjectModel.ReadOnlyCollection`1<GameStageGroup/Spawner>::get_Count()";
                public const string ReadOnlyCollection_1_get_Item_Int32 = "GameStageGroup/Spawner System.Collections.ObjectModel.ReadOnlyCollection`1<GameStageGroup/Spawner>::get_Item(System.Int32)";
                public const string PrefabSleeperVolume_Use_Vector3i_Vector3i_Int16_String_Boolean_Boolean_Int32_Int32_Int32 = "System.Void Prefab/PrefabSleeperVolume::Use(Vector3i,Vector3i,System.Int16,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::Add(Prefab/PrefabSleeperVolume)";
                public const string String_Replace_String_String = "System.String System.String::Replace(System.String,System.String)";
                public const string POITags_Parse_String = "POITags POITags::Parse(System.String)";
                public const string Dictionary_2_Clear = "System.Void System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>>::Clear()";
                public const string DictionarySave_2_ContainsKey_T1 = "System.Boolean DictionarySave`2<System.String,DynamicProperties>::ContainsKey(System.String)";
                public const string DictionarySave_2_get_Item_T1 = "DynamicProperties DictionarySave`2<System.String,DynamicProperties>::get_Item(System.String)";
                public const string DictionarySave_2_get_Dict = "System.Collections.Generic.Dictionary`2<System.String,DynamicProperties> DictionarySave`2<System.String,DynamicProperties>::get_Dict()";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,DynamicProperties> System.Collections.Generic.Dictionary`2<System.String,DynamicProperties>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,DynamicProperties> System.Collections.Generic.Dictionary`2/Enumerator<System.String,DynamicProperties>::get_Current()";
                public const string KeyValuePair_2_get_Value = "DynamicProperties System.Collections.Generic.KeyValuePair`2<System.String,DynamicProperties>::get_Value()";
                public const string ValueWrapper_get_Dict = "DictionarySave`2<System.String,System.Object> DynamicProperties/ValueWrapper::get_Dict()";
                public const string DictionarySave_2_get_Count = "System.Int32 DictionarySave`2<System.String,System.Object>::get_Count()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,DynamicProperties>::get_Key()";
                public const string Dictionary_2_set_Item_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>>::set_Item(System.String,System.Collections.Generic.List`1<Vector3i>)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Object>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string Int32_Parse_String = "System.Int32 System.Int32::Parse(System.String)";
                public const string String_ToLower = "System.String System.String::ToLower()";
                public const string Prefab_AddAllowedZone_String = "System.Void Prefab::AddAllowedZone(System.String)";
                public const string WorldStats_FromProperties_DynamicProperties = "WorldStats WorldStats::FromProperties(DynamicProperties)";
                public const string properties = "DynamicProperties Prefab::properties";
                public const string bCopyAirBlocks = "System.Boolean Prefab::bCopyAirBlocks";
                public const string bExcludeDistantPOIMesh = "System.Boolean Prefab::bExcludeDistantPOIMesh";
                public const string bExcludePOICulling = "System.Boolean Prefab::bExcludePOICulling";
                public const string distantPOIYOffset = "System.Single Prefab::distantPOIYOffset";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string distantPOIOverride = "System.String Prefab::distantPOIOverride";
                public const string bAllowTopSoilDecorations = "System.Boolean Prefab::bAllowTopSoilDecorations";
                public const string editorGroups = "System.Collections.Generic.List`1<System.String> Prefab::editorGroups";
                public const string PrefabName = "System.String Prefab::PrefabName";
                public const string DifficultyTier = "System.Byte Prefab::DifficultyTier";
                public const string ShowQuestClearCount = "System.Int32 Prefab::ShowQuestClearCount";
                public const string bTraderArea = "System.Boolean Prefab::bTraderArea";
                public const string zero = "Vector3i Vector3i::zero";
                public const string TraderAreaProtect = "Vector3i Prefab::TraderAreaProtect";
                public const string TraderAreaTeleportSize = "Vector3i Prefab::TraderAreaTeleportSize";
                public const string TraderAreaTeleportCenter = "Vector3i Prefab::TraderAreaTeleportCenter";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string _9_114_0 = "System.Func`4<System.String,System.Int32,System.Int32,Vector3i> Prefab/<>c::<>9__114_0";
                public const string _9 = "Prefab/<>c Prefab/<>c::<>9";
                public const string _9_114_1 = "System.Func`4<System.String,System.Int32,System.Int32,Vector3i> Prefab/<>c::<>9__114_1";
                public const string _9_114_2 = "System.Func`4<System.String,System.Int32,System.Int32,System.Boolean> Prefab/<>c::<>9__114_2";
                public const string _9_114_3 = "System.Func`4<System.String,System.Int32,System.Int32,System.Boolean> Prefab/<>c::<>9__114_3";
                public const string _9_114_4 = "System.Func`4<System.String,System.Int32,System.Int32,System.Int32> Prefab/<>c::<>9__114_4";
                public const string one = "Vector3i Vector3i::one";
                public const string spawners = "System.Collections.ObjectModel.ReadOnlyCollection`1<GameStageGroup/Spawner> GameStageGroup::spawners";
                public const string countRange = "Vector2i GameStageGroup/Spawner::countRange";
                public const string x = "System.Int32 Vector2i::x";
                public const string y = "System.Int32 Vector2i::y";
                public const string yOffset = "System.Int32 Prefab::yOffset";
                public const string rotationToFaceNorth = "System.Int32 Prefab::rotationToFaceNorth";
                public const string tags = "POITags Prefab::tags";
                public const string indexedBlockOffsets = "System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>> Prefab::indexedBlockOffsets";
                public const string Classes = "DictionarySave`2<System.String,DynamicProperties> DynamicProperties::Classes";
                public const string questTags = "QuestTags Prefab::questTags";
                public const string StaticSpawnerClass = "System.String Prefab::StaticSpawnerClass";
                public const string StaticSpawnerSize = "Vector3i Prefab::StaticSpawnerSize";
                public const string StaticSpawnerTrigger = "System.Int32 Prefab::StaticSpawnerTrigger";
                public const string allowedTownships = "System.Collections.Generic.List`1<System.String> Prefab::allowedTownships";
                public const string allowedBiomes = "System.Collections.Generic.List`1<System.String> Prefab::allowedBiomes";
                public const string allowedZones = "System.Collections.Generic.List`1<System.String> Prefab::allowedZones";
                public const string renderingCost = "WorldStats Prefab::renderingCost";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::.ctor()";
                public const string Func_4_ctor_Object_IntPtr = "System.Void System.Func`4<System.String,System.Int32,System.Int32,Vector3i>::.ctor(System.Object,System.IntPtr)";
                public const string List_1_ctor_IEnumerable_1 = "System.Void System.Collections.Generic.List`1<System.String>::.ctor(System.Collections.Generic.IEnumerable`1<System.String>)";
                public const string PrefabSleeperVolume_ctor = "System.Void Prefab/PrefabSleeperVolume::.ctor()";
            }

            public const string writeToProperties = "System.Void Prefab::writeToProperties()";
            public static class writeToPropertiesInjects
            {
                public const string Boolean_ToString = "System.String System.Boolean::ToString()";
                public const string ValueWrapper_set_Item_String_String = "System.Void DynamicProperties/ValueWrapper::set_Item(System.String,System.String)";
                public const string Extensions_ToCultureInvariantString_Single = "System.String Extensions::ToCultureInvariantString(System.Single)";
                public const string ValueWrapper_Remove_String = "System.Void DynamicProperties/ValueWrapper::Remove(System.String)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<System.String>::get_Count()";
                public const string List_1_get_Item_Int32 = "System.String System.Collections.Generic.List`1<System.String>::get_Item(System.Int32)";
                public const string String_Concat_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String)";
                public const string Byte_ToString = "System.String System.Byte::ToString()";
                public const string Int32_ToString = "System.String System.Int32::ToString()";
                public const string Object_ToString = "System.String System.Object::ToString()";
                public const string Prefab_get_bSleeperVolumes = "System.Boolean Prefab::get_bSleeperVolumes()";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Prefab/PrefabSleeperVolume> System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::GetEnumerator()";
                public const string Enumerator_get_Current = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1/Enumerator<Prefab/PrefabSleeperVolume>::get_Current()";
                public const string StringBuilder_get_Length = "System.Int32 System.Text.StringBuilder::get_Length()";
                public const string StringBuilder_Append_Char = "System.Text.StringBuilder System.Text.StringBuilder::Append(System.Char)";
                public const string StringBuilder_Append_String = "System.Text.StringBuilder System.Text.StringBuilder::Append(System.String)";
                public const string StringBuilder_Append_Int16 = "System.Text.StringBuilder System.Text.StringBuilder::Append(System.Int16)";
                public const string Int16_ToString = "System.String System.Int16::ToString()";
                public const string Int32_ToString_String = "System.String System.Int32::ToString(System.String)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<Prefab/PrefabSleeperVolume>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string Vector3i_op_Inequality_Vector3i_Vector3i = "System.Boolean Vector3i::op_Inequality(Vector3i,Vector3i)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string String_get_Length = "System.Int32 System.String::get_Length()";
                public const string POITags_GetTagNames = "System.Collections.Generic.List`1<System.String> POITags::GetTagNames()";
                public const string POITags_Test_Bit_Int32 = "System.Boolean POITags::Test_Bit(System.Int32)";
                public const string String_op_Inequality_String_String = "System.Boolean System.String::op_Inequality(System.String,System.String)";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string DictionarySave_2_set_Item_T1_T2 = "System.Void DictionarySave`2<System.String,DynamicProperties>::set_Item(System.String,DynamicProperties)";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Collections.Generic.List`1<Vector3i>> System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>>::GetEnumerator()";
                public const string KeyValuePair_2_get_Value = "System.Collections.Generic.List`1<Vector3i> System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Value()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Key()";
                public const string DictionarySave_2_Remove_T1 = "System.Void DictionarySave`2<System.String,DynamicProperties>::Remove(System.String)";
                public const string IEnumerable_1_GetEnumerator = "System.Collections.Generic.IEnumerator`1<QuestTags> System.Collections.Generic.IEnumerable`1<QuestTags>::GetEnumerator()";
                public const string IEnumerator_1_get_Current = "QuestTags System.Collections.Generic.IEnumerator`1<QuestTags>::get_Current()";
                public const string IEnumerator_MoveNext = "System.Boolean System.Collections.IEnumerator::MoveNext()";
                public const string String_Remove_Int32 = "System.String System.String::Remove(System.Int32)";
                public const string WorldStats_ToProperties = "DynamicProperties WorldStats::ToProperties()";
                public const string properties = "DynamicProperties Prefab::properties";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string bCopyAirBlocks = "System.Boolean Prefab::bCopyAirBlocks";
                public const string bExcludeDistantPOIMesh = "System.Boolean Prefab::bExcludeDistantPOIMesh";
                public const string bExcludePOICulling = "System.Boolean Prefab::bExcludePOICulling";
                public const string distantPOIYOffset = "System.Single Prefab::distantPOIYOffset";
                public const string distantPOIOverride = "System.String Prefab::distantPOIOverride";
                public const string editorGroups = "System.Collections.Generic.List`1<System.String> Prefab::editorGroups";
                public const string Empty = "System.String System.String::Empty";
                public const string bAllowTopSoilDecorations = "System.Boolean Prefab::bAllowTopSoilDecorations";
                public const string DifficultyTier = "System.Byte Prefab::DifficultyTier";
                public const string ShowQuestClearCount = "System.Int32 Prefab::ShowQuestClearCount";
                public const string bTraderArea = "System.Boolean Prefab::bTraderArea";
                public const string TraderAreaTeleportSize = "Vector3i Prefab::TraderAreaTeleportSize";
                public const string TraderAreaTeleportCenter = "Vector3i Prefab::TraderAreaTeleportCenter";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string used = "System.Boolean Prefab/PrefabSleeperVolume::used";
                public const string size = "Vector3i Prefab/PrefabSleeperVolume::size";
                public const string startPos = "Vector3i Prefab/PrefabSleeperVolume::startPos";
                public const string groupId = "System.Int16 Prefab/PrefabSleeperVolume::groupId";
                public const string groupName = "System.String Prefab/PrefabSleeperVolume::groupName";
                public const string spawnCountMin = "System.Int16 Prefab/PrefabSleeperVolume::spawnCountMin";
                public const string spawnCountMax = "System.Int16 Prefab/PrefabSleeperVolume::spawnCountMax";
                public const string isPriority = "System.Boolean Prefab/PrefabSleeperVolume::isPriority";
                public const string isQuestExclude = "System.Boolean Prefab/PrefabSleeperVolume::isQuestExclude";
                public const string flags = "System.Int32 Prefab/PrefabSleeperVolume::flags";
                public const string yOffset = "System.Int32 Prefab::yOffset";
                public const string rotationToFaceNorth = "System.Int32 Prefab::rotationToFaceNorth";
                public const string StaticSpawnerClass = "System.String Prefab::StaticSpawnerClass";
                public const string StaticSpawnerSize = "Vector3i Prefab::StaticSpawnerSize";
                public const string zero = "Vector3i Vector3i::zero";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string StaticSpawnerTrigger = "System.Int32 Prefab::StaticSpawnerTrigger";
                public const string allowedTownships = "System.Collections.Generic.List`1<System.String> Prefab::allowedTownships";
                public const string allowedBiomes = "System.Collections.Generic.List`1<System.String> Prefab::allowedBiomes";
                public const string tags = "POITags Prefab::tags";
                public const string indexedBlockOffsets = "System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>> Prefab::indexedBlockOffsets";
                public const string _9_115_0 = "System.Func`2<System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.List`1<Vector3i>>,System.Boolean> Prefab/<>c::<>9__115_0";
                public const string _9 = "Prefab/<>c Prefab/<>c::<>9";
                public const string Classes = "DictionarySave`2<System.String,DynamicProperties> DynamicProperties::Classes";
                public const string questTags = "QuestTags Prefab::questTags";
                public const string allowedZones = "System.Collections.Generic.List`1<System.String> Prefab::allowedZones";
                public const string renderingCost = "WorldStats Prefab::renderingCost";
                public const string StringBuilder_ctor = "System.Void System.Text.StringBuilder::.ctor()";
                public const string Func_2_ctor_Object_IntPtr = "System.Void System.Func`2<System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.List`1<Vector3i>>,System.Boolean>::.ctor(System.Object,System.IntPtr)";
                public const string DynamicProperties_ctor = "System.Void DynamicProperties::.ctor()";
            }

            public const string PrefabExists = "System.Boolean Prefab::PrefabExists(System.String)";
            public static class PrefabExistsInjects
            {
                public const string PathAbstractions_GetLocation_SearchPaths_String_String_String = "PathAbstractions/AbstractedLocation PathAbstractions::GetLocation(PathAbstractions/SearchPaths,System.String,System.String,System.String)";
                public const string PrefabsSearchPaths = "PathAbstractions/SearchPaths PathAbstractions::PrefabsSearchPaths";
                public const string Type = "PathAbstractions/EAbstractedLocationType PathAbstractions/AbstractedLocation::Type";
            }

            public const string Load_String_Boolean_Boolean_Boolean = "System.Boolean Prefab::Load(System.String,System.Boolean,System.Boolean,System.Boolean)";
            public static class Load_String_Boolean_Boolean_BooleanInjects
            {
                public const string PathAbstractions_GetLocation_SearchPaths_String_String_String = "PathAbstractions/AbstractedLocation PathAbstractions::GetLocation(PathAbstractions/SearchPaths,System.String,System.String,System.String)";
                public const string Prefab_Load_AbstractedLocation_Boolean_Boolean_Boolean = "System.Boolean Prefab::Load(PathAbstractions/AbstractedLocation,System.Boolean,System.Boolean,System.Boolean)";
                public const string PrefabsSearchPaths = "PathAbstractions/SearchPaths PathAbstractions::PrefabsSearchPaths";
            }

            public const string Load_AbstractedLocation_Boolean_Boolean_Boolean = "System.Boolean Prefab::Load(PathAbstractions/AbstractedLocation,System.Boolean,System.Boolean,System.Boolean)";
            public static class Load_AbstractedLocation_Boolean_Boolean_BooleanInjects
            {
                public const string ConnectionManager_get_IsClient = "System.Boolean ConnectionManager::get_IsClient()";
                public const string Log_Warning_String_Object_ = "System.Void Log::Warning(System.String,System.Object[])";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Prefab_loadBlockData_AbstractedLocation_Boolean_Boolean_Boolean = "System.Boolean Prefab::loadBlockData(PathAbstractions/AbstractedLocation,System.Boolean,System.Boolean,System.Boolean)";
                public const string Prefab_LoadXMLData_AbstractedLocation = "System.Boolean Prefab::LoadXMLData(PathAbstractions/AbstractedLocation)";
                public const string Type = "PathAbstractions/EAbstractedLocationType PathAbstractions/AbstractedLocation::Type";
                public const string Instance = "ConnectionManager SingletonMonoBehaviour`1<ConnectionManager>::Instance";
                public const string Name = "System.String PathAbstractions/AbstractedLocation::Name";
                public const string location = "PathAbstractions/AbstractedLocation Prefab::location";
            }

            public const string loadBlockData = "System.Boolean Prefab::loadBlockData(PathAbstractions/AbstractedLocation,System.Boolean,System.Boolean,System.Boolean)";
            public static class loadBlockDataInjects
            {
                public const string Prefab_loadIdMapping_String_String_Boolean = "ArrayListMP`1<System.Int32> Prefab::loadIdMapping(System.String,System.String,System.Boolean)";
                public const string AbstractedLocation_get_FullPath = "System.String PathAbstractions/AbstractedLocation::get_FullPath()";
                public const string File_OpenRead_String = "System.IO.FileStream System.IO.File::OpenRead(System.String)";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "PooledBinaryReader MemoryPooledObject`1<PooledBinaryReader>::AllocSync(System.Boolean)";
                public const string PooledBinaryReader_SetBaseStream_Stream = "System.Void PooledBinaryReader::SetBaseStream(System.IO.Stream)";
                public const string BinaryReader_ReadChar = "System.Char System.IO.BinaryReader::ReadChar()";
                public const string BinaryReader_ReadUInt32 = "System.UInt32 System.IO.BinaryReader::ReadUInt32()";
                public const string Prefab_readBlockData_PooledBinaryReader_UInt32_Int32_ = "System.Boolean Prefab::readBlockData(PooledBinaryReader,System.UInt32,System.Int32[])";
                public const string Prefab_readTileEntities_PooledBinaryReader = "System.Void Prefab::readTileEntities(PooledBinaryReader)";
                public const string Prefab_removeAllChildBlocks = "System.Void Prefab::removeAllChildBlocks()";
                public const string Prefab_addAllChildBlocks = "System.Void Prefab::addAllChildBlocks()";
                public const string AbstractedLocation_get_FullPathNoExtension = "System.String PathAbstractions/AbstractedLocation::get_FullPathNoExtension()";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string PrefabInsideDataFile_Load_String = "System.Void PrefabInsideDataFile::Load(System.String)";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string Log_Exception_Exception = "System.Void Log::Exception(System.Exception)";
                public const string Folder = "System.String PathAbstractions/AbstractedLocation::Folder";
                public const string FileNameNoExtension = "System.String PathAbstractions/AbstractedLocation::FileNameNoExtension";
                public const string poolBinaryReader = "MemoryPooledObject`1<PooledBinaryReader> MemoryPools::poolBinaryReader";
                public const string Items = "System.Int32[] ArrayListMP`1<System.Int32>::Items";
                public const string insidePos = "PrefabInsideDataFile Prefab::insidePos";
            }

            public const string LoadXMLData = "System.Boolean Prefab::LoadXMLData(PathAbstractions/AbstractedLocation)";
            public static class LoadXMLDataInjects
            {
                public const string AbstractedLocation_get_FullPathNoExtension = "System.String PathAbstractions/AbstractedLocation::get_FullPathNoExtension()";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string Utils_FileExists_String = "System.Boolean Utils::FileExists(System.String)";
                public const string DynamicProperties_Load_String_String_Boolean = "System.Boolean DynamicProperties::Load(System.String,System.String,System.Boolean)";
                public const string Prefab_readFromProperties = "System.Void Prefab::readFromProperties()";
                public const string location = "PathAbstractions/AbstractedLocation Prefab::location";
                public const string properties = "DynamicProperties Prefab::properties";
                public const string Folder = "System.String PathAbstractions/AbstractedLocation::Folder";
                public const string Name = "System.String PathAbstractions/AbstractedLocation::Name";
            }

            public const string Save_String_Boolean = "System.Boolean Prefab::Save(System.String,System.Boolean)";
            public static class Save_String_BooleanInjects
            {
                public const string PathAbstractions_GetLocation_SearchPaths_String_String_String = "PathAbstractions/AbstractedLocation PathAbstractions::GetLocation(PathAbstractions/SearchPaths,System.String,System.String,System.String)";
                public const string Prefab_Save_AbstractedLocation_Boolean = "System.Boolean Prefab::Save(PathAbstractions/AbstractedLocation,System.Boolean)";
                public const string PrefabsSearchPaths = "PathAbstractions/SearchPaths PathAbstractions::PrefabsSearchPaths";
            }

            public const string Save_AbstractedLocation_Boolean = "System.Boolean Prefab::Save(PathAbstractions/AbstractedLocation,System.Boolean)";
            public static class Save_AbstractedLocation_BooleanInjects
            {
                public const string Prefab_saveBlockData_AbstractedLocation_Boolean = "System.Boolean Prefab::saveBlockData(PathAbstractions/AbstractedLocation,System.Boolean)";
                public const string Prefab_SaveXMLData_AbstractedLocation = "System.Boolean Prefab::SaveXMLData(PathAbstractions/AbstractedLocation)";
            }

            public const string addAllChildBlocks = "System.Void Prefab::addAllChildBlocks()";
            public static class addAllChildBlocksInjects
            {
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string MultiBlockArray_Get_Int32_Int32_Int32 = "Vector3i Block/MultiBlockArray::Get(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_set_ischild_Boolean = "System.Void BlockValue::set_ischild(System.Boolean)";
                public const string BlockValue_set_parentx_Int32 = "System.Void BlockValue::set_parentx(System.Int32)";
                public const string BlockValue_set_parenty_Int32 = "System.Void BlockValue::set_parenty(System.Int32)";
                public const string BlockValue_set_parentz_Int32 = "System.Void BlockValue::set_parentz(System.Int32)";
                public const string Prefab_offsetToCoord_Int32_Int32_Int32_Int32_ = "System.Void Prefab::offsetToCoord(System.Int32,System.Int32&,System.Int32&,System.Int32&)";
                public const string Prefab_SetBlockNoDamage_Int32_Int32_Int32_BlockValue = "System.Void Prefab::SetBlockNoDamage(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string list = "Block[] Block::list";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string Length = "System.Int32 Block/MultiBlockArray::Length";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string size = "Vector3i Prefab::size";
            }

            public const string removeAllChildBlocks = "System.Void Prefab::removeAllChildBlocks()";
            public static class removeAllChildBlocksInjects
            {
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockValue_get_meta = "System.Byte BlockValue::get_meta()";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string list = "Block[] Block::list";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string SaveXMLData = "System.Boolean Prefab::SaveXMLData(PathAbstractions/AbstractedLocation)";
            public static class SaveXMLDataInjects
            {
                public const string Prefab_writeToProperties = "System.Void Prefab::writeToProperties()";
                public const string DynamicProperties_Save_String_String_String = "System.Boolean DynamicProperties::Save(System.String,System.String,System.String)";
                public const string properties = "DynamicProperties Prefab::properties";
                public const string Folder = "System.String PathAbstractions/AbstractedLocation::Folder";
                public const string FileNameNoExtension = "System.String PathAbstractions/AbstractedLocation::FileNameNoExtension";
            }

            public const string saveBlockData = "System.Boolean Prefab::saveBlockData(PathAbstractions/AbstractedLocation,System.Boolean)";
            public static class saveBlockDataInjects
            {
                public const string Prefab_removeAllChildBlocks = "System.Void Prefab::removeAllChildBlocks()";
                public const string AbstractedLocation_get_FullPathNoExtension = "System.String PathAbstractions/AbstractedLocation::get_FullPathNoExtension()";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string NameIdMapping_AddMapping_Int32_String_Boolean = "System.Void NameIdMapping::AddMapping(System.Int32,System.String,System.Boolean)";
                public const string NameIdMapping_WriteToFile = "System.Void NameIdMapping::WriteToFile()";
                public const string AbstractedLocation_get_FullPath = "System.String PathAbstractions/AbstractedLocation::get_FullPath()";
                public const string File_Open_String_FileMode = "System.IO.FileStream System.IO.File::Open(System.String,System.IO.FileMode)";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "PooledBinaryWriter MemoryPooledObject`1<PooledBinaryWriter>::AllocSync(System.Boolean)";
                public const string PooledBinaryWriter_SetBaseStream_Stream = "System.Void PooledBinaryWriter::SetBaseStream(System.IO.Stream)";
                public const string BinaryWriter_Write_Char = "System.Void System.IO.BinaryWriter::Write(System.Char)";
                public const string BinaryWriter_Write_Byte = "System.Void System.IO.BinaryWriter::Write(System.Byte)";
                public const string BinaryWriter_Write_UInt32 = "System.Void System.IO.BinaryWriter::Write(System.UInt32)";
                public const string Prefab_writeBlockData_BinaryWriter = "System.Void Prefab::writeBlockData(System.IO.BinaryWriter)";
                public const string Prefab_writeTileEntities_BinaryWriter = "System.Void Prefab::writeTileEntities(System.IO.BinaryWriter)";
                public const string Prefab_IsCullThisPrefab = "System.Boolean Prefab::IsCullThisPrefab()";
                public const string PrefabInsideDataFile_Save_String = "System.Void PrefabInsideDataFile::Save(System.String)";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string Log_Exception_Exception = "System.Void Log::Exception(System.Exception)";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string blockID = "System.Int32 Block::blockID";
                public const string poolBinaryWriter = "MemoryPooledObject`1<PooledBinaryWriter> MemoryPools::poolBinaryWriter";
                public const string CurrentSaveVersion = "System.Int32 Prefab::CurrentSaveVersion";
                public const string insidePos = "PrefabInsideDataFile Prefab::insidePos";
                public const string NameIdMapping_ctor_String_Int32 = "System.Void NameIdMapping::.ctor(System.String,System.Int32)";
            }

            public const string IsCullThisPrefab = "System.Boolean Prefab::IsCullThisPrefab()";
            public static class IsCullThisPrefabInjects
            {
                public const string bExcludePOICulling = "System.Boolean Prefab::bExcludePOICulling";
            }

            public const string writeBlockData = "System.Void Prefab::writeBlockData(System.IO.BinaryWriter)";
            public static class writeBlockDataInjects
            {
                public const string BinaryWriter_Write_Int16 = "System.Void System.IO.BinaryWriter::Write(System.Int16)";
                public const string BinaryWriter_Write_UInt32 = "System.Void System.IO.BinaryWriter::Write(System.UInt32)";
                public const string BinaryWriter_Write_Byte_ = "System.Void System.IO.BinaryWriter::Write(System.Byte[])";
                public const string SimpleBitStream_Add_Boolean = "System.Void SimpleBitStream::Add(System.Boolean)";
                public const string SimpleBitStream_Write_BinaryWriter = "System.Void SimpleBitStream::Write(System.IO.BinaryWriter)";
                public const string BinaryWriter_Write_Int64 = "System.Void System.IO.BinaryWriter::Write(System.Int64)";
                public const string size = "Vector3i Prefab::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string rawData = "System.UInt32 BlockValue::rawData";
                public const string m_Density = "System.Byte[] Prefab::m_Density";
                public const string m_Damage = "System.UInt16[] Prefab::m_Damage";
                public const string m_Textures = "System.Int64[] Prefab::m_Textures";
                public const string SimpleBitStream_ctor_Int32 = "System.Void SimpleBitStream::.ctor(System.Int32)";
            }

            public const string writeTileEntities = "System.Void Prefab::writeTileEntities(System.IO.BinaryWriter)";
            public static class writeTileEntitiesInjects
            {
                public const string Dictionary_2_get_Count = "System.Int32 System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::get_Count()";
                public const string BinaryWriter_Write_Int16 = "System.Void System.IO.BinaryWriter::Write(System.Int16)";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<Vector3i,TileEntity> System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<Vector3i,TileEntity> System.Collections.Generic.Dictionary`2/Enumerator<Vector3i,TileEntity>::get_Current()";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "PooledExpandableMemoryStream MemoryPooledObject`1<PooledExpandableMemoryStream>::AllocSync(System.Boolean)";
                public const string PooledBinaryWriter_SetBaseStream_Stream = "System.Void PooledBinaryWriter::SetBaseStream(System.IO.Stream)";
                public const string KeyValuePair_2_get_Value = "TileEntity System.Collections.Generic.KeyValuePair`2<Vector3i,TileEntity>::get_Value()";
                public const string TileEntity_write_PooledBinaryWriter_StreamModeWrite = "System.Void TileEntity::write(PooledBinaryWriter,TileEntity/StreamModeWrite)";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string Stream_get_Length = "System.Int64 System.IO.Stream::get_Length()";
                public const string TileEntity_GetTileEntityType = "TileEntityType TileEntity::GetTileEntityType()";
                public const string BinaryWriter_Write_Byte = "System.Void System.IO.BinaryWriter::Write(System.Byte)";
                public const string BinaryWriter_get_BaseStream = "System.IO.Stream System.IO.BinaryWriter::get_BaseStream()";
                public const string MemoryStream_WriteTo_Stream = "System.Void System.IO.MemoryStream::WriteTo(System.IO.Stream)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<Vector3i,TileEntity>::MoveNext()";
                public const string tileEntities = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> Prefab::tileEntities";
                public const string poolMemoryStream = "MemoryPooledObject`1<PooledExpandableMemoryStream> MemoryPools::poolMemoryStream";
                public const string poolBinaryWriter = "MemoryPooledObject`1<PooledBinaryWriter> MemoryPools::poolBinaryWriter";
            }

            public const string readBlockData = "System.Boolean Prefab::readBlockData(PooledBinaryReader,System.UInt32,System.Int32[])";
            public static class readBlockDataInjects
            {
                public const string BlockStatistics_Clear = "System.Void Prefab/BlockStatistics::Clear()";
                public const string BinaryReader_ReadInt16 = "System.Int16 System.IO.BinaryReader::ReadInt16()";
                public const string BinaryReader_ReadBoolean = "System.Boolean System.IO.BinaryReader::ReadBoolean()";
                public const string BinaryReader_ReadUInt32 = "System.UInt32 System.IO.BinaryReader::ReadUInt32()";
                public const string BlockValue_ctor_UInt32 = "System.Void BlockValue::.ctor(System.UInt32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string BlockValue_set_type_Int32 = "System.Void BlockValue::set_type(System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Vector3i>::Add(Vector3i)";
                public const string Prefab_SetBlock_Int32_Int32_Int32_BlockValue = "System.Void Prefab::SetBlock(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string BlockValue_ConvertOldRawData_1_UInt32 = "System.UInt32 BlockValue::ConvertOldRawData_1(System.UInt32)";
                public const string BlockValue_ConvertOldRawData_2_UInt32 = "System.UInt32 BlockValue::ConvertOldRawData_2(System.UInt32)";
                public const string Prefab_offsetToCoord_Int32_Int32_Int32_Int32_ = "System.Void Prefab::offsetToCoord(System.Int32,System.Int32&,System.Int32&,System.Int32&)";
                public const string Prefab_updateBlockStatistics_BlockValue = "System.Void Prefab::updateBlockStatistics(BlockValue)";
                public const string BinaryReader_ReadBytes_Int32 = "System.Byte[] System.IO.BinaryReader::ReadBytes(System.Int32)";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Vector3i> System.Collections.Generic.List`1<Vector3i>::GetEnumerator()";
                public const string Enumerator_get_Current = "Vector3i System.Collections.Generic.List`1/Enumerator<Vector3i>::get_Current()";
                public const string Prefab_SetDensity_Int32_Int32_Int32_SByte = "System.SByte Prefab::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<Vector3i>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string Utils_FastMax_Int32_Int32 = "System.Int32 Utils::FastMax(System.Int32,System.Int32)";
                public const string BinaryReader_Read_Byte_Int32_Int32 = "System.Int32 System.IO.BinaryReader::Read(System.Byte[],System.Int32,System.Int32)";
                public const string SimpleBitStream_Reset = "System.Void SimpleBitStream::Reset()";
                public const string SimpleBitStream_Read_BinaryReader = "System.Void SimpleBitStream::Read(System.IO.BinaryReader)";
                public const string SimpleBitStream_GetNext = "System.Boolean SimpleBitStream::GetNext()";
                public const string BinaryReader_ReadInt64 = "System.Int64 System.IO.BinaryReader::ReadInt64()";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Clear()";
                public const string EntityCreationData_read_PooledBinaryReader_Boolean = "System.Void EntityCreationData::read(PooledBinaryReader,System.Boolean)";
                public const string statistics = "Prefab/BlockStatistics Prefab::statistics";
                public const string size = "Vector3i Prefab::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string bCopyAirBlocks = "System.Boolean Prefab::bCopyAirBlocks";
                public const string bAllowTopSoilDecorations = "System.Boolean Prefab::bAllowTopSoilDecorations";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string blockTypeMissingBlock = "System.Int32 Prefab::blockTypeMissingBlock";
                public const string location = "PathAbstractions/AbstractedLocation Prefab::location";
                public const string m_Density = "System.Byte[] Prefab::m_Density";
                public const string DensityAir = "System.SByte MarchingCubes::DensityAir";
                public const string m_Damage = "System.UInt16[] Prefab::m_Damage";
                public const string tempBuf = "System.Byte[] Prefab::tempBuf";
                public const string m_Textures = "System.Int64[] Prefab::m_Textures";
                public const string bsTex = "SimpleBitStream Prefab::bsTex";
                public const string entities = "System.Collections.Generic.List`1<EntityCreationData> Prefab::entities";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Vector3i>::.ctor()";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string EntityCreationData_ctor = "System.Void EntityCreationData::.ctor()";
            }

            public const string readTileEntities = "System.Void Prefab::readTileEntities(PooledBinaryReader)";
            public static class readTileEntitiesInjects
            {
                public const string Dictionary_2_Clear = "System.Void System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::Clear()";
                public const string BinaryReader_ReadInt16 = "System.Int16 System.IO.BinaryReader::ReadInt16()";
                public const string BinaryReader_ReadByte = "System.Byte System.IO.BinaryReader::ReadByte()";
                public const string TileEntity_Instantiate_TileEntityType_Chunk = "TileEntity TileEntity::Instantiate(TileEntityType,Chunk)";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "PooledExpandableMemoryStream MemoryPooledObject`1<PooledExpandableMemoryStream>::AllocSync(System.Boolean)";
                public const string BinaryReader_get_BaseStream = "System.IO.Stream System.IO.BinaryReader::get_BaseStream()";
                public const string Utils_StreamCopy_Stream_Stream_Int32_Byte_Boolean = "System.Void Utils::StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32,System.Byte[],System.Boolean)";
                public const string Stream_set_Position_Int64 = "System.Void System.IO.Stream::set_Position(System.Int64)";
                public const string PooledBinaryReader_SetBaseStream_Stream = "System.Void PooledBinaryReader::SetBaseStream(System.IO.Stream)";
                public const string TileEntity_read_PooledBinaryReader_StreamModeRead = "System.Void TileEntity::read(PooledBinaryReader,TileEntity/StreamModeRead)";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string TileEntity_get_localChunkPos = "Vector3i TileEntity::get_localChunkPos()";
                public const string Dictionary_2_Add_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::Add(Vector3i,TileEntity)";
                public const string String_Format_String_Object = "System.String System.String::Format(System.String,System.Object)";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Log_Exception_Exception = "System.Void Log::Exception(System.Exception)";
                public const string tileEntities = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> Prefab::tileEntities";
                public const string poolMemoryStream = "MemoryPooledObject`1<PooledExpandableMemoryStream> MemoryPools::poolMemoryStream";
                public const string poolBinaryReader = "MemoryPooledObject`1<PooledBinaryReader> MemoryPools::poolBinaryReader";
                public const string PrefabName = "System.String Prefab::PrefabName";
            }

            public const string RotateY = "System.Void Prefab::RotateY(System.Boolean,System.Int32)";
            public static class RotateYInjects
            {
                public const string Prefab_removeAllChildBlocks = "System.Void Prefab::removeAllChildBlocks()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockShape_RotateY_Boolean_BlockValue_Int32 = "BlockValue BlockShape::RotateY(System.Boolean,BlockValue,System.Int32)";
                public const string List_1_get_Item_Int32 = "EntityCreationData System.Collections.Generic.List`1<EntityCreationData>::get_Item(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<EntityCreationData>::get_Count()";
                public const string Prefab_Swap_Int32_Int32_ = "System.Void Prefab::Swap(System.Int32&,System.Int32&)";
                public const string Prefab_RotatePointOnY_Boolean_Vector3i_ = "System.Void Prefab::RotatePointOnY(System.Boolean,Vector3i&)";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Collections.Generic.List`1<Vector3i>> System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.List`1<Vector3i>> System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Current()";
                public const string KeyValuePair_2_get_Value = "System.Collections.Generic.List`1<Vector3i> System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Value()";
                public const string List_1_set_Item_Int32_T = "System.Void System.Collections.Generic.List`1<Vector3i>::set_Item(System.Int32,Vector3i)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Collections.Generic.List`1<Vector3i>>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string Prefab_get_bSleeperVolumes = "System.Boolean Prefab::get_bSleeperVolumes()";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_addAllChildBlocks = "System.Void Prefab::addAllChildBlocks()";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string list = "Block[] Block::list";
                public const string shape = "BlockShape Block::shape";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string entities = "System.Collections.Generic.List`1<EntityCreationData> Prefab::entities";
                public const string size = "Vector3i Prefab::size";
                public const string z = "System.Int32 Vector3i::z";
                public const string pos = "UnityEngine.Vector3 EntityCreationData::pos";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string rot = "UnityEngine.Vector3 EntityCreationData::rot";
                public const string TraderAreaTeleportSize = "Vector3i Prefab::TraderAreaTeleportSize";
                public const string TraderAreaProtect = "Vector3i Prefab::TraderAreaProtect";
                public const string TraderAreaTeleportCenter = "Vector3i Prefab::TraderAreaTeleportCenter";
                public const string indexedBlockOffsets = "System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>> Prefab::indexedBlockOffsets";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string startPos = "Vector3i Prefab/PrefabSleeperVolume::startPos";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string RotatePointOnY = "System.Void Prefab::RotatePointOnY(System.Boolean,Vector3i&)";
            public static class RotatePointOnYInjects
            {
                public const string Vector3_get_up = "UnityEngine.Vector3 UnityEngine.Vector3::get_up()";
                public const string Quaternion_AngleAxis_Single_Vector3 = "UnityEngine.Quaternion UnityEngine.Quaternion::AngleAxis(System.Single,UnityEngine.Vector3)";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Quaternion_op_Multiply_Quaternion_Vector3 = "UnityEngine.Vector3 UnityEngine.Quaternion::op_Multiply(UnityEngine.Quaternion,UnityEngine.Vector3)";
                public const string Mathf_RoundToInt_Single = "System.Int32 UnityEngine.Mathf::RoundToInt(System.Single)";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string Swap = "System.Void Prefab::Swap(System.Int32&,System.Int32&)";
            public const string Replace_BlockValue_BlockValue_Boolean_Int32_Int32 = "System.Void Prefab::Replace(BlockValue,BlockValue,System.Boolean,System.Int32,System.Int32)";
            public static class Replace_BlockValue_BlockValue_Boolean_Int32_Int32Injects
            {
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string Prefab_GetTexture_Int32_Int32_Int32 = "System.Int64 Prefab::GetTexture(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_hasTexture_Int64_Int32 = "System.Boolean Prefab::hasTexture(System.Int64,System.Int32)";
                public const string BlockValue_set_rotation_Byte = "System.Void BlockValue::set_rotation(System.Byte)";
                public const string BlockValue_get_meta = "System.Byte BlockValue::get_meta()";
                public const string BlockValue_set_meta_Byte = "System.Void BlockValue::set_meta(System.Byte)";
                public const string Prefab_SetBlock_Int32_Int32_Int32_BlockValue = "System.Void Prefab::SetBlock(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string Prefab_GetDensity_Int32_Int32_Int32 = "System.SByte Prefab::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_SetDensity_Int32_Int32_Int32_SByte = "System.SByte Prefab::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string list = "Block[] Block::list";
                public const string shape = "BlockShape Block::shape";
                public const string DensityTerrain = "System.SByte MarchingCubes::DensityTerrain";
                public const string DensityAir = "System.SByte MarchingCubes::DensityAir";
                public const string size = "Vector3i Prefab::size";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string x = "System.Int32 Vector3i::x";
            }

            public const string Replace_Int32_Int32_Int32 = "System.Void Prefab::Replace(System.Int32,System.Int32,System.Int32)";
            public static class Replace_Int32_Int32_Int32Injects
            {
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Prefab_GetTexture_Int32_Int32_Int32 = "System.Int64 Prefab::GetTexture(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_hasTexture_Int64_Int32 = "System.Boolean Prefab::hasTexture(System.Int64,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Prefab_SetTexture_Int32_Int32_Int32_Int64 = "System.Void Prefab::SetTexture(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string size = "Vector3i Prefab::size";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string x = "System.Int32 Vector3i::x";
            }

            public const string RemoveRotation = "System.Int32 Prefab::RemoveRotation(System.Int32)";
            public static class RemoveRotationInjects
            {
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Int32_ToString = "System.String System.Int32::ToString()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string list = "Block[] Block::list";
                public const string location = "PathAbstractions/AbstractedLocation Prefab::location";
                public const string size = "Vector3i Prefab::size";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string x = "System.Int32 Vector3i::x";
            }

            public const string hasTexture = "System.Boolean Prefab::hasTexture(System.Int64,System.Int32)";
            public const string Search_BlockValue_Boolean_Int32_Int32 = "System.Int32 Prefab::Search(BlockValue,System.Boolean,System.Int32,System.Int32)";
            public static class Search_BlockValue_Boolean_Int32_Int32Injects
            {
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string Prefab_GetTexture_Int32_Int32_Int32 = "System.Int64 Prefab::GetTexture(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_hasTexture_Int64_Int32 = "System.Boolean Prefab::hasTexture(System.Int64,System.Int32)";
                public const string size = "Vector3i Prefab::size";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string x = "System.Int32 Vector3i::x";
            }

            public const string Search_Int32_Int32 = "System.Int32 Prefab::Search(System.Int32,System.Int32)";
            public static class Search_Int32_Int32Injects
            {
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Prefab_GetTexture_Int32_Int32_Int32 = "System.Int64 Prefab::GetTexture(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_hasTexture_Int64_Int32 = "System.Boolean Prefab::hasTexture(System.Int64,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string size = "Vector3i Prefab::size";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string x = "System.Int32 Vector3i::x";
            }

            public const string CopyFrom = "System.Void Prefab::CopyFrom(Prefab,Vector3i)";
            public static class CopyFromInjects
            {
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_SetBlock_Int32_Int32_Int32_BlockValue = "System.Void Prefab::SetBlock(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string Prefab_GetDensity_Int32_Int32_Int32 = "System.SByte Prefab::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_SetDensity_Int32_Int32_Int32_SByte = "System.SByte Prefab::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string Prefab_GetTexture_Int32_Int32_Int32 = "System.Int64 Prefab::GetTexture(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_SetTexture_Int32_Int32_Int32_Int64 = "System.Void Prefab::SetTexture(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Math_Min_Int32_Int32 = "System.Int32 System.Math::Min(System.Int32,System.Int32)";
                public const string Prefab_writeToProperties = "System.Void Prefab::writeToProperties()";
                public const string Prefab_readFromProperties = "System.Void Prefab::readFromProperties()";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string size = "Vector3i Prefab::size";
                public const string properties = "DynamicProperties Prefab::properties";
            }

            public const string CopyIntoRPC = "System.Void Prefab::CopyIntoRPC(GameManager,Vector3i)";
            public static class CopyIntoRPCInjects
            {
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string WorldBase_GetBlock_Int32_Int32_Int32 = "BlockValue WorldBase::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<BlockChangeInfo>::Add(BlockChangeInfo)";
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_GetTexture_Int32_Int32_Int32 = "System.Int64 Prefab::GetTexture(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_GetDensity_Int32_Int32_Int32 = "System.SByte Prefab::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string Block_IsTileEntitySavedInPrefab = "System.Boolean Block::IsTileEntitySavedInPrefab()";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_GetTileEntity_Vector3i = "TileEntity Prefab::GetTileEntity(Vector3i)";
                public const string Dictionary_2_Add_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::Add(Vector3i,TileEntity)";
                public const string GameManager_SetBlocksRPC_List_1_String = "System.Void GameManager::SetBlocksRPC(System.Collections.Generic.List`1<BlockChangeInfo>,System.String)";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<Vector3i,TileEntity> System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<Vector3i,TileEntity> System.Collections.Generic.Dictionary`2/Enumerator<Vector3i,TileEntity>::get_Current()";
                public const string KeyValuePair_2_get_Key = "Vector3i System.Collections.Generic.KeyValuePair`2<Vector3i,TileEntity>::get_Key()";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string KeyValuePair_2_get_Value = "TileEntity System.Collections.Generic.KeyValuePair`2<Vector3i,TileEntity>::get_Value()";
                public const string TileEntity_Clone = "TileEntity TileEntity::Clone()";
                public const string WorldBase_GetChunkFromWorldPos_Vector3i = "IChunk WorldBase::GetChunkFromWorldPos(Vector3i)";
                public const string TileEntity_SetChunk_Chunk = "System.Void TileEntity::SetChunk(Chunk)";
                public const string World_toBlockXZ_Int32 = "System.Int32 World::toBlockXZ(System.Int32)";
                public const string World_toBlockY_Int32 = "System.Int32 World::toBlockY(System.Int32)";
                public const string TileEntity_set_localChunkPos_Vector3i = "System.Void TileEntity::set_localChunkPos(Vector3i)";
                public const string Chunk_AddTileEntity_TileEntity = "System.Void Chunk::AddTileEntity(TileEntity)";
                public const string TileEntity_get_localChunkPos = "Vector3i TileEntity::get_localChunkPos()";
                public const string TileEntity_CopyFrom_TileEntity = "System.Void TileEntity::CopyFrom(TileEntity)";
                public const string TileEntity_SetModified = "System.Void TileEntity::SetModified()";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<Vector3i,TileEntity>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string bCopyAirBlocks = "System.Boolean Prefab::bCopyAirBlocks";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string Air = "BlockValue BlockValue::Air";
                public const string size = "Vector3i Prefab::size";
                public const string list = "Block[] Block::list";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<BlockChangeInfo>::.ctor()";
                public const string BlockChangeInfo_ctor_Int32_Vector3i_BlockValue = "System.Void BlockChangeInfo::.ctor(System.Int32,Vector3i,BlockValue)";
                public const string Dictionary_2_ctor = "System.Void System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::.ctor()";
                public const string BlockChangeInfo_ctor_Int32_Vector3i_BlockValue_SByte_Int64 = "System.Void BlockChangeInfo::.ctor(System.Int32,Vector3i,BlockValue,System.SByte,System.Int64)";
            }

            public const string CountSleeperSpawnsInVolume = "System.Void Prefab::CountSleeperSpawnsInVolume(World,Vector3i,System.Int32)";
            public static class CountSleeperSpawnsInVolumeInjects
            {
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string WorldBase_GetBlock_Int32_Int32_Int32_Int32 = "BlockValue WorldBase::GetBlock(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string WorldBase_GetBlock_Int32_Int32_Int32 = "BlockValue WorldBase::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_IsPosInSleeperPriorityVolume_Vector3i_Int32 = "System.Boolean Prefab::IsPosInSleeperPriorityVolume(Vector3i,System.Int32)";
                public const string Transient_NumSleeperSpawns = "System.Int32 Prefab::Transient_NumSleeperSpawns";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string startPos = "Vector3i Prefab/PrefabSleeperVolume::startPos";
                public const string size = "Vector3i Prefab/PrefabSleeperVolume::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string list = "Block[] Block::list";
                public const string IsSleeperBlock = "System.Boolean Block::IsSleeperBlock";
            }

            public const string CopySleeperBlocksContainedInVolume = "System.Void Prefab::CopySleeperBlocksContainedInVolume(System.Int32,Vector3i,SleeperVolume,Vector3i,Vector3i)";
            public static class CopySleeperBlocksContainedInVolumeInjects
            {
                public const string Mathf_Max_Int32_Int32 = "System.Int32 UnityEngine.Mathf::Max(System.Int32,System.Int32)";
                public const string Mathf_Min_Int32_Int32 = "System.Int32 UnityEngine.Mathf::Min(System.Int32,System.Int32)";
                public const string Prefab_GetBlockNoDamage_Int32_Int32_Int32_Int32 = "BlockValue Prefab::GetBlockNoDamage(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_IsPosInSleeperPriorityVolume_Vector3i_Int32 = "System.Boolean Prefab::IsPosInSleeperPriorityVolume(Vector3i,System.Int32)";
                public const string SleeperVolume_AddSpawnPoint_Int32_Int32_Int32_BlockSleeper_BlockValue = "System.Void SleeperVolume::AddSpawnPoint(System.Int32,System.Int32,System.Int32,BlockSleeper,BlockValue)";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string size = "Vector3i Prefab::size";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string list = "Block[] Block::list";
                public const string IsSleeperBlock = "System.Boolean Block::IsSleeperBlock";
            }

            public const string CopySleeperVolumes = "System.Void Prefab::CopySleeperVolumes(WorldBase,Chunk,Vector3i)";
            public static class CopySleeperVolumesInjects
            {
                public const string Chunk_GetWorldPos = "Vector3i Chunk::GetWorldPos()";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string Vector3i_op_Subtraction_Vector3i_Vector3i = "Vector3i Vector3i::op_Subtraction(Vector3i,Vector3i)";
                public const string WorldBase_FindSleeperVolume_Vector3i_Vector3i = "System.Int32 WorldBase::FindSleeperVolume(Vector3i,Vector3i)";
                public const string SleeperVolume_Create_PrefabSleeperVolume_Vector3i_Vector3i = "SleeperVolume SleeperVolume::Create(Prefab/PrefabSleeperVolume,Vector3i,Vector3i)";
                public const string WorldBase_AddSleeperVolume_SleeperVolume = "System.Int32 WorldBase::AddSleeperVolume(SleeperVolume)";
                public const string Prefab_CopySleeperBlocksContainedInVolume_Int32_Vector3i_SleeperVolume_Vector3i_Vector3i = "System.Void Prefab::CopySleeperBlocksContainedInVolume(System.Int32,Vector3i,SleeperVolume,Vector3i,Vector3i)";
                public const string Chunk_GetSleeperVolumes = "System.Collections.Generic.List`1<System.Int32> Chunk::GetSleeperVolumes()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<System.Int32>::Add(System.Int32)";
                public const string World_toChunkXZ_Int32 = "System.Int32 World::toChunkXZ(System.Int32)";
                public const string WorldBase_GetChunkSync_Int32_Int32_Int32 = "IChunk WorldBase::GetChunkSync(System.Int32,System.Int32,System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Count()";
                public const string zero = "Vector3i Vector3i::zero";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string used = "System.Boolean Prefab/PrefabSleeperVolume::used";
                public const string startPos = "Vector3i Prefab/PrefabSleeperVolume::startPos";
                public const string size = "Vector3i Prefab/PrefabSleeperVolume::size";
                public const string chunkPadding = "Vector3i SleeperVolume::chunkPadding";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string FindSleeperVolume = "Prefab/PrefabSleeperVolume Prefab::FindSleeperVolume(Vector3i)";
            public static class FindSleeperVolumeInjects
            {
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string Prefab_IsPosInSleeperVolume_PrefabSleeperVolume_Vector3i = "System.Boolean Prefab::IsPosInSleeperVolume(Prefab/PrefabSleeperVolume,Vector3i)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Count()";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string used = "System.Boolean Prefab/PrefabSleeperVolume::used";
                public const string isPriority = "System.Boolean Prefab/PrefabSleeperVolume::isPriority";
            }

            public const string IsPosInSleeperPriorityVolume = "System.Boolean Prefab::IsPosInSleeperPriorityVolume(Vector3i,System.Int32)";
            public static class IsPosInSleeperPriorityVolumeInjects
            {
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string Prefab_IsPosInSleeperVolume_PrefabSleeperVolume_Vector3i = "System.Boolean Prefab::IsPosInSleeperVolume(Prefab/PrefabSleeperVolume,Vector3i)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Count()";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string used = "System.Boolean Prefab/PrefabSleeperVolume::used";
                public const string isPriority = "System.Boolean Prefab/PrefabSleeperVolume::isPriority";
            }

            public const string IsPosInSleeperVolume = "System.Boolean Prefab::IsPosInSleeperVolume(Prefab/PrefabSleeperVolume,Vector3i)";
            public static class IsPosInSleeperVolumeInjects
            {
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string used = "System.Boolean Prefab/PrefabSleeperVolume::used";
                public const string startPos = "Vector3i Prefab/PrefabSleeperVolume::startPos";
                public const string size = "Vector3i Prefab/PrefabSleeperVolume::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
            }

            public const string MoveSleeperVolumes = "System.Void Prefab::MoveSleeperVolumes(Vector3i)";
            public static class MoveSleeperVolumesInjects
            {
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Count()";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string startPos = "Vector3i Prefab/PrefabSleeperVolume::startPos";
            }

            public const string TransientSleeperBlockIncrement = "System.Void Prefab::TransientSleeperBlockIncrement(Vector3i,System.Int32)";
            public static class TransientSleeperBlockIncrementInjects
            {
                public const string XUiC_WoPropsSleeperVolume_get_selectedVolumeIndex = "System.Int32 XUiC_WoPropsSleeperVolume::get_selectedVolumeIndex()";
                public const string XUiC_WoPropsSleeperVolume_get_selectedPrefabInstance = "PrefabInstance XUiC_WoPropsSleeperVolume::get_selectedPrefabInstance()";
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string Vector3i_op_Subtraction_Vector3i_Vector3i = "Vector3i Vector3i::op_Subtraction(Vector3i,Vector3i)";
                public const string Prefab_IsPosInSleeperVolume_PrefabSleeperVolume_Vector3i = "System.Boolean Prefab::IsPosInSleeperVolume(Prefab/PrefabSleeperVolume,Vector3i)";
                public const string prefab = "Prefab PrefabInstance::prefab";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string boundingBoxPosition = "Vector3i PrefabInstance::boundingBoxPosition";
                public const string Transient_NumSleeperSpawns = "System.Int32 Prefab::Transient_NumSleeperSpawns";
            }

            public const string CalcSleeperInfo = "System.String Prefab::CalcSleeperInfo()";
            public static class CalcSleeperInfoInjects
            {
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Count()";
                public const string String_Format_String_Object_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object,System.Object)";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string spawnCountMin = "System.Int16 Prefab/PrefabSleeperVolume::spawnCountMin";
                public const string spawnCountMax = "System.Int16 Prefab/PrefabSleeperVolume::spawnCountMax";
            }

            public const string CopyIntoLocal = "System.Void Prefab::CopyIntoLocal(ChunkCluster,Vector3i,System.Boolean,System.Boolean,QuestTags)";
            public static class CopyIntoLocalInjects
            {
                public const string ChunkCluster_GetWorld = "WorldBase ChunkCluster::GetWorld()";
                public const string WorldBase_IsEditor = "System.Boolean WorldBase::IsEditor()";
                public const string Prefab_CopySleeperVolumes_WorldBase_Chunk_Vector3i = "System.Void Prefab::CopySleeperVolumes(WorldBase,Chunk,Vector3i)";
                public const string World_toChunkXZ_Int32 = "System.Int32 World::toChunkXZ(System.Int32)";
                public const string WorldChunkCache_GetChunkSync_Int32_Int32 = "Chunk WorldChunkCache::GetChunkSync(System.Int32,System.Int32)";
                public const string Chunk_get_X = "System.Int32 Chunk::get_X()";
                public const string Chunk_get_Z = "System.Int32 Chunk::get_Z()";
                public const string World_get_Seed = "System.Int32 World::get_Seed()";
                public const string Utils_RandomFromSeedOnPos_Int32_Int32_Int32 = "GameRandom Utils::RandomFromSeedOnPos(System.Int32,System.Int32,System.Int32)";
                public const string GameRandomManager_get_Instance = "GameRandomManager GameRandomManager::get_Instance()";
                public const string WorldBase_GetWorldTime = "System.UInt64 WorldBase::GetWorldTime()";
                public const string GameRandomManager_CreateGameRandom_Int32 = "GameRandom GameRandomManager::CreateGameRandom(System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string World_toBlockXZ_Int32 = "System.Int32 World::toBlockXZ(System.Int32)";
                public const string GameRandomManager_FreeGameRandom_GameRandom = "System.Void GameRandomManager::FreeGameRandom(GameRandom)";
                public const string Chunk_GetTerrainHeight_Int32_Int32 = "System.Byte Chunk::GetTerrainHeight(System.Int32,System.Int32)";
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string World_toBlockY_Int32 = "System.Int32 World::toBlockY(System.Int32)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string Prefab_GetDensity_Int32_Int32_Int32 = "System.SByte Prefab::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string BlockPlaceholderMap_Replace_BlockValue_GameRandom_Chunk_Int32_Int32_Boolean_QuestTags = "BlockValue BlockPlaceholderMap::Replace(BlockValue,GameRandom,Chunk,System.Int32,System.Int32,System.Boolean,QuestTags)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Chunk_SetDensity_Int32_Int32_Int32_SByte = "System.Void Chunk::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string Chunk_SetDecoAllowedAt_Int32_Int32_EnumDecoAllowed = "System.Void Chunk::SetDecoAllowedAt(System.Int32,System.Int32,EnumDecoAllowed)";
                public const string Prefab_GetTexture_Int32_Int32_Int32 = "System.Int64 Prefab::GetTexture(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_SetTextureFull_Int32_Int32_Int32_Int64 = "System.Int64 Chunk::SetTextureFull(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_SetBlock_WorldBase_Int32_Int32_Int32_BlockValue_Boolean = "BlockValue Chunk::SetBlock(WorldBase,System.Int32,System.Int32,System.Int32,BlockValue,System.Boolean)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Block_IsTileEntitySavedInPrefab = "System.Boolean Block::IsTileEntitySavedInPrefab()";
                public const string Prefab_GetTileEntity_Vector3i = "TileEntity Prefab::GetTileEntity(Vector3i)";
                public const string Chunk_GetTileEntity_Vector3i = "TileEntity Chunk::GetTileEntity(Vector3i)";
                public const string TileEntity_Clone = "TileEntity TileEntity::Clone()";
                public const string TileEntity_set_localChunkPos_Vector3i = "System.Void TileEntity::set_localChunkPos(Vector3i)";
                public const string TileEntity_SetChunk_Chunk = "System.Void TileEntity::SetChunk(Chunk)";
                public const string Chunk_AddTileEntity_TileEntity = "System.Void Chunk::AddTileEntity(TileEntity)";
                public const string TileEntity_CopyFrom_TileEntity = "System.Void TileEntity::CopyFrom(TileEntity)";
                public const string Chunk_SetTerrainHeight_Int32_Int32_Byte = "System.Void Chunk::SetTerrainHeight(System.Int32,System.Int32,System.Byte)";
                public const string Chunk_SetTopSoilBroken_Int32_Int32 = "System.Void Chunk::SetTopSoilBroken(System.Int32,System.Int32)";
                public const string Chunk_set_NeedsRegeneration_Boolean = "System.Void Chunk::set_NeedsRegeneration(System.Boolean)";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string blockValueTerrainFiller = "BlockValue Prefab::blockValueTerrainFiller";
                public const string cTerrainFillerBlockName = "System.String Constants::cTerrainFillerBlockName";
                public const string cTerrainFiller2BlockName = "System.String Constants::cTerrainFiller2BlockName";
                public const string blockValueTerrainFiller2 = "BlockValue Prefab::blockValueTerrainFiller2";
                public const string bCopyAirBlocks = "System.Boolean Prefab::bCopyAirBlocks";
                public const string list = "Block[] Block::list";
                public const string IsSleeperBlock = "System.Boolean Block::IsSleeperBlock";
                public const string Air = "BlockValue BlockValue::Air";
                public const string y = "System.Int32 Vector3i::y";
                public const string shape = "BlockShape Block::shape";
                public const string DensityAir = "System.SByte MarchingCubes::DensityAir";
                public const string IsReplaceRandom = "System.Boolean Block::IsReplaceRandom";
                public const string Instance = "BlockPlaceholderMap BlockPlaceholderMap::Instance";
                public const string DensityTerrain = "System.SByte MarchingCubes::DensityTerrain";
                public const string bAllowTopSoilDecorations = "System.Boolean Prefab::bAllowTopSoilDecorations";
                public const string size = "Vector3i Prefab::size";
            }

            public const string SnapTerrainToArea = "System.Void Prefab::SnapTerrainToArea(ChunkCluster,Vector3i)";
            public static class SnapTerrainToAreaInjects
            {
                public const string ChunkCluster_SnapTerrainToPositionAtLocal_Vector3i_Boolean_Boolean = "System.Void ChunkCluster::SnapTerrainToPositionAtLocal(Vector3i,System.Boolean,System.Boolean)";
                public const string size = "Vector3i Prefab::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string y = "System.Int32 Vector3i::y";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string CopyEntitiesIntoWorld = "System.Void Prefab::CopyEntitiesIntoWorld(World,Vector3i,System.Collections.Generic.ICollection`1<System.Int32>,System.Boolean)";
            public static class CopyEntitiesIntoWorldInjects
            {
                public const string ICollection_1_Clear = "System.Void System.Collections.Generic.ICollection`1<System.Int32>::Clear()";
                public const string List_1_get_Item_Int32 = "EntityCreationData System.Collections.Generic.List`1<EntityCreationData>::get_Item(System.Int32)";
                public const string DictionarySave_2_get_Item_T1 = "EntityClass DictionarySave`2<System.Int32,EntityClass>::get_Item(System.Int32)";
                public const string EntityFactory_CreateEntity_EntityCreationData = "Entity EntityFactory::CreateEntity(EntityCreationData)";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Entity_SetPosition_Vector3_Boolean = "System.Void Entity::SetPosition(UnityEngine.Vector3,System.Boolean)";
                public const string World_SpawnEntityInWorld_Entity = "System.Void World::SpawnEntityInWorld(Entity)";
                public const string ICollection_1_Add_T = "System.Void System.Collections.Generic.ICollection`1<System.Int32>::Add(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<EntityCreationData>::get_Count()";
                public const string entities = "System.Collections.Generic.List`1<EntityCreationData> Prefab::entities";
                public const string id = "System.Int32 EntityCreationData::id";
                public const string list = "DictionarySave`2<System.Int32,EntityClass> EntityClass::list";
                public const string entityClass = "System.Int32 EntityCreationData::entityClass";
                public const string bIsEnemyEntity = "System.Boolean EntityClass::bIsEnemyEntity";
                public const string position = "UnityEngine.Vector3 Entity::position";
                public const string entityId = "System.Int32 Entity::entityId";
            }

            public const string CopyEntitiesIntoChunkStub = "System.Void Prefab::CopyEntitiesIntoChunkStub(Chunk,Vector3i,System.Collections.Generic.ICollection`1<System.Int32>,System.Boolean)";
            public static class CopyEntitiesIntoChunkStubInjects
            {
                public const string List_1_get_Item_Int32 = "EntityCreationData System.Collections.Generic.List`1<EntityCreationData>::get_Item(System.Int32)";
                public const string DictionarySave_2_ContainsKey_T1 = "System.Boolean DictionarySave`2<System.Int32,EntityClass>::ContainsKey(System.Int32)";
                public const string DictionarySave_2_get_Item_T1 = "EntityClass DictionarySave`2<System.Int32,EntityClass>::get_Item(System.Int32)";
                public const string Utils_Fastfloor_Single = "System.Int32 Utils::Fastfloor(System.Single)";
                public const string Chunk_get_X = "System.Int32 Chunk::get_X()";
                public const string World_toChunkXZ_Int32 = "System.Int32 World::toChunkXZ(System.Int32)";
                public const string Chunk_get_Z = "System.Int32 Chunk::get_Z()";
                public const string EntityCreationData_Clone = "EntityCreationData EntityCreationData::Clone()";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Chunk_AddEntityStub_EntityCreationData = "System.Void Chunk::AddEntityStub(EntityCreationData)";
                public const string ICollection_1_Add_T = "System.Void System.Collections.Generic.ICollection`1<System.Int32>::Add(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<EntityCreationData>::get_Count()";
                public const string entities = "System.Collections.Generic.List`1<EntityCreationData> Prefab::entities";
                public const string list = "DictionarySave`2<System.Int32,EntityClass> EntityClass::list";
                public const string entityClass = "System.Int32 EntityCreationData::entityClass";
                public const string bIsEnemyEntity = "System.Boolean EntityClass::bIsEnemyEntity";
                public const string pos = "UnityEngine.Vector3 EntityCreationData::pos";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string nextEntityID = "System.Int32 EntityFactory::nextEntityID";
                public const string id = "System.Int32 EntityCreationData::id";
                public const string lootContainer = "TileEntityLootContainer EntityCreationData::lootContainer";
                public const string entityId = "System.Int32 TileEntity::entityId";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string SizeFromPositions = "Vector3i Prefab::SizeFromPositions(Vector3i,Vector3i)";
            public static class SizeFromPositionsInjects
            {
                public const string Math_Min_Int32_Int32 = "System.Int32 System.Math::Min(System.Int32,System.Int32)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Math_Max_Int32_Int32 = "System.Int32 System.Math::Max(System.Int32,System.Int32)";
                public const string Math_Abs_Int32 = "System.Int32 System.Math::Abs(System.Int32)";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
            }

            public const string copyFromWorld = "Vector3i Prefab::copyFromWorld(World,Vector3i,Vector3i)";
            public static class copyFromWorldInjects
            {
                public const string Math_Min_Int32_Int32 = "System.Int32 System.Math::Min(System.Int32,System.Int32)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Math_Max_Int32_Int32 = "System.Int32 System.Math::Max(System.Int32,System.Int32)";
                public const string Math_Abs_Int32 = "System.Int32 System.Math::Abs(System.Int32)";
                public const string Dictionary_2_Clear = "System.Void System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::Clear()";
                public const string WorldBase_GetBlock_Int32_Int32_Int32 = "BlockValue WorldBase::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Prefab_SetBlock_Int32_Int32_Int32_BlockValue = "System.Void Prefab::SetBlock(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string WorldBase_GetDensity_Int32_Int32_Int32_Int32 = "System.SByte WorldBase::GetDensity(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string Prefab_SetDensity_Int32_Int32_Int32_SByte = "System.SByte Prefab::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string World_GetTexture_Int32_Int32_Int32 = "System.Int64 World::GetTexture(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_SetTexture_Int32_Int32_Int32_Int64 = "System.Void Prefab::SetTexture(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_IsTileEntitySavedInPrefab = "System.Boolean Block::IsTileEntitySavedInPrefab()";
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string TileEntity_Clone = "TileEntity TileEntity::Clone()";
                public const string Vector3i_op_Subtraction_Vector3i_Vector3i = "Vector3i Vector3i::op_Subtraction(Vector3i,Vector3i)";
                public const string TileEntity_set_localChunkPos_Vector3i = "System.Void TileEntity::set_localChunkPos(Vector3i)";
                public const string TileEntity_get_localChunkPos = "Vector3i TileEntity::get_localChunkPos()";
                public const string Dictionary_2_Add_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<Vector3i,TileEntity>::Add(Vector3i,TileEntity)";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string size = "Vector3i Prefab::size";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string m_Density = "System.Byte[] Prefab::m_Density";
                public const string m_Textures = "System.Int64[] Prefab::m_Textures";
                public const string m_Damage = "System.UInt16[] Prefab::m_Damage";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string tileEntities = "System.Collections.Generic.Dictionary`2<Vector3i,TileEntity> Prefab::tileEntities";
                public const string list = "Block[] Block::list";
            }

            public const string CopyFromWorldWithEntities = "Vector3i Prefab::CopyFromWorldWithEntities(World,Vector3i,Vector3i,System.Collections.Generic.ICollection`1<System.Int32>)";
            public static class CopyFromWorldWithEntitiesInjects
            {
                public const string Prefab_copyFromWorld_World_Vector3i_Vector3i = "Vector3i Prefab::copyFromWorld(World,Vector3i,Vector3i)";
                public const string Math_Min_Int32_Int32 = "System.Int32 System.Math::Min(System.Int32,System.Int32)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Math_Max_Int32_Int32 = "System.Int32 System.Math::Max(System.Int32,System.Int32)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<EntityCreationData>::Clear()";
                public const string World_toChunkXZ_Int32 = "System.Int32 World::toChunkXZ(System.Int32)";
                public const string BoundsUtils_BoundsForMinMax_Single_Single_Single_Single_Single_Single = "UnityEngine.Bounds BoundsUtils::BoundsForMinMax(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)";
                public const string WorldBase_GetChunkSync_Int32_Int32_Int32 = "IChunk WorldBase::GetChunkSync(System.Int32,System.Int32,System.Int32)";
                public const string Type_GetTypeFromHandle_RuntimeTypeHandle = "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)";
                public const string Chunk_GetEntitiesInBounds_Type_Bounds_List_1 = "System.Void Chunk::GetEntitiesInBounds(System.Type,UnityEngine.Bounds,System.Collections.Generic.List`1<Entity>)";
                public const string Dictionary_2_Clear = "System.Void System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>>::Clear()";
                public const string DictionarySave_2_get_Dict = "System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>> DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Dict()";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Collections.Generic.List`1<Vector3i>> System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.List`1<Vector3i>> System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Current()";
                public const string KeyValuePair_2_get_Value = "System.Collections.Generic.List`1<Vector3i> System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Value()";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Vector3i>::get_Count()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.List`1<Vector3i>>::get_Key()";
                public const string Dictionary_2_set_Item_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>>::set_Item(System.String,System.Collections.Generic.List`1<Vector3i>)";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Vector3i> System.Collections.Generic.List`1<Vector3i>::GetEnumerator()";
                public const string Chunk_ToWorldPos_Vector3i = "Vector3i Chunk::ToWorldPos(Vector3i)";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Vector3i_op_Subtraction_Vector3i_Vector3i = "Vector3i Vector3i::op_Subtraction(Vector3i,Vector3i)";
                public const string Bounds_Contains_Vector3 = "System.Boolean UnityEngine.Bounds::Contains(UnityEngine.Vector3)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Vector3i>::Add(Vector3i)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<Vector3i>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string ICollection_1_Clear = "System.Void System.Collections.Generic.ICollection`1<System.Int32>::Clear()";
                public const string List_1_get_Item_Int32 = "Entity System.Collections.Generic.List`1<Entity>::get_Item(System.Int32)";
                public const string Bounds_get_min = "UnityEngine.Vector3 UnityEngine.Bounds::get_min()";
                public const string Vector3_op_Subtraction_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Subtraction(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string ICollection_1_Add_T = "System.Void System.Collections.Generic.ICollection`1<System.Int32>::Add(System.Int32)";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string entities = "System.Collections.Generic.List`1<EntityCreationData> Prefab::entities";
                public const string indexedBlockOffsets = "System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>> Prefab::indexedBlockOffsets";
                public const string IndexedBlocks = "DictionarySave`2<System.String,System.Collections.Generic.List`1<Vector3i>> Chunk::IndexedBlocks";
                public const string pos = "UnityEngine.Vector3 EntityCreationData::pos";
                public const string entityId = "System.Int32 Entity::entityId";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Entity>::.ctor()";
                public const string EntityCreationData_ctor_Entity = "System.Void EntityCreationData::.ctor(Entity)";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string Clone = "Prefab Prefab::Clone()";
            public static class CloneInjects
            {
                public const string Prefab_ctor_Prefab = "System.Void Prefab::.ctor(Prefab)";
            }

            public const string Get = "BlockValue Prefab::Get(System.Int32,System.Int32,System.Int32)";
            public static class GetInjects
            {
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string currX = "System.Int32 Prefab::currX";
                public const string currZ = "System.Int32 Prefab::currZ";
                public const string size = "Vector3i Prefab::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string GetChunk = "IChunk Prefab::GetChunk(System.Int32,System.Int32)";
            public static class GetChunkInjects
            {
                public const string WorldChunkCache_MakeChunkKey_Int32_Int32 = "System.Int64 WorldChunkCache::MakeChunkKey(System.Int32,System.Int32)";
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<System.Int64,Prefab/PrefabChunk>::TryGetValue(System.Int64,Prefab/PrefabChunk&)";
                public const string Dictionary_2_Add_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<System.Int64,Prefab/PrefabChunk>::Add(System.Int64,Prefab/PrefabChunk)";
                public const string dictChunks = "System.Collections.Generic.Dictionary`2<System.Int64,Prefab/PrefabChunk> Prefab::dictChunks";
                public const string PrefabChunk_ctor_Prefab_Int32_Int32 = "System.Void Prefab/PrefabChunk::.ctor(Prefab,System.Int32,System.Int32)";
            }

            public const string GetNeighborChunk = "IChunk Prefab::GetNeighborChunk(System.Int32,System.Int32)";
            public static class GetNeighborChunkInjects
            {
                public const string Prefab_GetChunk_Int32_Int32 = "IChunk Prefab::GetChunk(System.Int32,System.Int32)";
            }

            public const string Init = "System.Void Prefab::Init(System.Int32,System.Int32)";
            public static class InitInjects
            {
                public const string currX = "System.Int32 Prefab::currX";
                public const string currZ = "System.Int32 Prefab::currZ";
                public const string dictChunks = "System.Collections.Generic.Dictionary`2<System.Int64,Prefab/PrefabChunk> Prefab::dictChunks";
                public const string Dictionary_2_ctor = "System.Void System.Collections.Generic.Dictionary`2<System.Int64,Prefab/PrefabChunk>::.ctor()";
            }

            public const string Clear = "System.Void Prefab::Clear()";
            public const string Cache = "System.Void Prefab::Cache()";
            public const string ToMesh = "System.Void Prefab::ToMesh(VoxelMesh[])";
            public static class ToMeshInjects
            {
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string MeshGenerator_GenerateMesh_Vector3i_Vector3i_VoxelMesh_ = "System.Void MeshGenerator::GenerateMesh(Vector3i,Vector3i,VoxelMesh[])";
                public const string size = "Vector3i Prefab::size";
                public const string one = "Vector3i Vector3i::one";
                public const string MeshGenerator_ctor_INeighborBlockCache = "System.Void MeshGenerator::.ctor(INeighborBlockCache)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string ToOptimizedColorCubeMesh = "System.Void Prefab::ToOptimizedColorCubeMesh(VoxelMesh)";
            public static class ToOptimizedColorCubeMeshInjects
            {
                public const string MeshGeneratorOptimizedMesh_GenerateColorCubeMesh_Vector3i_Vector3i_VoxelMesh = "System.Void MeshGeneratorOptimizedMesh::GenerateColorCubeMesh(Vector3i,Vector3i,VoxelMesh)";
                public const string zero = "Vector3i Vector3i::zero";
                public const string size = "Vector3i Prefab::size";
                public const string MeshGeneratorOptimizedMesh_ctor_INeighborBlockCache = "System.Void MeshGeneratorOptimizedMesh::.ctor(INeighborBlockCache)";
            }

            public const string ToTransform = "UnityEngine.Transform Prefab::ToTransform()";
            public static class ToTransformInjects
            {
                public const string GameObject_get_transform = "UnityEngine.Transform UnityEngine.GameObject::get_transform()";
                public const string Transform_set_parent_Transform = "System.Void UnityEngine.Transform::set_parent(UnityEngine.Transform)";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string Object_set_name_String = "System.Void UnityEngine.Object::set_name(System.String)";
                public const string VoxelMesh_CreateMeshFilter_Int32_Int32_GameObject_String_Boolean_MeshFilter_MeshRenderer_MeshCollider_ = "System.Void VoxelMesh::CreateMeshFilter(System.Int32,System.Int32,UnityEngine.GameObject,System.String,System.Boolean,UnityEngine.MeshFilter[]&,UnityEngine.MeshRenderer[]&,UnityEngine.MeshCollider[]&)";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string MeshGenerator_GenerateMesh_Vector3i_Vector3i_VoxelMesh_ = "System.Void MeshGenerator::GenerateMesh(Vector3i,Vector3i,VoxelMesh[])";
                public const string VoxelMesh_CopyToMesh_MeshFilter_MeshRenderer_Int32 = "System.Int32 VoxelMesh::CopyToMesh(UnityEngine.MeshFilter[],UnityEngine.MeshRenderer[],System.Int32)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string BlockShape_GetRotation_BlockValue = "UnityEngine.Quaternion BlockShape::GetRotation(BlockValue)";
                public const string BlockShapeModelEntity_GetRotatedOffset_Block_Quaternion = "UnityEngine.Vector3 BlockShapeModelEntity::GetRotatedOffset(Block,UnityEngine.Quaternion)";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string GameObjectPool_get_Instance = "GameObjectPool GameObjectPool::get_Instance()";
                public const string GameObjectPool_GetObjectForType_String = "UnityEngine.GameObject GameObjectPool::GetObjectForType(System.String)";
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string Vector3_get_one = "UnityEngine.Vector3 UnityEngine.Vector3::get_one()";
                public const string Transform_set_localScale_Vector3 = "System.Void UnityEngine.Transform::set_localScale(UnityEngine.Vector3)";
                public const string Transform_set_localPosition_Vector3 = "System.Void UnityEngine.Transform::set_localPosition(UnityEngine.Vector3)";
                public const string Transform_set_localRotation_Quaternion = "System.Void UnityEngine.Transform::set_localRotation(UnityEngine.Quaternion)";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string location = "PathAbstractions/AbstractedLocation Prefab::location";
                public const string Name = "System.String PathAbstractions/AbstractedLocation::Name";
                public const string Tag = "System.String MeshDescription::Tag";
                public const string MESH_LENGTH = "System.Int32 MeshDescription::MESH_LENGTH";
                public const string size = "Vector3i Prefab::size";
                public const string one = "Vector3i Vector3i::one";
                public const string shape = "BlockShape Block::shape";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string modelName = "System.String BlockShapeModelEntity::modelName";
                public const string GameObject_ctor = "System.Void UnityEngine.GameObject::.ctor()";
                public const string GameObject_ctor_String = "System.Void UnityEngine.GameObject::.ctor(System.String)";
                public const string VoxelMesh_ctor_Int32_Int32 = "System.Void VoxelMesh::.ctor(System.Int32,System.Int32)";
                public const string MeshGenerator_ctor_INeighborBlockCache = "System.Void MeshGenerator::.ctor(INeighborBlockCache)";
            }

            public const string toBiomeArray = "System.Collections.Generic.List`1<BiomeDefinition> Prefab::toBiomeArray(WorldBiomes,System.Collections.Generic.List`1<System.String>)";
            public static class toBiomeArrayInjects
            {
                public const string List_1_get_Item_Int32 = "System.String System.Collections.Generic.List`1<System.String>::get_Item(System.Int32)";
                public const string WorldBiomes_GetBiome_String = "BiomeDefinition WorldBiomes::GetBiome(System.String)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<BiomeDefinition>::Add(BiomeDefinition)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<System.String>::get_Count()";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<BiomeDefinition>::.ctor()";
            }

            public const string GetAllowedBiomes = "System.String[] Prefab::GetAllowedBiomes()";
            public static class GetAllowedBiomesInjects
            {
                public const string List_1_ToArray = "System.String[] System.Collections.Generic.List`1<System.String>::ToArray()";
                public const string allowedBiomes = "System.Collections.Generic.List`1<System.String> Prefab::allowedBiomes";
            }

            public const string GetAllowedZones = "System.String[] Prefab::GetAllowedZones()";
            public static class GetAllowedZonesInjects
            {
                public const string List_1_ToArray = "System.String[] System.Collections.Generic.List`1<System.String>::ToArray()";
                public const string allowedZones = "System.Collections.Generic.List`1<System.String> Prefab::allowedZones";
            }

            public const string IsAllowedZone = "System.Boolean Prefab::IsAllowedZone(System.String)";
            public static class IsAllowedZoneInjects
            {
                public const string Extensions_ContainsCaseInsensitive_IList_1_String = "System.Boolean Extensions::ContainsCaseInsensitive(System.Collections.Generic.IList`1<System.String>,System.String)";
                public const string allowedZones = "System.Collections.Generic.List`1<System.String> Prefab::allowedZones";
            }

            public const string AddAllowedZone = "System.Void Prefab::AddAllowedZone(System.String)";
            public static class AddAllowedZoneInjects
            {
                public const string Prefab_IsAllowedZone_String = "System.Boolean Prefab::IsAllowedZone(System.String)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<System.String>::Add(System.String)";
                public const string allowedZones = "System.Collections.Generic.List`1<System.String> Prefab::allowedZones";
            }

            public const string RemoveAllowedZone = "System.Void Prefab::RemoveAllowedZone(System.String)";
            public static class RemoveAllowedZoneInjects
            {
                public const string List_1_FindIndex_Predicate_1 = "System.Int32 System.Collections.Generic.List`1<System.String>::FindIndex(System.Predicate`1<System.String>)";
                public const string List_1_RemoveAt_Int32 = "System.Void System.Collections.Generic.List`1<System.String>::RemoveAt(System.Int32)";
                public const string _zone = "System.String Prefab/<>c__DisplayClass181_0::_zone";
                public const string allowedZones = "System.Collections.Generic.List`1<System.String> Prefab::allowedZones";
                public const string _c_DisplayClass181_0_ctor = "System.Void Prefab/<>c__DisplayClass181_0::.ctor()";
                public const string Predicate_1_ctor_Object_IntPtr = "System.Void System.Predicate`1<System.String>::.ctor(System.Object,System.IntPtr)";
            }

            public const string GetAllowedTownships = "System.String[] Prefab::GetAllowedTownships()";
            public static class GetAllowedTownshipsInjects
            {
                public const string List_1_ToArray = "System.String[] System.Collections.Generic.List`1<System.String>::ToArray()";
                public const string allowedTownships = "System.Collections.Generic.List`1<System.String> Prefab::allowedTownships";
            }

            public const string SetAllowedBiomes = "System.Void Prefab::SetAllowedBiomes(System.String[])";
            public static class SetAllowedBiomesInjects
            {
                public const string allowedBiomes = "System.Collections.Generic.List`1<System.String> Prefab::allowedBiomes";
                public const string List_1_ctor_IEnumerable_1 = "System.Void System.Collections.Generic.List`1<System.String>::.ctor(System.Collections.Generic.IEnumerable`1<System.String>)";
            }

            public const string GetAllowedBiomes_WorldBiomes = "System.Collections.Generic.List`1<BiomeDefinition> Prefab::GetAllowedBiomes(WorldBiomes)";
            public static class GetAllowedBiomes_WorldBiomesInjects
            {
                public const string Prefab_toBiomeArray_WorldBiomes_List_1 = "System.Collections.Generic.List`1<BiomeDefinition> Prefab::toBiomeArray(WorldBiomes,System.Collections.Generic.List`1<System.String>)";
                public const string allowedBiomes = "System.Collections.Generic.List`1<System.String> Prefab::allowedBiomes";
            }

            public const string Overlaps = "System.Boolean Prefab::Overlaps(Chunk,Vector3i)";
            public static class OverlapsInjects
            {
                public const string Chunk_GetAABB = "UnityEngine.Bounds Chunk::GetAABB()";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Bounds_Intersects_Bounds = "System.Boolean UnityEngine.Bounds::Intersects(UnityEngine.Bounds)";
                public const string size = "Vector3i Prefab::size";
                public const string Bounds_ctor_Vector3_Vector3 = "System.Void UnityEngine.Bounds::.ctor(UnityEngine.Vector3,UnityEngine.Vector3)";
            }

            public const string CopyBlocksIntoChunk = "System.Void Prefab::CopyBlocksIntoChunk(World,Chunk,Vector3i,GameRandom,System.Boolean)";
            public static class CopyBlocksIntoChunkInjects
            {
                public const string Prefab_CopyBlocksIntoChunk_World_Chunk_Vector3i_GameRandom_Boolean = "System.Void Prefab::CopyBlocksIntoChunk(World,Chunk,Vector3i,GameRandom,System.Boolean)";
                public const string WorldBase_IsEditor = "System.Boolean WorldBase::IsEditor()";
                public const string GameStats_GetBool_EnumGameStats = "System.Boolean GameStats::GetBool(EnumGameStats)";
                public const string Prefab_CopyEntitiesIntoChunkStub_Chunk_Vector3i_ICollection_1_Boolean = "System.Void Prefab::CopyEntitiesIntoChunkStub(Chunk,Vector3i,System.Collections.Generic.ICollection`1<System.Int32>,System.Boolean)";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<System.Int32>::.ctor()";
            }

            public const string CopyBlocksIntoChunkNoEntities = "System.Void Prefab::CopyBlocksIntoChunkNoEntities(World,Chunk,Vector3i,GameRandom,System.Boolean)";
            public static class CopyBlocksIntoChunkNoEntitiesInjects
            {
                public const string Prefab_IsCullThisPrefab = "System.Boolean Prefab::IsCullThisPrefab()";
                public const string GameStats_GetInt_EnumGameStats = "System.Int32 GameStats::GetInt(EnumGameStats)";
                public const string WorldBase_IsEditor = "System.Boolean WorldBase::IsEditor()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string Chunk_GetAABB = "UnityEngine.Bounds Chunk::GetAABB()";
                public const string Bounds_get_min = "UnityEngine.Vector3 UnityEngine.Bounds::get_min()";
                public const string Utils_FastMin_Int32_Int32 = "System.Int32 Utils::FastMin(System.Int32,System.Int32)";
                public const string Chunk_GetTerrainHeight_Int32_Int32 = "System.Byte Chunk::GetTerrainHeight(System.Int32,System.Int32)";
                public const string Prefab_GetBlock_Int32_Int32_Int32 = "BlockValue Prefab::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetBiomeId_Int32_Int32 = "System.Byte Chunk::GetBiomeId(System.Int32,System.Int32)";
                public const string WorldBiomes_GetBiome_Byte = "BiomeDefinition WorldBiomes::GetBiome(System.Byte)";
                public const string Chunk_GetBlock_Int32_Int32_Int32 = "BlockValue Chunk::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string Prefab_GetDensity_Int32_Int32_Int32 = "System.SByte Prefab::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_GetDensity_Int32_Int32_Int32 = "System.SByte Chunk::GetDensity(System.Int32,System.Int32,System.Int32)";
                public const string BlockPlaceholderMap_Replace_BlockValue_GameRandom_Chunk_Int32_Int32_Boolean_QuestTags = "BlockValue BlockPlaceholderMap::Replace(BlockValue,GameRandom,Chunk,System.Int32,System.Int32,System.Boolean,QuestTags)";
                public const string Chunk_SetDecoAllowedAt_Int32_Int32_EnumDecoAllowed = "System.Void Chunk::SetDecoAllowedAt(System.Int32,System.Int32,EnumDecoAllowed)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string Prefab_IsInsidePrefab_Int32_Int32_Int32 = "System.Boolean Prefab::IsInsidePrefab(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_AddInsideDevicePosition_Int32_Int32_Int32_BlockValue = "System.Void Chunk::AddInsideDevicePosition(System.Int32,System.Int32,System.Int32,BlockValue)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Chunk_SetDensity_Int32_Int32_Int32_SByte = "System.Void Chunk::SetDensity(System.Int32,System.Int32,System.Int32,System.SByte)";
                public const string Prefab_GetTexture_Int32_Int32_Int32 = "System.Int64 Prefab::GetTexture(System.Int32,System.Int32,System.Int32)";
                public const string Chunk_SetTextureFull_Int32_Int32_Int32_Int64 = "System.Int64 Chunk::SetTextureFull(System.Int32,System.Int32,System.Int32,System.Int64)";
                public const string Chunk_SetBlock_WorldBase_Int32_Int32_Int32_BlockValue_Boolean = "BlockValue Chunk::SetBlock(WorldBase,System.Int32,System.Int32,System.Int32,BlockValue,System.Boolean)";
                public const string Block_IsTileEntitySavedInPrefab = "System.Boolean Block::IsTileEntitySavedInPrefab()";
                public const string Prefab_GetTileEntity_Vector3i = "TileEntity Prefab::GetTileEntity(Vector3i)";
                public const string Chunk_GetTileEntity_Vector3i = "TileEntity Chunk::GetTileEntity(Vector3i)";
                public const string TileEntity_Clone = "TileEntity TileEntity::Clone()";
                public const string TileEntity_set_localChunkPos_Vector3i = "System.Void TileEntity::set_localChunkPos(Vector3i)";
                public const string TileEntity_SetChunk_Chunk = "System.Void TileEntity::SetChunk(Chunk)";
                public const string Chunk_AddTileEntity_TileEntity = "System.Void Chunk::AddTileEntity(TileEntity)";
                public const string TileEntity_CopyFrom_TileEntity = "System.Void TileEntity::CopyFrom(TileEntity)";
                public const string Chunk_SetTerrainHeight_Int32_Int32_Byte = "System.Void Chunk::SetTerrainHeight(System.Int32,System.Int32,System.Byte)";
                public const string Chunk_SetTopSoilBroken_Int32_Int32 = "System.Void Chunk::SetTopSoilBroken(System.Int32,System.Int32)";
                public const string Prefab_CopySleeperVolumes_WorldBase_Chunk_Vector3i = "System.Void Prefab::CopySleeperVolumes(WorldBase,Chunk,Vector3i)";
                public const string blockValueTerrainFiller = "BlockValue Prefab::blockValueTerrainFiller";
                public const string cTerrainFillerBlockName = "System.String Constants::cTerrainFillerBlockName";
                public const string cTerrainFiller2BlockName = "System.String Constants::cTerrainFiller2BlockName";
                public const string blockValueTerrainFiller2 = "BlockValue Prefab::blockValueTerrainFiller2";
                public const string x = "System.Int32 Vector3i::x";
                public const string size = "Vector3i Prefab::size";
                public const string z = "System.Int32 Vector3i::z";
                public const string Air = "BlockValue BlockValue::Air";
                public const string list = "Block[] Block::list";
                public const string IsSleeperBlock = "System.Boolean Block::IsSleeperBlock";
                public const string y = "System.Int32 Vector3i::y";
                public const string bAllowTopSoilDecorations = "System.Boolean Prefab::bAllowTopSoilDecorations";
                public const string Biomes = "WorldBiomes World::Biomes";
                public const string m_TopSoilBlock = "System.String BiomeDefinition::m_TopSoilBlock";
                public const string shape = "BlockShape Block::shape";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string dim = "Vector3i Block/MultiBlockArray::dim";
                public const string DensityAir = "System.SByte MarchingCubes::DensityAir";
                public const string bEditorMode = "System.Boolean World::bEditorMode";
                public const string Instance = "BlockPlaceholderMap BlockPlaceholderMap::Instance";
                public const string DensityTerrain = "System.SByte MarchingCubes::DensityTerrain";
                public const string IsSolidCube = "System.Boolean BlockShape::IsSolidCube";
                public const string yOffset = "System.Int32 Prefab::yOffset";
                public const string IsTerrainDecoration = "System.Boolean Block::IsTerrainDecoration";
                public const string bCopyAirBlocks = "System.Boolean Prefab::bCopyAirBlocks";
            }

            public const string updateBlockStatistics = "System.Void Prefab::updateBlockStatistics(BlockValue)";
            public static class updateBlockStatisticsInjects
            {
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockValue_get_meta = "System.Byte BlockValue::get_meta()";
                public const string list = "Block[] Block::list";
                public const string statistics = "Prefab/BlockStatistics Prefab::statistics";
                public const string cntWindows = "System.Int32 Prefab/BlockStatistics::cntWindows";
                public const string BlockTag = "BlockTags Block::BlockTag";
                public const string cntDoors = "System.Int32 Prefab/BlockStatistics::cntDoors";
                public const string cntBlockEntities = "System.Int32 Prefab/BlockStatistics::cntBlockEntities";
                public const string shape = "BlockShape Block::shape";
                public const string cntBlockModels = "System.Int32 Prefab/BlockStatistics::cntBlockModels";
                public const string cntSolid = "System.Int32 Prefab/BlockStatistics::cntSolid";
            }

            public const string GetBlockStatistics = "Prefab/BlockStatistics Prefab::GetBlockStatistics()";
            public static class GetBlockStatisticsInjects
            {
                public const string statistics = "Prefab/BlockStatistics Prefab::statistics";
            }

            public const string GetEntities = "System.Collections.Generic.List`1<EntityCreationData> Prefab::GetEntities()";
            public static class GetEntitiesInjects
            {
                public const string entities = "System.Collections.Generic.List`1<EntityCreationData> Prefab::entities";
            }

            public const string Mirror = "System.Void Prefab::Mirror(EnumMirrorAlong)";
            public static class MirrorInjects
            {
                public const string Prefab_CoordToOffset_Int32_Int32_Int32_Int32 = "System.Int32 Prefab::CoordToOffset(System.Int32,System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string BlockShapeNew_MirrorStatic_EnumMirrorAlong_Int32_Int32 = "System.Int32 BlockShapeNew::MirrorStatic(EnumMirrorAlong,System.Int32,System.Int32)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string GameUtils_Mirror_EnumMirrorAlong_Vector3i_Vector3i = "Vector3i GameUtils::Mirror(EnumMirrorAlong,Vector3i,Vector3i)";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
                public const string BlockShapeNew_GetRotationStatic_Int32 = "UnityEngine.Quaternion BlockShapeNew::GetRotationStatic(System.Int32)";
                public const string Quaternion_op_Multiply_Quaternion_Vector3 = "UnityEngine.Vector3 UnityEngine.Quaternion::op_Multiply(UnityEngine.Quaternion,UnityEngine.Vector3)";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string GameUtils_Mirror_EnumMirrorAlong_Vector3_Vector3i = "UnityEngine.Vector3 GameUtils::Mirror(EnumMirrorAlong,UnityEngine.Vector3,Vector3i)";
                public const string Vector3_op_Subtraction_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Subtraction(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string World_worldToBlockPos_Vector3 = "Vector3i World::worldToBlockPos(UnityEngine.Vector3)";
                public const string BlockValue_set_type_Int32 = "System.Void BlockValue::set_type(System.Int32)";
                public const string BlockValue_set_rotation_Byte = "System.Void BlockValue::set_rotation(System.Byte)";
                public const string Prefab_mirrorTexture_EnumMirrorAlong_BlockShape_Int32_Int32_Int64 = "System.Int64 Prefab::mirrorTexture(EnumMirrorAlong,BlockShape,System.Int32,System.Int32,System.Int64)";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string m_Density = "System.Byte[] Prefab::m_Density";
                public const string m_Textures = "System.Int64[] Prefab::m_Textures";
                public const string m_Damage = "System.UInt16[] Prefab::m_Damage";
                public const string localRotation = "System.Int32 Prefab::localRotation";
                public const string list = "Block[] Block::list";
                public const string shape = "BlockShape Block::shape";
                public const string SymmetryType = "System.Int32 BlockShape::SymmetryType";
                public const string size = "Vector3i Prefab::size";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string dim = "Vector3i Block/MultiBlockArray::dim";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string z = "System.Int32 Vector3i::z";
                public const string MirrorSibling = "System.Int32 Block::MirrorSibling";
            }

            public const string mirrorTexture = "System.Int64 Prefab::mirrorTexture(EnumMirrorAlong,BlockShape,System.Int32,System.Int32,System.Int64)";
            public static class mirrorTextureInjects
            {
                public const string BlockShape_MirrorFace_EnumMirrorAlong_Int32_Int32_BlockFace_BlockFace_BlockFace_ = "System.Void BlockShape::MirrorFace(EnumMirrorAlong,System.Int32,System.Int32,BlockFace,BlockFace&,BlockFace&)";
            }

            public const string CloneSleeperVolume = "System.Void Prefab::CloneSleeperVolume(System.String,Vector3i,System.Int32)";
            public static class CloneSleeperVolumeInjects
            {
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string Prefab_AddSleeperVolume_String_Vector3i_Vector3i_Vector3i_Int16_String_Int32_Int32 = "System.Int32 Prefab::AddSleeperVolume(System.String,Vector3i,Vector3i,Vector3i,System.Int16,System.String,System.Int32,System.Int32)";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string startPos = "Vector3i Prefab/PrefabSleeperVolume::startPos";
                public const string size = "Vector3i Prefab/PrefabSleeperVolume::size";
                public const string y = "System.Int32 Vector3i::y";
                public const string groupId = "System.Int16 Prefab/PrefabSleeperVolume::groupId";
                public const string groupName = "System.String Prefab/PrefabSleeperVolume::groupName";
                public const string spawnCountMin = "System.Int16 Prefab/PrefabSleeperVolume::spawnCountMin";
                public const string spawnCountMax = "System.Int16 Prefab/PrefabSleeperVolume::spawnCountMax";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string AddSleeperVolume = "System.Int32 Prefab::AddSleeperVolume(System.String,Vector3i,Vector3i,Vector3i,System.Int16,System.String,System.Int32,System.Int32)";
            public static class AddSleeperVolumeInjects
            {
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Count()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::Add(Prefab/PrefabSleeperVolume)";
                public const string PrefabSleeperVolume_Use_Vector3i_Vector3i_Int16_String_Boolean_Boolean_Int32_Int32_Int32 = "System.Void Prefab/PrefabSleeperVolume::Use(Vector3i,Vector3i,System.Int16,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)";
                public const string String_Concat_Object_Object_Object = "System.String System.String::Concat(System.Object,System.Object,System.Object)";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string Prefab_AddSleeperVolumeSelectionBox_PrefabSleeperVolume_String_Vector3i = "System.Void Prefab::AddSleeperVolumeSelectionBox(Prefab/PrefabSleeperVolume,System.String,Vector3i)";
                public const string SelectionBoxManager_SetActive_String_String_Boolean = "System.Void SelectionBoxManager::SetActive(System.String,System.String,System.Boolean)";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string used = "System.Boolean Prefab/PrefabSleeperVolume::used";
                public const string Instance = "SelectionBoxManager SelectionBoxManager::Instance";
                public const string PrefabSleeperVolume_ctor = "System.Void Prefab/PrefabSleeperVolume::.ctor()";
            }

            public const string SetSleeperVolume = "System.Void Prefab::SetSleeperVolume(System.String,Vector3i,System.Int32,Prefab/PrefabSleeperVolume)";
            public static class SetSleeperVolumeInjects
            {
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::Add(Prefab/PrefabSleeperVolume)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Count()";
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string List_1_set_Item_Int32_T = "System.Void System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::set_Item(System.Int32,Prefab/PrefabSleeperVolume)";
                public const string String_Concat_Object_Object_Object = "System.String System.String::Concat(System.Object,System.Object,System.Object)";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string Prefab_AddSleeperVolumeSelectionBox_PrefabSleeperVolume_String_Vector3i = "System.Void Prefab::AddSleeperVolumeSelectionBox(Prefab/PrefabSleeperVolume,System.String,Vector3i)";
                public const string SelectionBoxManager_SetActive_String_String_Boolean = "System.Void SelectionBoxManager::SetActive(System.String,System.String,System.Boolean)";
                public const string SelectionBoxManager_SetPositionAndScale_String_String_Vector3i_Vector3i = "System.Void SelectionBoxManager::SetPositionAndScale(System.String,System.String,Vector3i,Vector3i)";
                public const string SelectionBoxManager_SetUserData_String_String_Object = "System.Void SelectionBoxManager::SetUserData(System.String,System.String,System.Object)";
                public const string SelectionBoxManager_Remove_String_String = "System.Void SelectionBoxManager::Remove(System.String,System.String)";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string used = "System.Boolean Prefab/PrefabSleeperVolume::used";
                public const string startPos = "Vector3i Prefab/PrefabSleeperVolume::startPos";
                public const string Instance = "SelectionBoxManager SelectionBoxManager::Instance";
                public const string size = "Vector3i Prefab/PrefabSleeperVolume::size";
                public const string PrefabSleeperVolume_ctor = "System.Void Prefab/PrefabSleeperVolume::.ctor()";
            }

            public const string AddSleeperVolumeSelectionBox = "System.Void Prefab::AddSleeperVolumeSelectionBox(Prefab/PrefabSleeperVolume,System.String,Vector3i)";
            public static class AddSleeperVolumeSelectionBoxInjects
            {
                public const string SelectionBoxManager_AddSelectionBox_String_String_Vector3i_Vector3i_Boolean = "SelectionBox SelectionBoxManager::AddSelectionBox(System.String,System.String,Vector3i,Vector3i,System.Boolean)";
                public const string Instance = "SelectionBoxManager SelectionBoxManager::Instance";
                public const string size = "Vector3i Prefab/PrefabSleeperVolume::size";
                public const string UserData = "System.Object SelectionBox::UserData";
            }

            public const string FindSleeperVolumeFreeGroupId = "System.Int16 Prefab::FindSleeperVolumeFreeGroupId()";
            public static class FindSleeperVolumeFreeGroupIdInjects
            {
                public const string List_1_get_Item_Int32 = "Prefab/PrefabSleeperVolume System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Item(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume>::get_Count()";
                public const string SleeperVolumes = "System.Collections.Generic.List`1<Prefab/PrefabSleeperVolume> Prefab::SleeperVolumes";
                public const string groupId = "System.Int16 Prefab/PrefabSleeperVolume::groupId";
            }

            public const string loadIdMapping = "ArrayListMP`1<System.Int32> Prefab::loadIdMapping(System.String,System.String,System.Boolean)";
            public static class loadIdMappingInjects
            {
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string String_Concat_String_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String,System.String)";
                public const string File_Exists_String = "System.Boolean System.IO.File::Exists(System.String)";
                public const string String_Concat_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String)";
                public const string MemoryPooledObject_1_AllocSync_Boolean = "NameIdMapping MemoryPooledObject`1<NameIdMapping>::AllocSync(System.Boolean)";
                public const string NameIdMapping_InitMapping_String_Int32 = "System.Void NameIdMapping::InitMapping(System.String,System.Int32)";
                public const string NameIdMapping_LoadFromFile = "System.Boolean NameIdMapping::LoadFromFile()";
                public const string Block_GetBlockByName_String_Boolean = "Block Block::GetBlockByName(System.String,System.Boolean)";
                public const string NameIdMapping_get_NamesToIdsIterator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Int32> NameIdMapping::get_NamesToIdsIterator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,System.Int32> System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Int32>::get_Current()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,System.Int32>::get_Key()";
                public const string String_Concat_String_ = "System.String System.String::Concat(System.String[])";
                public const string Log_Warning_String = "System.Void Log::Warning(System.String)";
                public const string KeyValuePair_2_get_Value = "System.Int32 System.Collections.Generic.KeyValuePair`2<System.String,System.Int32>::get_Value()";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Int32>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string list = "Block[] Block::list";
                public const string poolNameIdMapping = "MemoryPooledObject`1<NameIdMapping> MemoryPools::poolNameIdMapping";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string MISSING_BLOCK_NAME = "System.String Prefab::MISSING_BLOCK_NAME";
                public const string blockID = "System.Int32 Block::blockID";
                public const string blockTypeMissingBlock = "System.Int32 Prefab::blockTypeMissingBlock";
                public const string poolInt = "MemoryPooledArray`1<System.Int32> MemoryPools::poolInt";
                public const string Items = "System.Int32[] ArrayListMP`1<System.Int32>::Items";
                public const string ArrayListMP_1_ctor_MemoryPooledArray_1_Int32 = "System.Void ArrayListMP`1<System.Int32>::.ctor(MemoryPooledArray`1<System.Int32>,System.Int32)";
            }

            public const string doRaycast = "System.Boolean Prefab::doRaycast(UnityEngine.Ray,UnityEngine.RaycastHit&,Vector3i)";
            public static class doRaycastInjects
            {
                public const string Physics_Raycast_Ray_RaycastHit_Single_Int32 = "System.Boolean UnityEngine.Physics::Raycast(UnityEngine.Ray,UnityEngine.RaycastHit&,System.Single,System.Int32)";
                public const string RaycastHit_get_point = "UnityEngine.Vector3 UnityEngine.RaycastHit::get_point()";
                public const string Ray_get_direction = "UnityEngine.Vector3 UnityEngine.Ray::get_direction()";
                public const string Vector3_op_Multiply_Vector3_Single = "UnityEngine.Vector3 UnityEngine.Vector3::op_Multiply(UnityEngine.Vector3,System.Single)";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Utils_Fastfloor_Single = "System.Int32 Utils::Fastfloor(System.Single)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Ray_set_origin_Vector3 = "System.Void UnityEngine.Ray::set_origin(UnityEngine.Vector3)";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string size = "Vector3i Prefab::size";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string list = "Block[] Block::list";
                public const string bImposterDontBlock = "System.Boolean Block::bImposterDontBlock";
                public const string bImposterExclude = "System.Boolean Block::bImposterExclude";
            }

            public const string UpdateInsideOutside = "EnumInsideOutside[] Prefab::UpdateInsideOutside(Vector3i,Vector3i)";
            public static class UpdateInsideOutsideInjects
            {
                public const string Vector3_get_zero = "UnityEngine.Vector3 UnityEngine.Vector3::get_zero()";
                public const string Vector3_get_down = "UnityEngine.Vector3 UnityEngine.Vector3::get_down()";
                public const string Ray_ctor_Vector3_Vector3 = "System.Void UnityEngine.Ray::.ctor(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Ray_set_origin_Vector3 = "System.Void UnityEngine.Ray::set_origin(UnityEngine.Vector3)";
                public const string Prefab_doRaycast_Ray_RaycastHit_Vector3i = "System.Boolean Prefab::doRaycast(UnityEngine.Ray,UnityEngine.RaycastHit&,Vector3i)";
                public const string RaycastHit_get_point = "UnityEngine.Vector3 UnityEngine.RaycastHit::get_point()";
                public const string Ray_get_direction = "UnityEngine.Vector3 UnityEngine.Ray::get_direction()";
                public const string Utils_Fastfloor_Single = "System.Int32 Utils::Fastfloor(System.Single)";
                public const string Utils_FastMin_Int32_Int32 = "System.Int32 Utils::FastMin(System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string Vector3_get_right = "UnityEngine.Vector3 UnityEngine.Vector3::get_right()";
                public const string Utils_FastMax_Int32_Int32 = "System.Int32 Utils::FastMax(System.Int32,System.Int32)";
                public const string Vector3_get_left = "UnityEngine.Vector3 UnityEngine.Vector3::get_left()";
                public const string Vector3_get_forward = "UnityEngine.Vector3 UnityEngine.Vector3::get_forward()";
                public const string Ray_get_origin = "UnityEngine.Vector3 UnityEngine.Ray::get_origin()";
                public const string Color_get_blue = "UnityEngine.Color UnityEngine.Color::get_blue()";
                public const string Debug_DrawLine_Vector3_Vector3_Color_Single = "System.Void UnityEngine.Debug::DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)";
                public const string Vector3_get_back = "UnityEngine.Vector3 UnityEngine.Vector3::get_back()";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string y = "System.Int32 Vector3i::y";
                public const string size = "Vector3i Prefab::size";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string RecalcInsideDevices = "System.Void Prefab::RecalcInsideDevices(EnumInsideOutside[])";
            public static class RecalcInsideDevicesInjects
            {
                public const string HashSet_1_Clear = "System.Void System.Collections.Generic.HashSet`1<Vector3b>::Clear()";
                public const string Prefab_IsCullThisPrefab = "System.Boolean Prefab::IsCullThisPrefab()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string HashSet_1_Add_T = "System.Boolean System.Collections.Generic.HashSet`1<Vector3b>::Add(Vector3b)";
                public const string insidePos = "PrefabInsideDataFile Prefab::insidePos";
                public const string Data = "System.Collections.Generic.HashSet`1<Vector3b> PrefabInsideDataFile::Data";
                public const string list = "Block[] Block::list";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string shape = "BlockShape Block::shape";
                public const string size = "Vector3i Prefab::size";
                public const string x = "System.Int32 Vector3i::x";
                public const string y = "System.Int32 Vector3i::y";
                public const string Vector3b_ctor_Int32_Int32_Int32 = "System.Void Vector3b::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string calcInsideDevices_old = "System.Void Prefab::calcInsideDevices_old()";
            public static class calcInsideDevices_oldInjects
            {
                public const string HashSet_1_Clear = "System.Void System.Collections.Generic.HashSet`1<Vector3b>::Clear()";
                public const string Prefab_IsCullThisPrefab = "System.Boolean Prefab::IsCullThisPrefab()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string HashSet_1_Add_T = "System.Boolean System.Collections.Generic.HashSet`1<Vector3b>::Add(Vector3b)";
                public const string insidePos = "PrefabInsideDataFile Prefab::insidePos";
                public const string Data = "System.Collections.Generic.HashSet`1<Vector3b> PrefabInsideDataFile::Data";
                public const string m_Blocks = "BlockValue[] Prefab::m_Blocks";
                public const string size = "Vector3i Prefab::size";
                public const string y = "System.Int32 Vector3i::y";
                public const string x = "System.Int32 Vector3i::x";
                public const string list = "Block[] Block::list";
                public const string bImposterDontBlock = "System.Boolean Block::bImposterDontBlock";
                public const string z = "System.Int32 Vector3i::z";
                public const string Vector3b_ctor_Int32_Int32_Int32 = "System.Void Vector3b::.ctor(System.Int32,System.Int32,System.Int32)";
            }

            public const string GetFirstIndexedBlockOffsetOfType = "System.Nullable`1<Vector3i> Prefab::GetFirstIndexedBlockOffsetOfType(System.String)";
            public static class GetFirstIndexedBlockOffsetOfTypeInjects
            {
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>>::TryGetValue(System.String,System.Collections.Generic.List`1<Vector3i>&)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Vector3i>::get_Count()";
                public const string List_1_get_Item_Int32 = "Vector3i System.Collections.Generic.List`1<Vector3i>::get_Item(System.Int32)";
                public const string indexedBlockOffsets = "System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Vector3i>> Prefab::indexedBlockOffsets";
                public const string Nullable_1_ctor_T = "System.Void System.Nullable`1<Vector3i>::.ctor(Vector3i)";
            }
        }
    }

    [System.ComponentModel.DescriptionAttribute("Generated by SharpILMixins")]
    public static class XUiC_InGameDebugMenuTargets
    {
        public static class Methods
        {
            public const string get_ChunkCluster0 = "ChunkCluster XUiC_InGameDebugMenu::get_ChunkCluster0()";
            public static class get_ChunkCluster0Injects
            {
                public const string Object_op_Equality_Object_Object = "System.Boolean UnityEngine.Object::op_Equality(UnityEngine.Object,UnityEngine.Object)";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string ChunkClusterList_get_Item_Int32 = "ChunkCluster ChunkClusterList::get_Item(System.Int32)";
                public const string Instance = "GameManager GameManager::Instance";
                public const string ChunkClusters = "ChunkClusterList WorldBase::ChunkClusters";
            }

            public const string get_HasWorld = "System.Boolean XUiC_InGameDebugMenu::get_HasWorld()";
            public static class get_HasWorldInjects
            {
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string Instance = "GameManager GameManager::Instance";
            }

            public const string GetBindingValue = "System.Boolean XUiC_InGameDebugMenu::GetBindingValue(System.String&,BindingItem)";
            public static class GetBindingValueInjects
            {
                public const string BindingItem_get_FieldName = "System.String BindingItem::get_FieldName()";
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string XUiC_InGameDebugMenu_get_HasWorld = "System.Boolean XUiC_InGameDebugMenu::get_HasWorld()";
                public const string XUiC_InGameDebugMenu_get_ChunkCluster0 = "ChunkCluster XUiC_InGameDebugMenu::get_ChunkCluster0()";
                public const string IChunkProvider_IsDecorationsEnabled = "System.Boolean IChunkProvider::IsDecorationsEnabled()";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string GameTimer_get_Instance = "GameTimer GameTimer::get_Instance()";
                public const string CachedStringFormatter_1_Format_T1 = "System.String CachedStringFormatter`1<System.UInt64>::Format(System.UInt64)";
                public const string ChunkProvider = "IChunkProvider ChunkCluster::ChunkProvider";
                public const string ticksFormatter = "CachedStringFormatter`1<System.UInt64> XUiC_InGameDebugMenu::ticksFormatter";
                public const string ticks = "System.UInt64 GameTimer::ticks";
            }

            public const string Init = "System.Void XUiC_InGameDebugMenu::Init()";
            public static class InitInjects
            {
                public const string XUiController_Init = "System.Void XUiController::Init()";
                public const string XUiController_get_WindowGroup = "XUiWindowGroup XUiController::get_WindowGroup()";
                public const string XUiWindowGroup_get_ID = "System.String XUiWindowGroup::get_ID()";
                public const string XUiController_GetChildById_String = "XUiController XUiController::GetChildById(System.String)";
                public const string XUiController_add_OnPress_XUiEvent_OnPressEventHandler = "System.Void XUiController::add_OnPress(XUiEvent_OnPressEventHandler)";
                public const string XUiC_TextInput_add_OnSubmitHandler_XUiEvent_InputOnSubmitEventHandler = "System.Void XUiC_TextInput::add_OnSubmitHandler(XUiEvent_InputOnSubmitEventHandler)";
                public const string XUiC_TextInput_set_SelectOnTab_XUiC_TextInput = "System.Void XUiC_TextInput::set_SelectOnTab(XUiC_TextInput)";
                public const string Int32_ToString = "System.String System.Int32::ToString()";
                public const string XUiC_TextInput_set_Text_String = "System.Void XUiC_TextInput::set_Text(System.String)";
                public const string XUiController_get_ViewComponent = "XUiView XUiController::get_ViewComponent()";
                public const string XUiView_get_Controller = "XUiController XUiView::get_Controller()";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string XUiC_Slider_set_Label_String = "System.Void XUiC_Slider::set_Label(System.String)";
                public const string XUiC_Slider_set_ValueFormatter_Func_2 = "System.Void XUiC_Slider::set_ValueFormatter(System.Func`2<System.Single,System.String>)";
                public const string XUiC_Slider_add_OnValueChanged_XUiEvent_SliderValueChanged = "System.Void XUiC_Slider::add_OnValueChanged(XUiEvent_SliderValueChanged)";
                public const string XUiC_ToggleButton_add_OnValueChanged_XUiEvent_ToggleButtonValueChanged = "System.Void XUiC_ToggleButton::add_OnValueChanged(XUiEvent_ToggleButtonValueChanged)";
                public const string XUiC_SimpleButton_add_OnPressed_XUiEvent_OnPressEventHandler = "System.Void XUiC_SimpleButton::add_OnPressed(XUiEvent_OnPressEventHandler)";
                public const string ID = "System.String XUiC_InGameDebugMenu::ID";
                public const string btnSuicide = "XUiController XUiC_InGameDebugMenu::btnSuicide";
                public const string teleportX = "XUiC_TextInput XUiC_InGameDebugMenu::teleportX";
                public const string teleportZ = "XUiC_TextInput XUiC_InGameDebugMenu::teleportZ";
                public const string LastTeleportX = "System.Int32 XUiC_InGameDebugMenu::LastTeleportX";
                public const string LastTeleportZ = "System.Int32 XUiC_InGameDebugMenu::LastTeleportZ";
                public const string btnTeleport = "XUiController XUiC_InGameDebugMenu::btnTeleport";
                public const string btnReloadChunks = "XUiController XUiC_InGameDebugMenu::btnReloadChunks";
                public const string sliderDay = "XUiC_Slider XUiC_InGameDebugMenu::sliderDay";
                public const string sliderTime = "XUiC_Slider XUiC_InGameDebugMenu::sliderTime";
                public const string sliderSpeed = "XUiC_Slider XUiC_InGameDebugMenu::sliderSpeed";
                public const string toggleFlyMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleFlyMode";
                public const string toggleGodMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleGodMode";
                public const string toggleNoCollisionMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleNoCollisionMode";
                public const string toggleInvisibileMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleInvisibileMode";
                public const string toggleSaving = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleSaving";
                public const string togglePhysics = "XUiC_ToggleButton XUiC_InGameDebugMenu::togglePhysics";
                public const string toggleTicking = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleTicking";
                public const string toggleDebugShaders = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleDebugShaders";
                public const string toggleLightPerformance = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleLightPerformance";
                public const string toggleStabilityGlue = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleStabilityGlue";
                public const string btnPlaytest = "XUiC_SimpleButton XUiC_InGameDebugMenu::btnPlaytest";
                public const string btnBackToEditor = "XUiC_SimpleButton XUiC_InGameDebugMenu::btnBackToEditor";
                public const string XUiEvent_OnPressEventHandler_ctor_Object_IntPtr = "System.Void XUiEvent_OnPressEventHandler::.ctor(System.Object,System.IntPtr)";
                public const string XUiEvent_InputOnSubmitEventHandler_ctor_Object_IntPtr = "System.Void XUiEvent_InputOnSubmitEventHandler::.ctor(System.Object,System.IntPtr)";
                public const string Func_2_ctor_Object_IntPtr = "System.Void System.Func`2<System.Single,System.String>::.ctor(System.Object,System.IntPtr)";
                public const string XUiEvent_SliderValueChanged_ctor_Object_IntPtr = "System.Void XUiEvent_SliderValueChanged::.ctor(System.Object,System.IntPtr)";
                public const string XUiEvent_ToggleButtonValueChanged_ctor_Object_IntPtr = "System.Void XUiEvent_ToggleButtonValueChanged::.ctor(System.Object,System.IntPtr)";
            }

            public const string BtnSuicide_Controller_OnPress = "System.Void XUiC_InGameDebugMenu::BtnSuicide_Controller_OnPress(XUiController,OnPressEventArgs)";
            public static class BtnSuicide_Controller_OnPressInjects
            {
                public const string XUiController_get_xui = "XUi XUiController::get_xui()";
                public const string XUi_get_playerUI = "LocalPlayerUI XUi::get_playerUI()";
                public const string LocalPlayerUI_get_entityPlayer = "EntityPlayerLocal LocalPlayerUI::get_entityPlayer()";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string LocalPlayerUI_get_windowManager = "GUIWindowManager LocalPlayerUI::get_windowManager()";
                public const string XUiController_get_WindowGroup = "XUiWindowGroup XUiController::get_WindowGroup()";
                public const string XUiWindowGroup_get_ID = "System.String XUiWindowGroup::get_ID()";
                public const string GUIWindowManager_Close_String = "System.Void GUIWindowManager::Close(System.String)";
                public const string DamageResponse_New_DamageSource_Boolean = "DamageResponse DamageResponse::New(DamageSource,System.Boolean)";
                public const string Entity_Kill_DamageResponse = "System.Void Entity::Kill(DamageResponse)";
                public const string GameManager_Pause_Boolean = "System.Void GameManager::Pause(System.Boolean)";
                public const string Instance = "GameManager GameManager::Instance";
                public const string DamageSource_ctor_EnumDamageSource_EnumDamageTypes = "System.Void DamageSource::.ctor(EnumDamageSource,EnumDamageTypes)";
            }

            public const string Teleport_OnSubmitHandler = "System.Void XUiC_InGameDebugMenu::Teleport_OnSubmitHandler(XUiController,System.String)";
            public static class Teleport_OnSubmitHandlerInjects
            {
                public const string XUiC_InGameDebugMenu_BtnTeleport_Controller_OnPress_XUiController_OnPressEventArgs = "System.Void XUiC_InGameDebugMenu::BtnTeleport_Controller_OnPress(XUiController,OnPressEventArgs)";
                public const string OnPressEventArgs_ctor_Int32 = "System.Void OnPressEventArgs::.ctor(System.Int32)";
            }

            public const string BtnTeleport_Controller_OnPress = "System.Void XUiC_InGameDebugMenu::BtnTeleport_Controller_OnPress(XUiController,OnPressEventArgs)";
            public static class BtnTeleport_Controller_OnPressInjects
            {
                public const string XUiController_get_xui = "XUi XUiController::get_xui()";
                public const string XUi_get_playerUI = "LocalPlayerUI XUi::get_playerUI()";
                public const string LocalPlayerUI_get_entityPlayer = "EntityPlayerLocal LocalPlayerUI::get_entityPlayer()";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string XUiC_TextInput_get_Text = "System.String XUiC_TextInput::get_Text()";
                public const string Int32_TryParse_String_Int32_ = "System.Boolean System.Int32::TryParse(System.String,System.Int32&)";
                public const string LocalPlayerUI_get_windowManager = "GUIWindowManager LocalPlayerUI::get_windowManager()";
                public const string XUiController_get_WindowGroup = "XUiWindowGroup XUiController::get_WindowGroup()";
                public const string XUiWindowGroup_get_ID = "System.String XUiWindowGroup::get_ID()";
                public const string GUIWindowManager_Close_String = "System.Void GUIWindowManager::Close(System.String)";
                public const string Entity_SetPosition_Vector3_Boolean = "System.Void Entity::SetPosition(UnityEngine.Vector3,System.Boolean)";
                public const string EntityPlayer_Respawn_RespawnType = "System.Void EntityPlayer::Respawn(RespawnType)";
                public const string teleportX = "XUiC_TextInput XUiC_InGameDebugMenu::teleportX";
                public const string teleportZ = "XUiC_TextInput XUiC_InGameDebugMenu::teleportZ";
                public const string LastTeleportX = "System.Int32 XUiC_InGameDebugMenu::LastTeleportX";
                public const string LastTeleportZ = "System.Int32 XUiC_InGameDebugMenu::LastTeleportZ";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string BtnViewStabilityGlue_Controller_OnPress = "System.Void XUiC_InGameDebugMenu::BtnViewStabilityGlue_Controller_OnPress(XUiController,OnPressEventArgs)";
            public const string BtnRecalcLight_Controller_OnPress = "System.Void XUiC_InGameDebugMenu::BtnRecalcLight_Controller_OnPress(XUiController,OnPressEventArgs)";
            public static class BtnRecalcLight_Controller_OnPressInjects
            {
                public const string XUiC_InGameDebugMenu_get_ChunkCluster0 = "ChunkCluster XUiC_InGameDebugMenu::get_ChunkCluster0()";
                public const string WorldChunkCache_GetSyncRoot = "System.Object WorldChunkCache::GetSyncRoot()";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string Stopwatch_Start = "System.Void System.Diagnostics.Stopwatch::Start()";
                public const string WorldChunkCache_GetChunkArrayCopySync = "System.Collections.Generic.List`1<Chunk> WorldChunkCache::GetChunkArrayCopySync()";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Chunk> System.Collections.Generic.List`1<Chunk>::GetEnumerator()";
                public const string Enumerator_get_Current = "Chunk System.Collections.Generic.List`1/Enumerator<Chunk>::get_Current()";
                public const string Chunk_ResetLights_Byte = "System.Void Chunk::ResetLights(System.Byte)";
                public const string Chunk_RefreshSunlight = "System.Void Chunk::RefreshSunlight()";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.List`1/Enumerator<Chunk>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string LightProcessor_GenerateSunlight_Chunk_Boolean = "System.Void LightProcessor::GenerateSunlight(Chunk,System.Boolean)";
                public const string LightProcessor_LightChunk_Chunk = "System.Void LightProcessor::LightChunk(Chunk)";
                public const string Stopwatch_Stop = "System.Void System.Diagnostics.Stopwatch::Stop()";
                public const string Chunk_set_NeedsRegeneration_Boolean = "System.Void Chunk::set_NeedsRegeneration(System.Boolean)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Chunk>::get_Count()";
                public const string Stopwatch_get_ElapsedMilliseconds = "System.Int64 System.Diagnostics.Stopwatch::get_ElapsedMilliseconds()";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string Instance = "GameManager GameManager::Instance";
                public const string LightProcessor_ctor_IChunkAccess = "System.Void LightProcessor::.ctor(IChunkAccess)";
                public const string Stopwatch_ctor = "System.Void System.Diagnostics.Stopwatch::.ctor()";
            }

            public const string RecalcStability = "System.Void XUiC_InGameDebugMenu::RecalcStability()";
            public static class RecalcStabilityInjects
            {
                public const string XUiC_InGameDebugMenu_get_ChunkCluster0 = "ChunkCluster XUiC_InGameDebugMenu::get_ChunkCluster0()";
                public const string WorldChunkCache_GetSyncRoot = "System.Object WorldChunkCache::GetSyncRoot()";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string WorldChunkCache_GetChunkArray = "System.Collections.Generic.LinkedList`1<Chunk> WorldChunkCache::GetChunkArray()";
                public const string LinkedList_1_GetEnumerator = "System.Collections.Generic.LinkedList`1/Enumerator<Chunk> System.Collections.Generic.LinkedList`1<Chunk>::GetEnumerator()";
                public const string Enumerator_get_Current = "Chunk System.Collections.Generic.LinkedList`1/Enumerator<Chunk>::get_Current()";
                public const string Chunk_ResetStabilityToBottomMost = "System.Void Chunk::ResetStabilityToBottomMost()";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.LinkedList`1/Enumerator<Chunk>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string StabilityInitializer_DistributeStability_Chunk = "System.Void StabilityInitializer::DistributeStability(Chunk)";
                public const string Chunk_set_NeedsRegeneration_Boolean = "System.Void Chunk::set_NeedsRegeneration(System.Boolean)";
                public const string LinkedList_1_get_Count = "System.Int32 System.Collections.Generic.LinkedList`1<Chunk>::get_Count()";
                public const string Stopwatch_get_ElapsedMilliseconds = "System.Int64 System.Diagnostics.Stopwatch::get_ElapsedMilliseconds()";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string Instance = "GameManager GameManager::Instance";
                public const string StabilityInitializer_ctor_WorldBase = "System.Void StabilityInitializer::.ctor(WorldBase)";
                public const string MicroStopwatch_ctor = "System.Void MicroStopwatch::.ctor()";
            }

            public const string BtnRecalcStability_Controller_OnPress = "System.Void XUiC_InGameDebugMenu::BtnRecalcStability_Controller_OnPress(XUiController,OnPressEventArgs)";
            public static class BtnRecalcStability_Controller_OnPressInjects
            {
                public const string XUiC_InGameDebugMenu_RecalcStability = "System.Void XUiC_InGameDebugMenu::RecalcStability()";
            }

            public const string BtnReloadChunks_Controller_OnPress = "System.Void XUiC_InGameDebugMenu::BtnReloadChunks_Controller_OnPress(XUiController,OnPressEventArgs)";
            public static class BtnReloadChunks_Controller_OnPressInjects
            {
                public const string XUiC_InGameDebugMenu_get_ChunkCluster0 = "ChunkCluster XUiC_InGameDebugMenu::get_ChunkCluster0()";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string ChunkManager_ReloadAllChunks = "System.Void ChunkManager::ReloadAllChunks()";
                public const string IChunkProvider_ReloadAllChunks = "System.Void IChunkProvider::ReloadAllChunks()";
                public const string WorldBase_UnloadEntities_List_1 = "System.Void WorldBase::UnloadEntities(System.Collections.Generic.List`1<Entity>)";
                public const string Instance = "GameManager GameManager::Instance";
                public const string m_ChunkManager = "ChunkManager World::m_ChunkManager";
                public const string ChunkProvider = "IChunkProvider ChunkCluster::ChunkProvider";
                public const string Entities = "DictionaryList`2<System.Int32,Entity> World::Entities";
                public const string list = "System.Collections.Generic.List`1<Entity> DictionaryList`2<System.Int32,Entity>::list";
            }

            public const string SliderDay_ValueFormatter = "System.String XUiC_InGameDebugMenu::SliderDay_ValueFormatter(System.Single)";
            public static class SliderDay_ValueFormatterInjects
            {
                public const string XUiC_InGameDebugMenu_SliderDay_Value = "System.Int32 XUiC_InGameDebugMenu::SliderDay_Value()";
                public const string Int32_ToString = "System.String System.Int32::ToString()";
            }

            public const string SliderDay_OnValueChanged = "System.Void XUiC_InGameDebugMenu::SliderDay_OnValueChanged(XUiC_Slider)";
            public static class SliderDay_OnValueChangedInjects
            {
                public const string ConnectionManager_get_IsServer = "System.Boolean ConnectionManager::get_IsServer()";
                public const string XUiC_InGameDebugMenu_get_HasWorld = "System.Boolean XUiC_InGameDebugMenu::get_HasWorld()";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string XUiC_InGameDebugMenu_SliderDay_Value = "System.Int32 XUiC_InGameDebugMenu::SliderDay_Value()";
                public const string World_SetTimeJump_UInt64_Boolean = "System.Void World::SetTimeJump(System.UInt64,System.Boolean)";
                public const string Instance = "ConnectionManager SingletonMonoBehaviour`1<ConnectionManager>::Instance";
                public const string worldTime = "System.UInt64 World::worldTime";
            }

            public const string SliderDay_Value = "System.Int32 XUiC_InGameDebugMenu::SliderDay_Value()";
            public static class SliderDay_ValueInjects
            {
                public const string XUiC_Slider_get_Value = "System.Single XUiC_Slider::get_Value()";
                public const string Mathf_Clamp_Single_Single_Single = "System.Single UnityEngine.Mathf::Clamp(System.Single,System.Single,System.Single)";
                public const string sliderDay = "XUiC_Slider XUiC_InGameDebugMenu::sliderDay";
            }

            public const string SliderTime_ValueFormatter = "System.String XUiC_InGameDebugMenu::SliderTime_ValueFormatter(System.Single)";
            public static class SliderTime_ValueFormatterInjects
            {
                public const string XUiC_InGameDebugMenu_SliderTime_Value = "System.Single XUiC_InGameDebugMenu::SliderTime_Value()";
                public const string Extensions_ToCultureInvariantString_Single_String = "System.String Extensions::ToCultureInvariantString(System.Single,System.String)";
            }

            public const string SliderTime_OnValueChanged = "System.Void XUiC_InGameDebugMenu::SliderTime_OnValueChanged(XUiC_Slider)";
            public static class SliderTime_OnValueChangedInjects
            {
                public const string ConnectionManager_get_IsServer = "System.Boolean ConnectionManager::get_IsServer()";
                public const string XUiC_InGameDebugMenu_get_HasWorld = "System.Boolean XUiC_InGameDebugMenu::get_HasWorld()";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string XUiC_InGameDebugMenu_SliderTime_Value = "System.Single XUiC_InGameDebugMenu::SliderTime_Value()";
                public const string World_SetTimeJump_UInt64_Boolean = "System.Void World::SetTimeJump(System.UInt64,System.Boolean)";
                public const string Instance = "ConnectionManager SingletonMonoBehaviour`1<ConnectionManager>::Instance";
                public const string worldTime = "System.UInt64 World::worldTime";
            }

            public const string SliderTime_Value = "System.Single XUiC_InGameDebugMenu::SliderTime_Value()";
            public static class SliderTime_ValueInjects
            {
                public const string XUiC_Slider_get_Value = "System.Single XUiC_Slider::get_Value()";
                public const string Mathf_Clamp_Single_Single_Single = "System.Single UnityEngine.Mathf::Clamp(System.Single,System.Single,System.Single)";
                public const string sliderTime = "XUiC_Slider XUiC_InGameDebugMenu::sliderTime";
            }

            public const string SliderSpeed_ValueFormatter = "System.String XUiC_InGameDebugMenu::SliderSpeed_ValueFormatter(System.Single)";
            public static class SliderSpeed_ValueFormatterInjects
            {
                public const string XUiC_InGameDebugMenu_SliderSpeed_Value = "System.Int32 XUiC_InGameDebugMenu::SliderSpeed_Value()";
                public const string Int32_ToString = "System.String System.Int32::ToString()";
            }

            public const string SliderSpeed_OnValueChanged = "System.Void XUiC_InGameDebugMenu::SliderSpeed_OnValueChanged(XUiC_Slider)";
            public static class SliderSpeed_OnValueChangedInjects
            {
                public const string ConnectionManager_get_IsServer = "System.Boolean ConnectionManager::get_IsServer()";
                public const string XUiC_InGameDebugMenu_SliderSpeed_Value = "System.Int32 XUiC_InGameDebugMenu::SliderSpeed_Value()";
                public const string GameStats_Set_EnumGameStats_Int32 = "System.Void GameStats::Set(EnumGameStats,System.Int32)";
                public const string Instance = "ConnectionManager SingletonMonoBehaviour`1<ConnectionManager>::Instance";
                public const string GameSpeed = "System.Int32 WeatherManager::GameSpeed";
            }

            public const string SliderSpeed_Value = "System.Int32 XUiC_InGameDebugMenu::SliderSpeed_Value()";
            public static class SliderSpeed_ValueInjects
            {
                public const string XUiC_Slider_get_Value = "System.Single XUiC_Slider::get_Value()";
                public const string Mathf_Clamp_Single_Single_Single = "System.Single UnityEngine.Mathf::Clamp(System.Single,System.Single,System.Single)";
                public const string sliderSpeed = "XUiC_Slider XUiC_InGameDebugMenu::sliderSpeed";
            }

            public const string ToggleFlyMode_OnValueChanged = "System.Void XUiC_InGameDebugMenu::ToggleFlyMode_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class ToggleFlyMode_OnValueChangedInjects
            {
                public const string XUiController_get_xui = "XUi XUiController::get_xui()";
                public const string XUi_get_playerUI = "LocalPlayerUI XUi::get_playerUI()";
                public const string LocalPlayerUI_get_entityPlayer = "EntityPlayerLocal LocalPlayerUI::get_entityPlayer()";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string DataItem_1_set_Value_T = "System.Void DataItem`1<System.Boolean>::set_Value(System.Boolean)";
                public const string IsFlyMode = "DataItem`1<System.Boolean> Entity::IsFlyMode";
            }

            public const string ToggleGodMode_OnValueChanged = "System.Void XUiC_InGameDebugMenu::ToggleGodMode_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class ToggleGodMode_OnValueChangedInjects
            {
                public const string XUiController_get_xui = "XUi XUiController::get_xui()";
                public const string XUi_get_playerUI = "LocalPlayerUI XUi::get_playerUI()";
                public const string LocalPlayerUI_get_entityPlayer = "EntityPlayerLocal LocalPlayerUI::get_entityPlayer()";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string DataItem_1_set_Value_T = "System.Void DataItem`1<System.Boolean>::set_Value(System.Boolean)";
                public const string IsGodMode = "DataItem`1<System.Boolean> Entity::IsGodMode";
                public const string IsNoCollisionMode = "DataItem`1<System.Boolean> Entity::IsNoCollisionMode";
                public const string IsFlyMode = "DataItem`1<System.Boolean> Entity::IsFlyMode";
            }

            public const string ToggleNoCollisionMode_OnValueChanged = "System.Void XUiC_InGameDebugMenu::ToggleNoCollisionMode_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class ToggleNoCollisionMode_OnValueChangedInjects
            {
                public const string XUiController_get_xui = "XUi XUiController::get_xui()";
                public const string XUi_get_playerUI = "LocalPlayerUI XUi::get_playerUI()";
                public const string LocalPlayerUI_get_entityPlayer = "EntityPlayerLocal LocalPlayerUI::get_entityPlayer()";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string DataItem_1_set_Value_T = "System.Void DataItem`1<System.Boolean>::set_Value(System.Boolean)";
                public const string IsNoCollisionMode = "DataItem`1<System.Boolean> Entity::IsNoCollisionMode";
            }

            public const string ToggleInvisibileMode_OnValueChanged = "System.Void XUiC_InGameDebugMenu::ToggleInvisibileMode_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class ToggleInvisibileMode_OnValueChangedInjects
            {
                public const string XUiController_get_xui = "XUi XUiController::get_xui()";
                public const string XUi_get_playerUI = "LocalPlayerUI XUi::get_playerUI()";
                public const string LocalPlayerUI_get_entityPlayer = "EntityPlayerLocal LocalPlayerUI::get_entityPlayer()";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string EntityPlayer_set_IsSpectator_Boolean = "System.Void EntityPlayer::set_IsSpectator(System.Boolean)";
            }

            public const string ToggleSaving_OnValueChanged = "System.Void XUiC_InGameDebugMenu::ToggleSaving_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class ToggleSaving_OnValueChangedInjects
            {
                public const string bSavingActive = "System.Boolean GameManager::bSavingActive";
            }

            public const string TogglePhysics_OnValueChanged = "System.Void XUiC_InGameDebugMenu::TogglePhysics_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class TogglePhysics_OnValueChangedInjects
            {
                public const string bPhysicsActive = "System.Boolean GameManager::bPhysicsActive";
            }

            public const string ToggleTicking_OnValueChanged = "System.Void XUiC_InGameDebugMenu::ToggleTicking_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class ToggleTicking_OnValueChangedInjects
            {
                public const string bTickingActive = "System.Boolean GameManager::bTickingActive";
            }

            public const string ToggleDebugShaders_OnValueChanged = "System.Void XUiC_InGameDebugMenu::ToggleDebugShaders_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class ToggleDebugShaders_OnValueChangedInjects
            {
                public const string MeshDescription_SetDebugStabilityShader_Boolean = "System.Void MeshDescription::SetDebugStabilityShader(System.Boolean)";
            }

            public const string ToggleLightPerformance_OnValueChanged = "System.Void XUiC_InGameDebugMenu::ToggleLightPerformance_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class ToggleLightPerformance_OnValueChangedInjects
            {
                public const string Instance = "GameManager GameManager::Instance";
                public const string DebugLightViewerEnabled = "System.Boolean GameManager::DebugLightViewerEnabled";
            }

            public const string ToggleStabilityGlue_OnValueChanged = "System.Void XUiC_InGameDebugMenu::ToggleStabilityGlue_OnValueChanged(XUiC_ToggleButton,System.Boolean)";
            public static class ToggleStabilityGlue_OnValueChangedInjects
            {
                public const string StabilityViewer_Clear = "System.Void StabilityViewer::Clear()";
                public const string GameManager_CreateStabilityViewer = "System.Void GameManager::CreateStabilityViewer()";
                public const string StabilityViewer_StartSearch_Int32 = "System.Void StabilityViewer::StartSearch(System.Int32)";
                public const string Instance = "GameManager GameManager::Instance";
                public const string stabilityViewer = "StabilityViewer GameManager::stabilityViewer";
                public const string worldIsReady = "System.Boolean StabilityViewer::worldIsReady";
            }

            public const string OnOpen = "System.Void XUiC_InGameDebugMenu::OnOpen()";
            public static class OnOpenInjects
            {
                public const string XUiController_OnOpen = "System.Void XUiController::OnOpen()";
                public const string GameManager_get_IsDedicatedServer = "System.Boolean GameManager::get_IsDedicatedServer()";
                public const string XUiController_get_ViewComponent = "XUiView XUiController::get_ViewComponent()";
                public const string XUiView_set_IsVisible_Boolean = "System.Void XUiView::set_IsVisible(System.Boolean)";
                public const string GameManager_IsEditMode = "System.Boolean GameManager::IsEditMode()";
                public const string ConnectionManager_get_IsServer = "System.Boolean ConnectionManager::get_IsServer()";
                public const string GamePrefs_GetString_EnumGamePrefs = "System.String GamePrefs::GetString(EnumGamePrefs)";
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string GameUtils_IsPlaytesting = "System.Boolean GameUtils::IsPlaytesting()";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string XUiC_SimpleButton_set_Label_String = "System.Void XUiC_SimpleButton::set_Label(System.String)";
                public const string XUiC_SimpleButton_set_Enabled_Boolean = "System.Void XUiC_SimpleButton::set_Enabled(System.Boolean)";
                public const string btnSuicide = "XUiController XUiC_InGameDebugMenu::btnSuicide";
                public const string teleportX = "XUiC_TextInput XUiC_InGameDebugMenu::teleportX";
                public const string teleportZ = "XUiC_TextInput XUiC_InGameDebugMenu::teleportZ";
                public const string btnTeleport = "XUiController XUiC_InGameDebugMenu::btnTeleport";
                public const string toggleFlyMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleFlyMode";
                public const string toggleGodMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleGodMode";
                public const string toggleNoCollisionMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleNoCollisionMode";
                public const string toggleInvisibileMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleInvisibileMode";
                public const string Instance = "GameManager GameManager::Instance";
                public const string btnReloadChunks = "XUiController XUiC_InGameDebugMenu::btnReloadChunks";
                public const string btnPlaytest = "XUiC_SimpleButton XUiC_InGameDebugMenu::btnPlaytest";
                public const string btnBackToEditor = "XUiC_SimpleButton XUiC_InGameDebugMenu::btnBackToEditor";
                public const string sliderDay = "XUiC_Slider XUiC_InGameDebugMenu::sliderDay";
                public const string sliderTime = "XUiC_Slider XUiC_InGameDebugMenu::sliderTime";
                public const string sliderSpeed = "XUiC_Slider XUiC_InGameDebugMenu::sliderSpeed";
                public const string toggleSaving = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleSaving";
                public const string togglePhysics = "XUiC_ToggleButton XUiC_InGameDebugMenu::togglePhysics";
                public const string toggleTicking = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleTicking";
                public const string toggleDebugShaders = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleDebugShaders";
            }

            public const string Update = "System.Void XUiC_InGameDebugMenu::Update(System.Single)";
            public static class UpdateInjects
            {
                public const string XUiController_Update_Single = "System.Void XUiController::Update(System.Single)";
                public const string XUiC_InGameDebugMenu_get_HasWorld = "System.Boolean XUiC_InGameDebugMenu::get_HasWorld()";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string XUiC_Slider_set_Value_Single = "System.Void XUiC_Slider::set_Value(System.Single)";
                public const string GameStats_GetInt_EnumGameStats = "System.Int32 GameStats::GetInt(EnumGameStats)";
                public const string XUiController_get_xui = "XUi XUiController::get_xui()";
                public const string XUi_get_playerUI = "LocalPlayerUI XUi::get_playerUI()";
                public const string LocalPlayerUI_get_entityPlayer = "EntityPlayerLocal LocalPlayerUI::get_entityPlayer()";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string DataItem_1_get_Value = "System.Boolean DataItem`1<System.Boolean>::get_Value()";
                public const string XUiC_ToggleButton_set_Value_Boolean = "System.Void XUiC_ToggleButton::set_Value(System.Boolean)";
                public const string EntityPlayer_get_IsSpectator = "System.Boolean EntityPlayer::get_IsSpectator()";
                public const string XUiController_RefreshBindings_Boolean = "System.Void XUiController::RefreshBindings(System.Boolean)";
                public const string sliderDay = "XUiC_Slider XUiC_InGameDebugMenu::sliderDay";
                public const string Instance = "GameManager GameManager::Instance";
                public const string worldTime = "System.UInt64 World::worldTime";
                public const string sliderTime = "XUiC_Slider XUiC_InGameDebugMenu::sliderTime";
                public const string sliderSpeed = "XUiC_Slider XUiC_InGameDebugMenu::sliderSpeed";
                public const string toggleFlyMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleFlyMode";
                public const string IsFlyMode = "DataItem`1<System.Boolean> Entity::IsFlyMode";
                public const string toggleGodMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleGodMode";
                public const string IsGodMode = "DataItem`1<System.Boolean> Entity::IsGodMode";
                public const string toggleNoCollisionMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleNoCollisionMode";
                public const string IsNoCollisionMode = "DataItem`1<System.Boolean> Entity::IsNoCollisionMode";
                public const string toggleInvisibileMode = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleInvisibileMode";
                public const string toggleSaving = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleSaving";
                public const string bSavingActive = "System.Boolean GameManager::bSavingActive";
                public const string togglePhysics = "XUiC_ToggleButton XUiC_InGameDebugMenu::togglePhysics";
                public const string bPhysicsActive = "System.Boolean GameManager::bPhysicsActive";
                public const string toggleTicking = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleTicking";
                public const string bTickingActive = "System.Boolean GameManager::bTickingActive";
                public const string toggleDebugShaders = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleDebugShaders";
                public const string bDebugStability = "System.Boolean MeshDescription::bDebugStability";
                public const string toggleLightPerformance = "XUiC_ToggleButton XUiC_InGameDebugMenu::toggleLightPerformance";
                public const string DebugLightViewerEnabled = "System.Boolean GameManager::DebugLightViewerEnabled";
            }

            public const string BtnPlaytestOnPressed = "System.Void XUiC_InGameDebugMenu::BtnPlaytestOnPressed(XUiController,OnPressEventArgs)";
            public static class BtnPlaytestOnPressedInjects
            {
                public const string GameUtils_StartPlaytesting = "System.Void GameUtils::StartPlaytesting()";
            }

            public const string BtnBackToEditorOnPressed = "System.Void XUiC_InGameDebugMenu::BtnBackToEditorOnPressed(XUiController,OnPressEventArgs)";
            public static class BtnBackToEditorOnPressedInjects
            {
                public const string GameUtils_StartSinglePrefabEditing = "System.Void GameUtils::StartSinglePrefabEditing()";
            }
        }
    }

    [System.ComponentModel.DescriptionAttribute("Generated by SharpILMixins")]
    public static class MainMenuMonoTargets
    {
        public static class Methods
        {
            public const string Awake = "System.Void MainMenuMono::Awake()";
            public static class AwakeInjects
            {
                public const string windowManager = "GUIWindowManager MainMenuMono::windowManager";
                public const string nguiWindowManager = "NGUIWindowManager MainMenuMono::nguiWindowManager";
            }

            public const string Start = "System.Void MainMenuMono::Start()";
            public static class StartInjects
            {
                public const string Type_GetTypeFromHandle_RuntimeTypeHandle = "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)";
                public const string Object_FindObjectOfType_Type = "UnityEngine.Object UnityEngine.Object::FindObjectOfType(System.Type)";
                public const string GameManager_get_IsDedicatedServer = "System.Boolean GameManager::get_IsDedicatedServer()";
                public const string GamePrefs_GetString_EnumGamePrefs = "System.String GamePrefs::GetString(EnumGamePrefs)";
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string MainMenuMono_startGeneration_Action = "System.Collections.IEnumerator MainMenuMono::startGeneration(System.Action)";
                public const string MonoBehaviour_StartCoroutine_IEnumerator = "UnityEngine.Coroutine UnityEngine.MonoBehaviour::StartCoroutine(System.Collections.IEnumerator)";
                public const string MainMenuMono_startServer = "System.Void MainMenuMono::startServer()";
                public const string MainMenuMono_checkVersion = "System.Void MainMenuMono::checkVersion()";
                public const string NGUIWindowManager_GetWindow_EnumNGUIWindow = "UnityEngine.Transform NGUIWindowManager::GetWindow(EnumNGUIWindow)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string UILabel_set_text_String = "System.Void UILabel::set_text(System.String)";
                public const string Cursor_set_visible_Boolean = "System.Void UnityEngine.Cursor::set_visible(System.Boolean)";
                public const string Cursor_set_lockState_CursorLockMode = "System.Void UnityEngine.Cursor::set_lockState(UnityEngine.CursorLockMode)";
                public const string NGUIWindowManager_Open_EnumNGUIWindow = "UnityEngine.Transform NGUIWindowManager::Open(EnumNGUIWindow)";
                public const string gameStartup = "GameStartupHelper GameManager::gameStartup";
                public const string nguiWindowManager = "NGUIWindowManager MainMenuMono::nguiWindowManager";
                public const string cVersion = "System.String Constants::cVersion";
                public const string Action_ctor_Object_IntPtr = "System.Void System.Action::.ctor(System.Object,System.IntPtr)";
            }

            public const string startGeneration = "System.Collections.IEnumerator MainMenuMono::startGeneration(System.Action)";
            public static class startGenerationInjects
            {
                public const string onGenerationComplete = "System.Action MainMenuMono/<startGeneration>d__6::onGenerationComplete";
                public const string _startGeneration_d_6_ctor_Int32 = "System.Void MainMenuMono/<startGeneration>d__6::.ctor(System.Int32)";
            }

            public const string startServer = "System.Void MainMenuMono::startServer()";
            public static class startServerInjects
            {
                public const string MainMenuMono_startServerCo = "System.Collections.IEnumerator MainMenuMono::startServerCo()";
                public const string MonoBehaviour_StartCoroutine_IEnumerator = "UnityEngine.Coroutine UnityEngine.MonoBehaviour::StartCoroutine(System.Collections.IEnumerator)";
            }

            public const string startServerCo = "System.Collections.IEnumerator MainMenuMono::startServerCo()";
            public static class startServerCoInjects
            {
                public const string _startServerCo_d_8_ctor_Int32 = "System.Void MainMenuMono/<startServerCo>d__8::.ctor(System.Int32)";
            }

            public const string checkVersion = "System.Void MainMenuMono::checkVersion()";
            public static class checkVersionInjects
            {
                public const string GameStats_Set_EnumGameStats_Boolean = "System.Void GameStats::Set(EnumGameStats,System.Boolean)";
            }

            public const string CheckLogin = "System.Boolean MainMenuMono::CheckLogin()";
            public static class CheckLoginInjects
            {
                public const string GameManager_get_IsDedicatedServer = "System.Boolean GameManager::get_IsDedicatedServer()";
                public const string Steam_get_User = "UserClient Steam::get_User()";
                public const string UserClient_LoginToSteam_LoginUserCallback = "System.Void UserClient::LoginToSteam(LoginUserCallback)";
                public const string loginCheckDone = "System.Boolean MainMenuMono::loginCheckDone";
                public const string bOpenMainMenu = "System.Boolean MainMenuMono::bOpenMainMenu";
                public const string LoginUserCallback_ctor_Object_IntPtr = "System.Void LoginUserCallback::.ctor(System.Object,System.IntPtr)";
            }

            public const string Update = "System.Void MainMenuMono::Update()";
            public static class UpdateInjects
            {
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string NGUIWindowManager_GetWindow_EnumNGUIWindow = "UnityEngine.Transform NGUIWindowManager::GetWindow(EnumNGUIWindow)";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string UILabel_set_text_String = "System.Void UILabel::set_text(System.String)";
                public const string GameStateManager_IsGameStarted = "System.Boolean GameStateManager::IsGameStarted()";
                public const string NGUIWindowManager_IsShowing_EnumNGUIWindow = "System.Boolean NGUIWindowManager::IsShowing(EnumNGUIWindow)";
                public const string NGUIWindowManager_Close_EnumNGUIWindow = "System.Void NGUIWindowManager::Close(EnumNGUIWindow)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string LocalPlayerUI_get_xui = "XUi LocalPlayerUI::get_xui()";
                public const string XUi_get_isReady = "System.Boolean XUi::get_isReady()";
                public const string MainMenuMono_CheckLogin = "System.Boolean MainMenuMono::CheckLogin()";
                public const string GUIWindowManager_Open_String_Boolean_Boolean_Boolean = "System.Void GUIWindowManager::Open(System.String,System.Boolean,System.Boolean,System.Boolean)";
                public const string gameStartup = "GameStartupHelper MainMenuMono::gameStartup";
                public const string bOpenMainMenuAfterAwake = "System.Boolean GameStartupHelper::bOpenMainMenuAfterAwake";
                public const string Instance = "GameManager GameManager::Instance";
                public const string bStaticDataLoaded = "System.Boolean GameManager::bStaticDataLoaded";
                public const string loadingText = "System.String MainMenuMono::loadingText";
                public const string nguiWindowManager = "NGUIWindowManager MainMenuMono::nguiWindowManager";
                public const string CurrentLoadAction = "System.String GameManager::CurrentLoadAction";
                public const string gameStateManager = "GameStateManager GameManager::gameStateManager";
                public const string windowManager = "GUIWindowManager MainMenuMono::windowManager";
                public const string playerUI = "LocalPlayerUI GUIWindowManager::playerUI";
                public const string loginCheckDone = "System.Boolean MainMenuMono::loginCheckDone";
                public const string bOpenMainMenu = "System.Boolean MainMenuMono::bOpenMainMenu";
                public const string ID = "System.String XUiC_MainMenu::ID";
            }

            public const string GUIWindowMessageBox_OnOkPressed = "System.Void MainMenuMono::GUIWindowMessageBox_OnOkPressed()";
            public static class GUIWindowMessageBox_OnOkPressedInjects
            {
                public const string bOpenMainMenu = "System.Boolean MainMenuMono::bOpenMainMenu";
            }
        }
    }

    [System.ComponentModel.DescriptionAttribute("Generated by SharpILMixins")]
    public static class BlockTargets
    {
        public static class Methods
        {
            public const string get_UnlockedBy = "RecipeUnlockData[] Block::get_UnlockedBy()";
            public static class get_UnlockedByInjects
            {
                public const string ValueWrapper_ContainsKey_String = "System.Boolean DynamicProperties/ValueWrapper::ContainsKey(System.String)";
                public const string ValueWrapper_get_Item_String = "System.String DynamicProperties/ValueWrapper::get_Item(System.String)";
                public const string String_Split_Char_ = "System.String[] System.String::Split(System.Char[])";
                public const string unlockedBy = "RecipeUnlockData[] Block::unlockedBy";
                public const string Properties = "DynamicProperties Block::Properties";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string PropUnlockedBy = "System.String Block::PropUnlockedBy";
                public const string RecipeUnlockData_ctor_String = "System.Void RecipeUnlockData::.ctor(System.String)";
            }

            public const string get_MeshIndex = "System.Byte Block::get_MeshIndex()";
            public static class get_MeshIndexInjects
            {
                public const string shape = "BlockShape Block::shape";
                public const string MeshIndex = "System.Int32 BlockShape::MeshIndex";
            }

            public const string set_MeshIndex = "System.Void Block::set_MeshIndex(System.Byte)";
            public static class set_MeshIndexInjects
            {
                public const string shape = "BlockShape Block::shape";
                public const string MeshIndex = "System.Int32 BlockShape::MeshIndex";
            }

            public const string get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
            public static class get_IsCollideMovementInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideSight = "System.Boolean Block::get_IsCollideSight()";
            public static class get_IsCollideSightInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideBullets = "System.Boolean Block::get_IsCollideBullets()";
            public static class get_IsCollideBulletsInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideRockets = "System.Boolean Block::get_IsCollideRockets()";
            public static class get_IsCollideRocketsInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideMelee = "System.Boolean Block::get_IsCollideMelee()";
            public static class get_IsCollideMeleeInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideArrows = "System.Boolean Block::get_IsCollideArrows()";
            public static class get_IsCollideArrowsInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsNotifyOnLoadUnload = "System.Boolean Block::get_IsNotifyOnLoadUnload()";
            public static class get_IsNotifyOnLoadUnloadInjects
            {
                public const string bNotifyOnLoadUnload = "System.Boolean Block::bNotifyOnLoadUnload";
                public const string shape = "BlockShape Block::shape";
                public const string IsNotifyOnLoadUnload = "System.Boolean BlockShape::IsNotifyOnLoadUnload";
            }

            public const string set_IsNotifyOnLoadUnload = "System.Void Block::set_IsNotifyOnLoadUnload(System.Boolean)";
            public static class set_IsNotifyOnLoadUnloadInjects
            {
                public const string bNotifyOnLoadUnload = "System.Boolean Block::bNotifyOnLoadUnload";
            }

            public const string StringToVector3 = "UnityEngine.Vector3 Block::StringToVector3(System.String)";
            public static class StringToVector3Injects
            {
                public const string Vector3_get_zero = "UnityEngine.Vector3 UnityEngine.Vector3::get_zero()";
                public const string StringParsers_GetSeparatorPositions_String_Char_Int32_Int32_Int32 = "StringParsers/SeparatorPositions StringParsers::GetSeparatorPositions(System.String,System.Char,System.Int32,System.Int32,System.Int32)";
                public const string StringParsers_TryParseSInt32_String_Int32_Int32_Int32_NumberStyles = "System.Boolean StringParsers::TryParseSInt32(System.String,System.Int32&,System.Int32,System.Int32,System.Globalization.NumberStyles)";
                public const string Sep1 = "System.Int32 StringParsers/SeparatorPositions::Sep1";
                public const string TotalFound = "System.Int32 StringParsers/SeparatorPositions::TotalFound";
                public const string Sep2 = "System.Int32 StringParsers/SeparatorPositions::Sep2";
                public const string Sep3 = "System.Int32 StringParsers/SeparatorPositions::Sep3";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string z = "System.Single UnityEngine.Vector3::z";
            }

            public const string AddRandomTintColor_String_String = "System.Void Block::AddRandomTintColor(System.String,System.String)";
            public static class AddRandomTintColor_String_StringInjects
            {
                public const string Block_StringToVector3_String = "UnityEngine.Vector3 Block::StringToVector3(System.String)";
                public const string Block_AddRandomTintColor_Vector3_String = "System.Void Block::AddRandomTintColor(UnityEngine.Vector3,System.String)";
            }

            public const string AddRandomTintColor_Vector3_String = "System.Void Block::AddRandomTintColor(UnityEngine.Vector3,System.String)";
            public static class AddRandomTintColor_Vector3_StringInjects
            {
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Block/TintColorOnMaterial>::Add(Block/TintColorOnMaterial)";
                public const string randomTintColors = "System.Collections.Generic.List`1<Block/TintColorOnMaterial> Block::randomTintColors";
                public const string color = "UnityEngine.Vector3 Block/TintColorOnMaterial::color";
                public const string materialName = "System.String Block/TintColorOnMaterial::materialName";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Block/TintColorOnMaterial>::.ctor()";
            }

            public const string Init = "System.Void Block::Init()";
            public static class InitInjects
            {
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.String,Block>::ContainsKey(System.String)";
                public const string String_Concat_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String)";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Dictionary_2_set_Item_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<System.String,Block>::set_Item(System.String,Block)";
                public const string ValueWrapper_ContainsKey_String = "System.Boolean DynamicProperties/ValueWrapper::ContainsKey(System.String)";
                public const string ValueWrapper_get_Item_String = "System.String DynamicProperties/ValueWrapper::get_Item(System.String)";
                public const string FastTags_Parse_String = "FastTags FastTags::Parse(System.String)";
                public const string Int32_TryParse_String_Int32_ = "System.Boolean System.Int32::TryParse(System.String,System.Int32&)";
                public const string Math_Max_Int32_Int32 = "System.Int32 System.Math::Max(System.Int32,System.Int32)";
                public const string Block_StringToVector3_String = "UnityEngine.Vector3 Block::StringToVector3(System.String)";
                public const string String_Concat_Object_Object = "System.String System.String::Concat(System.Object,System.Object)";
                public const string DictionarySave_2_ContainsKey_T1 = "System.Boolean DictionarySave`2<System.String,System.String>::ContainsKey(System.String)";
                public const string DictionarySave_2_get_Item_T1 = "System.String DictionarySave`2<System.String,System.String>::get_Item(System.String)";
                public const string Block_AddRandomTintColor_String_String = "System.Void Block::AddRandomTintColor(System.String,System.String)";
                public const string StringParsers_TryParseBool_String_Boolean_Int32_Int32_Boolean = "System.Boolean StringParsers::TryParseBool(System.String,System.Boolean&,System.Int32,System.Int32,System.Boolean)";
                public const string StringParsers_ParseBool_String_Int32_Int32_Boolean = "System.Boolean StringParsers::ParseBool(System.String,System.Int32,System.Int32,System.Boolean)";
                public const string String_Split_Char_ = "System.String[] System.String::Split(System.Char[])";
                public const string Int32_Parse_String = "System.Int32 System.Int32::Parse(System.String)";
                public const string StringParsers_ParseFloat_String_Int32_Int32_NumberStyles = "System.Single StringParsers::ParseFloat(System.String,System.Int32,System.Int32,System.Globalization.NumberStyles)";
                public const string StringParsers_ParseColor32_String = "UnityEngine.Color StringParsers::ParseColor32(System.String)";
                public const string StringParsers_ParseVector2i_String_Char = "Vector2i StringParsers::ParseVector2i(System.String,System.Char)";
                public const string String_Trim = "System.String System.String::Trim()";
                public const string StringParsers_ParseHexColor_String = "UnityEngine.Color StringParsers::ParseHexColor(System.String)";
                public const string Color_get_white = "UnityEngine.Color UnityEngine.Color::get_white()";
                public const string StringParsers_ParseVector3i_String_Int32_Int32_Boolean = "Vector3i StringParsers::ParseVector3i(System.String,System.Int32,System.Int32,System.Boolean)";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string String_get_Length = "System.Int32 System.String::get_Length()";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string String_get_Chars_Int32 = "System.Char System.String::get_Chars(System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Vector3i>::Add(Vector3i)";
                public const string Mathf_RoundToInt_Single = "System.Int32 UnityEngine.Mathf::RoundToInt(System.Single)";
                public const string UInt32_Parse_String = "System.UInt32 System.UInt32::Parse(System.String)";
                public const string String_Split_Char_StringSplitOptions = "System.String[] System.String::Split(System.Char[],System.StringSplitOptions)";
                public const string DynamicProperties_ParseBool_String_Boolean_ = "System.Void DynamicProperties::ParseBool(System.String,System.Boolean&)";
                public const string StringParsers_TryParseFloat_String_Single_Int32_Int32_NumberStyles = "System.Boolean StringParsers::TryParseFloat(System.String,System.Single&,System.Int32,System.Int32,System.Globalization.NumberStyles)";
                public const string DynamicProperties_ParseString_String_String_ = "System.Void DynamicProperties::ParseString(System.String,System.String&)";
                public const string HashSet_1_Add_T = "System.Boolean System.Collections.Generic.HashSet`1<BlockFace>::Add(BlockFace)";
                public const string HashSet_1_Contains_T = "System.Boolean System.Collections.Generic.HashSet`1<BlockFace>::Contains(BlockFace)";
                public const string String_Contains_String = "System.Boolean System.String::Contains(System.String)";
                public const string String_StartsWith_String = "System.Boolean System.String::StartsWith(System.String)";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string String_Split_String_StringSplitOptions = "System.String[] System.String::Split(System.String[],System.StringSplitOptions)";
                public const string String_IndexOf_Char = "System.Int32 System.String::IndexOf(System.Char)";
                public const string String_Substring_Int32_Int32 = "System.String System.String::Substring(System.Int32,System.Int32)";
                public const string List_1_ToArray = "BlockRadiusEffect[] System.Collections.Generic.List`1<BlockRadiusEffect>::ToArray()";
                public const string String_Format_String_Object = "System.String System.String::Format(System.String,System.Object)";
                public const string Localization_Exists_String = "System.Boolean Localization::Exists(System.String)";
                public const string DynamicProperties_ParseFloat_String_Single_ = "System.Void DynamicProperties::ParseFloat(System.String,System.Single&)";
                public const string nameToBlockCaseInsensitive = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlockCaseInsensitive";
                public const string blockName = "System.String Block::blockName";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string Properties = "DynamicProperties Block::Properties";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string PropTag = "System.String Block::PropTag";
                public const string Tags = "FastTags Block::Tags";
                public const string PropLightOpacity = "System.String Block::PropLightOpacity";
                public const string lightOpacity = "System.Int32 Block::lightOpacity";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string LightOpacity = "System.Int32 MaterialBlock::LightOpacity";
                public const string shape = "BlockShape Block::shape";
                public const string PropTintColor = "System.String Block::PropTintColor";
                public const string tintColor = "UnityEngine.Vector3 Block::tintColor";
                public const string PropRandomTintColor = "System.String Block::PropRandomTintColor";
                public const string Params1 = "DictionarySave`2<System.String,System.String> DynamicProperties::Params1";
                public const string PropCanPickup = "System.String Block::PropCanPickup";
                public const string CanPickup = "System.Boolean Block::CanPickup";
                public const string PickedUpItemValue = "System.String Block::PickedUpItemValue";
                public const string PropFuelValue = "System.String Block::PropFuelValue";
                public const string FuelValue = "System.Int32 Block::FuelValue";
                public const string PropWeight = "System.String Block::PropWeight";
                public const string Weight = "DataItem`1<System.Int32> Block::Weight";
                public const string PropCanMobsSpawnOn = "System.String Block::PropCanMobsSpawnOn";
                public const string CanMobsSpawnOn = "System.Boolean Block::CanMobsSpawnOn";
                public const string PropCanPlayersSpawnOn = "System.String Block::PropCanPlayersSpawnOn";
                public const string CanPlayersSpawnOn = "System.Boolean Block::CanPlayersSpawnOn";
                public const string PropPickupTarget = "System.String Block::PropPickupTarget";
                public const string PickupTarget = "System.String Block::PickupTarget";
                public const string PropPickupSource = "System.String Block::PropPickupSource";
                public const string PickupSource = "System.String Block::PickupSource";
                public const string PropPlaceAltBlockValue = "System.String Block::PropPlaceAltBlockValue";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
                public const string PropIndexName = "System.String Block::PropIndexName";
                public const string IndexName = "System.String Block::IndexName";
                public const string PropCanDecorateOnSlopes = "System.String Block::PropCanDecorateOnSlopes";
                public const string CanDecorateOnSlopes = "System.Boolean Block::CanDecorateOnSlopes";
                public const string PropIsTerrainDecoration = "System.String Block::PropIsTerrainDecoration";
                public const string IsTerrainDecoration = "System.Boolean Block::IsTerrainDecoration";
                public const string PropIsDecoration = "System.String Block::PropIsDecoration";
                public const string IsDecoration = "System.Boolean Block::IsDecoration";
                public const string PropDistantDecoration = "System.String Block::PropDistantDecoration";
                public const string IsDistantDecoration = "System.Boolean Block::IsDistantDecoration";
                public const string PropBigDecorationRadius = "System.String Block::PropBigDecorationRadius";
                public const string BigDecorationRadius = "System.Int32 Block::BigDecorationRadius";
                public const string PropSmallDecorationRadius = "System.String Block::PropSmallDecorationRadius";
                public const string SmallDecorationRadius = "System.Int32 Block::SmallDecorationRadius";
                public const string LPHardnessScale = "System.Single Block::LPHardnessScale";
                public const string PropLPScale = "System.String Block::PropLPScale";
                public const string PropMapColor = "System.String Block::PropMapColor";
                public const string MapColor = "UnityEngine.Color Block::MapColor";
                public const string bMapColorSet = "System.Boolean Block::bMapColorSet";
                public const string PropMapColor2 = "System.String Block::PropMapColor2";
                public const string MapColor2 = "UnityEngine.Color Block::MapColor2";
                public const string bMapColor2Set = "System.Boolean Block::bMapColor2Set";
                public const string PropMapElevMinMax = "System.String Block::PropMapElevMinMax";
                public const string MapElevMinMax = "Vector2i Block::MapElevMinMax";
                public const string zero = "Vector2i Vector2i::zero";
                public const string PropMapSpecular = "System.String Block::PropMapSpecular";
                public const string MapSpecular = "System.Single Block::MapSpecular";
                public const string PropGroupName = "System.String Block::PropGroupName";
                public const string GroupNames = "System.String[] Block::GroupNames";
                public const string PropCustomIcon = "System.String Block::PropCustomIcon";
                public const string CustomIcon = "System.String Block::CustomIcon";
                public const string PropCustomIconTint = "System.String Block::PropCustomIconTint";
                public const string CustomIconTint = "UnityEngine.Color Block::CustomIconTint";
                public const string PropPlacementWireframe = "System.String Block::PropPlacementWireframe";
                public const string bHasPlacementWireframe = "System.Boolean Block::bHasPlacementWireframe";
                public const string PropMultiBlockDim = "System.String Block::PropMultiBlockDim";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string PropMultiBlockLayer = "System.String Block::PropMultiBlockLayer";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string y = "System.Int32 Vector3i::y";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string PropHeatMapStrength = "System.String Block::PropHeatMapStrength";
                public const string HeatMapStrength = "System.Single Block::HeatMapStrength";
                public const string PropHeatMapTime = "System.String Block::PropHeatMapTime";
                public const string HeatMapTime = "System.UInt32 Block::HeatMapTime";
                public const string PropHeatMapFrequency = "System.String Block::PropHeatMapFrequency";
                public const string HeatMapFrequency = "System.UInt32 Block::HeatMapFrequency";
                public const string FallDamage = "System.Single Block::FallDamage";
                public const string PropFallDamage = "System.String Block::PropFallDamage";
                public const string PropCount = "System.String Block::PropCount";
                public const string Count = "System.Int32 Block::Count";
                public const string PropAllowAllRotations = "System.String Block::PropAllowAllRotations";
                public const string AllowAllRotations = "System.Boolean Block::AllowAllRotations";
                public const string bImposterExclude = "System.Boolean Block::bImposterExclude";
                public const string bImposterExcludeAndStop = "System.Boolean Block::bImposterExcludeAndStop";
                public const string bImposterDontBlock = "System.Boolean Block::bImposterDontBlock";
                public const string OnlySimpleRotations = "System.Boolean Block::OnlySimpleRotations";
                public const string PropIsPlant = "System.String Block::PropIsPlant";
                public const string bIsPlant = "System.Boolean Block::bIsPlant";
                public const string CustomPlaceSound = "System.String Block::CustomPlaceSound";
                public const string CustomUpgradeSound = "System.String Block::CustomUpgradeSound";
                public const string PropBuffsWhenWalkedOn = "System.String Block::PropBuffsWhenWalkedOn";
                public const string BuffsWhenWalkedOn = "System.String[] Block::BuffsWhenWalkedOn";
                public const string PropIsReplaceRandom = "System.String Block::PropIsReplaceRandom";
                public const string IsReplaceRandom = "System.Boolean Block::IsReplaceRandom";
                public const string PropCraftExpValue = "System.String Block::PropCraftExpValue";
                public const string CraftComponentExp = "System.Single Block::CraftComponentExp";
                public const string PropCraftTimeValue = "System.String Block::PropCraftTimeValue";
                public const string CraftComponentTime = "System.Single Block::CraftComponentTime";
                public const string PropLootExpValue = "System.String Block::PropLootExpValue";
                public const string LootExp = "System.Single Block::LootExp";
                public const string PropDestroyExpValue = "System.String Block::PropDestroyExpValue";
                public const string DestroyExp = "System.Single Block::DestroyExp";
                public const string PropParticleOnDeath = "System.String Block::PropParticleOnDeath";
                public const string deathParticleName = "System.String Block::deathParticleName";
                public const string PropPlaceExpValue = "System.String Block::PropPlaceExpValue";
                public const string PlaceExp = "System.Single Block::PlaceExp";
                public const string PropUpgradeExpValue = "System.String Block::PropUpgradeExpValue";
                public const string UpgradeExp = "System.Single Block::UpgradeExp";
                public const string PropEconomicValue = "System.String Block::PropEconomicValue";
                public const string EconomicValue = "System.Single Block::EconomicValue";
                public const string PropEconomicBundleSize = "System.String Block::PropEconomicBundleSize";
                public const string EconomicBundleSize = "System.Int32 Block::EconomicBundleSize";
                public const string PropSellableToTrader = "System.String Block::PropSellableToTrader";
                public const string SellableToTrader = "System.Boolean Block::SellableToTrader";
                public const string PropPickupJournalEntry = "System.String Block::PropPickupJournalEntry";
                public const string PickupJournalEntry = "System.String Block::PickupJournalEntry";
                public const string PropCreativeMode = "System.String Block::PropCreativeMode";
                public const string CreativeMode = "EnumCreativeMode Block::CreativeMode";
                public const string PropFilterTag = "System.String Block::PropFilterTag";
                public const string FilterTags = "System.String[] Block::FilterTags";
                public const string Empty = "System.String System.String::Empty";
                public const string PropCreativeSort1 = "System.String Block::PropCreativeSort1";
                public const string PropCreativeSort2 = "System.String Block::PropCreativeSort2";
                public const string SortOrder = "System.String Block::SortOrder";
                public const string PropDisplayType = "System.String Block::PropDisplayType";
                public const string DisplayType = "System.String Block::DisplayType";
                public const string PropItemTypeIcon = "System.String Block::PropItemTypeIcon";
                public const string ItemTypeIcon = "System.String Block::ItemTypeIcon";
                public const string PropMaxDamage = "System.String Block::PropMaxDamage";
                public const string MaxDamage = "System.Int32 Block::MaxDamage";
                public const string PropActivationDistance = "System.String Block::PropActivationDistance";
                public const string activationDistance = "System.Int32 Block::activationDistance";
                public const string PropPlacementDistance = "System.String Block::PropPlacementDistance";
                public const string placementDistance = "System.Int32 Block::placementDistance";
                public const string EnablePassThroughDamage = "System.Boolean Block::EnablePassThroughDamage";
                public const string RemovePaintOnDowngrade = "System.Collections.Generic.List`1<BlockFace> Block::RemovePaintOnDowngrade";
                public const string UseGlobalUV = "Block/EnumUVState[] Block::UseGlobalUV";
                public const string bForceCPU_UVs = "System.Boolean Block::bForceCPU_UVs";
                public const string PropRadiusEffect = "System.String Block::PropRadiusEffect";
                public const string radius = "System.Single BlockRadiusEffect::radius";
                public const string variable = "System.String BlockRadiusEffect::variable";
                public const string RadiusEffects = "BlockRadiusEffect[] Block::RadiusEffects";
                public const string PropDescriptionKey = "System.String Block::PropDescriptionKey";
                public const string DescriptionKey = "System.String Block::DescriptionKey";
                public const string defaultBlockDescriptionKey = "System.String Block::defaultBlockDescriptionKey";
                public const string PropCraftingSkillGroup = "System.String Block::PropCraftingSkillGroup";
                public const string CraftingSkillGroup = "System.String Block::CraftingSkillGroup";
                public const string PropHarvestOverdamage = "System.String Block::PropHarvestOverdamage";
                public const string HarvestOverdamage = "System.Boolean Block::HarvestOverdamage";
                public const string PropShowModelOnFall = "System.String Block::PropShowModelOnFall";
                public const string bShowModelOnFall = "System.Boolean Block::bShowModelOnFall";
                public const string HandleFace = "BlockFace Block::HandleFace";
                public const string DisplayInfo = "Block/EnumDisplayInfo Block::DisplayInfo";
                public const string SelectAlternates = "System.Boolean Block::SelectAlternates";
                public const string PropNoScrapping = "System.String Block::PropNoScrapping";
                public const string NoScrapping = "System.Boolean Block::NoScrapping";
                public const string VehicleHitScale = "System.Single Block::VehicleHitScale";
                public const string PropVehicleHitScale = "System.String Block::PropVehicleHitScale";
                public const string DataItem_1_ctor_T = "System.Void DataItem`1<System.Int32>::.ctor(System.Int32)";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Vector3i>::.ctor()";
                public const string Exception_ctor_String = "System.Void System.Exception::.ctor(System.String)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string MultiBlockArray_ctor_Vector3i_List_1 = "System.Void Block/MultiBlockArray::.ctor(Vector3i,System.Collections.Generic.List`1<Vector3i>)";
                public const string HashSet_1_ctor = "System.Void System.Collections.Generic.HashSet`1<BlockFace>::.ctor()";
            }

            public const string LateInit = "System.Void Block::LateInit()";
            public static class LateInitInjects
            {
                public const string BlockShape_LateInit = "System.Void BlockShape::LateInit()";
                public const string ValueWrapper_ContainsKey_String = "System.Boolean DynamicProperties/ValueWrapper::ContainsKey(System.String)";
                public const string ValueWrapper_get_Item_String = "System.String DynamicProperties/ValueWrapper::get_Item(System.String)";
                public const string ItemClass_GetItem_String_Boolean = "ItemValue ItemClass::GetItem(System.String,System.Boolean)";
                public const string ItemValue_ToBlockValue = "BlockValue ItemValue::ToBlockValue()";
                public const string BlockValue_Equals_BlockValue = "System.Boolean BlockValue::Equals(BlockValue)";
                public const string String_Concat_String_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String,System.String)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string DictionarySave_2_ContainsKey_T1 = "System.Boolean DictionarySave`2<System.String,System.String>::ContainsKey(System.String)";
                public const string DictionarySave_2_get_Item_T1 = "System.String DictionarySave`2<System.String,System.String>::get_Item(System.String)";
                public const string Int32_Parse_String = "System.Int32 System.Int32::Parse(System.String)";
                public const string Log_Warning_String_Object_ = "System.Void Log::Warning(System.String,System.Object[])";
                public const string String_Split_Char_ = "System.String[] System.String::Split(System.Char[])";
                public const string String_Trim = "System.String System.String::Trim()";
                public const string shape = "BlockShape Block::shape";
                public const string Properties = "DynamicProperties Block::Properties";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string PropSiblingBlock = "System.String Block::PropSiblingBlock";
                public const string SiblingBlock = "BlockValue Block::SiblingBlock";
                public const string Air = "BlockValue BlockValue::Air";
                public const string blockName = "System.String Block::blockName";
                public const string MirrorSibling = "System.Int32 Block::MirrorSibling";
                public const string PropUpgradeBlock = "System.String Block::PropUpgradeBlock";
                public const string UpgradeBlock = "BlockValue Block::UpgradeBlock";
                public const string PropDowngradeBlock = "System.String Block::PropDowngradeBlock";
                public const string DowngradeBlock = "BlockValue Block::DowngradeBlock";
                public const string ImposterExchange = "System.Int32 Block::ImposterExchange";
                public const string Params1 = "DictionarySave`2<System.String,System.String> DynamicProperties::Params1";
                public const string ImposterExchangeTexIdx = "System.Byte Block::ImposterExchangeTexIdx";
                public const string MergeIntoId = "System.Int32 Block::MergeIntoId";
                public const string MergeIntoTexIds = "System.Int32[] Block::MergeIntoTexIds";
                public const string Exception_ctor_String = "System.Void System.Exception::.ctor(System.String)";
            }

            public const string InitStatic = "System.Void Block::InitStatic()";
            public static class InitStaticInjects
            {
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string nameToBlockCaseInsensitive = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlockCaseInsensitive";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string list = "Block[] Block::list";
                public const string Dictionary_2_ctor = "System.Void System.Collections.Generic.Dictionary`2<System.String,Block>::.ctor()";
                public const string CaseInsensitiveStringDictionary_1_ctor = "System.Void CaseInsensitiveStringDictionary`1<Block>::.ctor()";
            }

            public const string LateInitAll = "System.Void Block::LateInitAll()";
            public static class LateInitAllInjects
            {
                public const string Block_LateInit = "System.Void Block::LateInit()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Log_Warning_String_Object_ = "System.Void Log::Warning(System.String,System.Object[])";
                public const string list = "Block[] Block::list";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string Air = "BlockValue BlockValue::Air";
                public const string MaxDamage = "System.Int32 Block::MaxDamage";
                public const string DowngradeBlock = "BlockValue Block::DowngradeBlock";
                public const string blockName = "System.String Block::blockName";
                public const string MaxDamagePlusDowngrades = "System.Int32 Block::MaxDamagePlusDowngrades";
            }

            public const string Cleanup = "System.Void Block::Cleanup()";
            public static class CleanupInjects
            {
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string nameToBlockCaseInsensitive = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlockCaseInsensitive";
                public const string list = "Block[] Block::list";
                public const string fullMappingDataForClients = "System.Byte[] Block::fullMappingDataForClients";
            }

            public const string CopyDroppedFrom = "System.Void Block::CopyDroppedFrom(Block)";
            public static class CopyDroppedFromInjects
            {
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> System.Collections.Generic.Dictionary`2/Enumerator<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Current()";
                public const string KeyValuePair_2_get_Key = "EnumDropEvent System.Collections.Generic.KeyValuePair`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Key()";
                public const string KeyValuePair_2_get_Value = "System.Collections.Generic.List`1<Block/SItemDropProb> System.Collections.Generic.KeyValuePair`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Value()";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::ContainsKey(EnumDropEvent)";
                public const string Dictionary_2_get_Item_TKey = "System.Collections.Generic.List`1<Block/SItemDropProb> System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Item(EnumDropEvent)";
                public const string Dictionary_2_set_Item_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::set_Item(EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>)";
                public const string List_1_get_Item_Int32 = "Block/SItemDropProb System.Collections.Generic.List`1<Block/SItemDropProb>::get_Item(System.Int32)";
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Block/SItemDropProb>::get_Count()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Block/SItemDropProb>::Add(Block/SItemDropProb)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string itemsToDrop = "System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> Block::itemsToDrop";
                public const string name = "System.String Block/SItemDropProb::name";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Block/SItemDropProb>::.ctor()";
            }

            public const string getInventoryFace = "BlockFace Block::getInventoryFace()";
            public const string GetLightValue = "System.Byte Block::GetLightValue(BlockValue)";
            public static class GetLightValueInjects
            {
                public const string lightValue = "System.Byte Block::lightValue";
            }

            public const string SetLightValue = "Block Block::SetLightValue(System.Single)";
            public static class SetLightValueInjects
            {
                public const string lightValue = "System.Byte Block::lightValue";
            }

            public const string IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
            public static class IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string IBlockAccess_GetBlock_Vector3i = "BlockValue IBlockAccess::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string BlockShape_IsMovementBlocked_BlockValue_BlockFace = "System.Boolean BlockShape::IsMovementBlocked(BlockValue,BlockFace)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
                public const string BlocksMovement = "System.Byte Block::BlocksMovement";
                public const string shape = "BlockShape Block::shape";
            }

            public const string IsSeeThrough = "System.Boolean Block::IsSeeThrough(WorldBase,System.Int32,Vector3i,BlockValue)";
            public static class IsSeeThroughInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string WorldBase_GetBlock_Vector3i = "BlockValue WorldBase::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsSeeThrough_WorldBase_Int32_Vector3i_BlockValue = "System.Boolean Block::IsSeeThrough(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string Block_get_IsCollideSight = "System.Boolean Block::get_IsCollideSight()";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
                public const string shape = "BlockShape Block::shape";
                public const string IsTransparent = "System.Boolean BlockShape::IsTransparent";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
            }

            public const string IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceFlag = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFaceFlag)";
            public static class IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceFlagInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string IBlockAccess_GetBlock_Vector3i = "BlockValue IBlockAccess::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceFlag = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFaceFlag)";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
            }

            public const string IsWaterBlocked = "System.Boolean Block::IsWaterBlocked(IBlockAccess,Vector3i,BlockValue,BlockFaceFlag)";
            public static class IsWaterBlockedInjects
            {
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceFlag = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFaceFlag)";
            }

            public const string IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_Vector3 = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,UnityEngine.Vector3)";
            public static class IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_Vector3Injects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string IBlockAccess_GetBlock_Vector3i = "BlockValue IBlockAccess::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_Vector3 = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,UnityEngine.Vector3)";
                public const string BlockFaceFlags_FrontSidesFromPosition_Vector3i_Vector3 = "BlockFaceFlag BlockFaceFlags::FrontSidesFromPosition(Vector3i,UnityEngine.Vector3)";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
            }

            public const string IsMovementBlockedAny = "System.Boolean Block::IsMovementBlockedAny(IBlockAccess,Vector3i,BlockValue,UnityEngine.Vector3)";
            public static class IsMovementBlockedAnyInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string IBlockAccess_GetBlock_Vector3i = "BlockValue IBlockAccess::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsMovementBlockedAny_IBlockAccess_Vector3i_BlockValue_Vector3 = "System.Boolean Block::IsMovementBlockedAny(IBlockAccess,Vector3i,BlockValue,UnityEngine.Vector3)";
                public const string BlockFaceFlags_FrontSidesFromPosition_Vector3i_Vector3 = "BlockFaceFlag BlockFaceFlags::FrontSidesFromPosition(Vector3i,UnityEngine.Vector3)";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
            }

            public const string JumpFaces = "BlockFaceFlag Block::JumpFaces(BlockValue,System.Single)";
            public static class JumpFacesInjects
            {
                public const string BlockShape_JumpFaces_BlockValue_Single = "BlockFaceFlag BlockShape::JumpFaces(BlockValue,System.Single)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string StepMoveOffsetFromCenter = "UnityEngine.Vector3 Block::StepMoveOffsetFromCenter(BlockValue,BlockFace,BlockFace,System.Single)";
            public static class StepMoveOffsetFromCenterInjects
            {
                public const string BlockShape_StepMoveOffsetFromCenter_BlockValue_BlockFace_BlockFace_Single = "UnityEngine.Vector3 BlockShape::StepMoveOffsetFromCenter(BlockValue,BlockFace,BlockFace,System.Single)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string GetStepHeight = "System.Single Block::GetStepHeight(IBlockAccess,Vector3i,BlockValue,BlockFace)";
            public static class GetStepHeightInjects
            {
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string BlockShape_GetStepHeight_BlockValue_BlockFace = "System.Single BlockShape::GetStepHeight(BlockValue,BlockFace)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string MinStepHeight_BlockValue_BlockFaceFlag = "System.Single Block::MinStepHeight(BlockValue,BlockFaceFlag)";
            public static class MinStepHeight_BlockValue_BlockFaceFlagInjects
            {
                public const string Block_GetStepHeight_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Single Block::GetStepHeight(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string Math_Min_Single_Single = "System.Single System.Math::Min(System.Single,System.Single)";
                public const string Math_Max_Single_Single = "System.Single System.Math::Max(System.Single,System.Single)";
                public const string zero = "Vector3i Vector3i::zero";
            }

            public const string MaxStepHeight_BlockValue_BlockFaceFlag = "System.Single Block::MaxStepHeight(BlockValue,BlockFaceFlag)";
            public static class MaxStepHeight_BlockValue_BlockFaceFlagInjects
            {
                public const string Block_GetStepHeight_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Single Block::GetStepHeight(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string Math_Max_Single_Single = "System.Single System.Math::Max(System.Single,System.Single)";
                public const string zero = "Vector3i Vector3i::zero";
            }

            public const string MinStepHeight_Vector3i_BlockValue_Vector3 = "System.Single Block::MinStepHeight(Vector3i,BlockValue,UnityEngine.Vector3)";
            public static class MinStepHeight_Vector3i_BlockValue_Vector3Injects
            {
                public const string BlockFaceFlags_FrontSidesFromPosition_Vector3i_Vector3 = "BlockFaceFlag BlockFaceFlags::FrontSidesFromPosition(Vector3i,UnityEngine.Vector3)";
                public const string Block_MinStepHeight_BlockValue_BlockFaceFlag = "System.Single Block::MinStepHeight(BlockValue,BlockFaceFlag)";
            }

            public const string MaxStepHeight_Vector3i_BlockValue_Vector3 = "System.Single Block::MaxStepHeight(Vector3i,BlockValue,UnityEngine.Vector3)";
            public static class MaxStepHeight_Vector3i_BlockValue_Vector3Injects
            {
                public const string BlockFaceFlags_FrontSidesFromPosition_Vector3i_Vector3 = "BlockFaceFlag BlockFaceFlags::FrontSidesFromPosition(Vector3i,UnityEngine.Vector3)";
                public const string Block_MaxStepHeight_BlockValue_BlockFaceFlag = "System.Single Block::MaxStepHeight(BlockValue,BlockFaceFlag)";
            }

            public const string GetHardness = "System.Single Block::GetHardness()";
            public static class GetHardnessInjects
            {
                public const string DataItem_1_get_Value = "System.Single DataItem`1<System.Single>::get_Value()";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string Hardness = "DataItem`1<System.Single> MaterialBlock::Hardness";
            }

            public const string GetWeight = "System.Int32 Block::GetWeight()";
            public static class GetWeightInjects
            {
                public const string DataItem_1_get_Value = "System.Int32 DataItem`1<System.Int32>::get_Value()";
                public const string Weight = "DataItem`1<System.Int32> Block::Weight";
            }

            public const string getUVRectFromSideAndMetadata_Int32_BlockFace_Vector3_BlockValue = "UnityEngine.Rect Block::getUVRectFromSideAndMetadata(System.Int32,BlockFace,UnityEngine.Vector3,BlockValue)";
            public static class getUVRectFromSideAndMetadata_Int32_BlockFace_Vector3_BlockValueInjects
            {
                public const string Block_GetSideTextureId_BlockValue_BlockFace = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
                public const string Rect_get_x = "System.Single UnityEngine.Rect::get_x()";
                public const string Rect_get_width = "System.Single UnityEngine.Rect::get_width()";
                public const string Utils_FastRoundToIntAndMod_Single_Int32 = "System.Int32 Utils::FastRoundToIntAndMod(System.Single,System.Int32)";
                public const string Rect_get_y = "System.Single UnityEngine.Rect::get_y()";
                public const string Rect_get_height = "System.Single UnityEngine.Rect::get_height()";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string textureAtlas = "TextureAtlas MeshDescription::textureAtlas";
                public const string uvMapping = "UVRectTiling[] TextureAtlas::uvMapping";
                public const string Empty = "UVRectTiling UVRectTiling::Empty";
                public const string uv = "UnityEngine.Rect UVRectTiling::uv";
                public const string blockW = "System.Int32 UVRectTiling::blockW";
                public const string blockH = "System.Int32 UVRectTiling::blockH";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string Rect_ctor_Single_Single_Single_Single = "System.Void UnityEngine.Rect::.ctor(System.Single,System.Single,System.Single,System.Single)";
            }

            public const string getUVRectFromSideAndRotationWedged = "UnityEngine.Rect Block::getUVRectFromSideAndRotationWedged(System.Int32,BlockFace,System.Int32,UnityEngine.Vector3,BlockValue)";
            public static class getUVRectFromSideAndRotationWedgedInjects
            {
                public const string Block_GetSideTextureId_BlockValue_BlockFace = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
                public const string Rect_get_x = "System.Single UnityEngine.Rect::get_x()";
                public const string Rect_get_width = "System.Single UnityEngine.Rect::get_width()";
                public const string Utils_FastRoundToIntAndMod_Single_Int32 = "System.Int32 Utils::FastRoundToIntAndMod(System.Single,System.Int32)";
                public const string Rect_get_y = "System.Single UnityEngine.Rect::get_y()";
                public const string Rect_get_height = "System.Single UnityEngine.Rect::get_height()";
                public const string Empty = "UVRectTiling UVRectTiling::Empty";
                public const string uv = "UnityEngine.Rect UVRectTiling::uv";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string textureAtlas = "TextureAtlas MeshDescription::textureAtlas";
                public const string uvMapping = "UVRectTiling[] TextureAtlas::uvMapping";
                public const string blockW = "System.Int32 UVRectTiling::blockW";
                public const string blockH = "System.Int32 UVRectTiling::blockH";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string Rect_ctor_Single_Single_Single_Single = "System.Void UnityEngine.Rect::.ctor(System.Single,System.Single,System.Single,System.Single)";
            }

            public const string GetCollidingAABB = "System.Void Block::GetCollidingAABB(BlockValue,System.Int32,System.Int32,System.Int32,System.Single,UnityEngine.Bounds,System.Collections.Generic.List`1<UnityEngine.Bounds>)";
            public static class GetCollidingAABBInjects
            {
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<UnityEngine.Bounds>::Clear()";
                public const string Block_GetCollisionAABB_BlockValue_Int32_Int32_Int32_Single_List_1 = "System.Void Block::GetCollisionAABB(BlockValue,System.Int32,System.Int32,System.Int32,System.Single,System.Collections.Generic.List`1<UnityEngine.Bounds>)";
                public const string List_1_get_Item_Int32 = "UnityEngine.Bounds System.Collections.Generic.List`1<UnityEngine.Bounds>::get_Item(System.Int32)";
                public const string Bounds_Intersects_Bounds = "System.Boolean UnityEngine.Bounds::Intersects(UnityEngine.Bounds)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<UnityEngine.Bounds>::Add(UnityEngine.Bounds)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<UnityEngine.Bounds>::get_Count()";
                public const string staticList_IntersectRayWithBlockList = "System.Collections.Generic.List`1<UnityEngine.Bounds> Block::staticList_IntersectRayWithBlockList";
            }

            public const string GetCollisionAABB = "System.Void Block::GetCollisionAABB(BlockValue,System.Int32,System.Int32,System.Int32,System.Single,System.Collections.Generic.List`1<UnityEngine.Bounds>)";
            public static class GetCollisionAABBInjects
            {
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
                public const string BlockShape_GetBounds_BlockValue = "UnityEngine.Bounds[] BlockShape::GetBounds(BlockValue)";
                public const string Bounds_get_center = "UnityEngine.Vector3 UnityEngine.Bounds::get_center()";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Bounds_set_center_Vector3 = "System.Void UnityEngine.Bounds::set_center(UnityEngine.Vector3)";
                public const string Bounds_get_max = "UnityEngine.Vector3 UnityEngine.Bounds::get_max()";
                public const string Bounds_set_max_Vector3 = "System.Void UnityEngine.Bounds::set_max(UnityEngine.Vector3)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<UnityEngine.Bounds>::Add(UnityEngine.Bounds)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string GetClipBoundsList = "System.Collections.Generic.IList`1<UnityEngine.Bounds> Block::GetClipBoundsList(BlockValue,UnityEngine.Vector3)";
            public static class GetClipBoundsListInjects
            {
                public const string BlockShape_GetBounds_BlockValue = "UnityEngine.Bounds[] BlockShape::GetBounds(BlockValue)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string UpdateTick = "System.Boolean Block::UpdateTick(WorldBase,System.Int32,Vector3i,BlockValue,System.Boolean,System.UInt64,GameRandom)";
            public const string DoExchangeAction = "System.Void Block::DoExchangeAction(WorldBase,Vector3i,BlockValue,System.String,System.Int32)";
            public const string OnBlockLoaded = "System.Void Block::OnBlockLoaded(WorldBase,System.Int32,Vector3i,BlockValue)";
            public static class OnBlockLoadedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockLoaded_WorldBase_Int32_Vector3i_BlockValue = "System.Void BlockShape::OnBlockLoaded(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string OnBlockUnloaded = "System.Void Block::OnBlockUnloaded(WorldBase,System.Int32,Vector3i,BlockValue)";
            public static class OnBlockUnloadedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockUnloaded_WorldBase_Int32_Vector3i_BlockValue = "System.Void BlockShape::OnBlockUnloaded(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string OnNeighborBlockChange = "System.Void Block::OnNeighborBlockChange(WorldBase,System.Int32,Vector3i,BlockValue,Vector3i,BlockValue,BlockValue)";
            public const string CanFallBelow = "System.Boolean Block::CanFallBelow(WorldBase,System.Int32,System.Int32,System.Int32)";
            public static class CanFallBelowInjects
            {
                public const string WorldBase_GetBlock_Int32_Int32_Int32 = "BlockValue WorldBase::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string list = "Block[] Block::list";
                public const string StabilitySupport = "System.Boolean Block::StabilitySupport";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
            }

            public const string GetTickRate = "System.UInt64 Block::GetTickRate()";
            public const string OnBlockAdded = "System.Void Block::OnBlockAdded(WorldBase,Chunk,Vector3i,BlockValue)";
            public static class OnBlockAddedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockAdded_WorldBase_Chunk_Vector3i_BlockValue = "System.Void BlockShape::OnBlockAdded(WorldBase,Chunk,Vector3i,BlockValue)";
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string MultiBlockArray_AddChilds_WorldBase_Chunk_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::AddChilds(WorldBase,Chunk,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
            }

            public const string OnBlockRemoved = "System.Void Block::OnBlockRemoved(WorldBase,Chunk,Vector3i,BlockValue)";
            public static class OnBlockRemovedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockRemoved_WorldBase_Chunk_Vector3i_BlockValue = "System.Void BlockShape::OnBlockRemoved(WorldBase,Chunk,Vector3i,BlockValue)";
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string MultiBlockArray_RemoveChilds_WorldBase_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::RemoveChilds(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string MultiBlockArray_RemoveParentBlock_WorldBase_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::RemoveParentBlock(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
            }

            public const string OnBlockValueChanged = "System.Void Block::OnBlockValueChanged(WorldBase,Chunk,System.Int32,Vector3i,BlockValue,BlockValue)";
            public static class OnBlockValueChangedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockValueChanged_WorldBase_Vector3i_Int32_BlockValue_BlockValue = "System.Void BlockShape::OnBlockValueChanged(WorldBase,Vector3i,System.Int32,BlockValue,BlockValue)";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string ChunkClusterList_get_Item_Int32 = "ChunkCluster ChunkClusterList::get_Item(System.Int32)";
                public const string MultiBlockArray_RemoveChilds_WorldBase_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::RemoveChilds(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string MultiBlockArray_AddChilds_WorldBase_Chunk_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::AddChilds(WorldBase,Chunk,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string ChunkClusters = "ChunkClusterList WorldBase::ChunkClusters";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
            }

            public const string OnBlockEntityTransformBeforeActivated = "System.Void Block::OnBlockEntityTransformBeforeActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
            public static class OnBlockEntityTransformBeforeActivatedInjects
            {
                public const string BlockShape_OnBlockEntityTransformBeforeActivated_WorldBase_Vector3i_Int32_BlockValue_BlockEntityData = "System.Void BlockShape::OnBlockEntityTransformBeforeActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string OnBlockEntityTransformAfterActivated = "System.Void Block::OnBlockEntityTransformAfterActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
            public static class OnBlockEntityTransformAfterActivatedInjects
            {
                public const string BlockShape_OnBlockEntityTransformAfterActivated_WorldBase_Vector3i_Int32_BlockValue_BlockEntityData = "System.Void BlockShape::OnBlockEntityTransformAfterActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
                public const string BlockEntityData_UpdateTemperature = "System.Void BlockEntityData::UpdateTemperature()";
                public const string Block_ForceAnimationState_BlockValue_BlockEntityData = "System.Void Block::ForceAnimationState(BlockValue,BlockEntityData)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string ForceAnimationState = "System.Void Block::ForceAnimationState(BlockValue,BlockEntityData)";
            public const string DamageBlock = "System.Int32 Block::DamageBlock(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Int32,System.Boolean,System.Boolean)";
            public static class DamageBlockInjects
            {
                public const string Block_OnBlockDamaged_WorldBase_Int32_Vector3i_BlockValue_Int32_Int32_Boolean_Boolean_Int32 = "System.Int32 Block::OnBlockDamaged(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)";
            }

            public const string OnBlockDamaged = "System.Int32 Block::OnBlockDamaged(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)";
            public static class OnBlockDamagedInjects
            {
                public const string ChunkClusterList_get_Item_Int32 = "ChunkCluster ChunkClusterList::get_Item(System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string ChunkCluster_GetBlock_Vector3i = "BlockValue ChunkCluster::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_OnBlockDamaged_WorldBase_Int32_Vector3i_BlockValue_Int32_Int32_Boolean_Boolean_Int32 = "System.Int32 Block::OnBlockDamaged(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)";
                public const string ChunkCluster_InvokeOnBlockDamagedDelegates_Vector3i_BlockValue_Int32_Int32 = "System.Void ChunkCluster::InvokeOnBlockDamagedDelegates(Vector3i,BlockValue,System.Int32,System.Int32)";
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string BlockPlaceholderMap_Replace_BlockValue_GameRandom_Int32_Int32_Boolean_QuestTags = "BlockValue BlockPlaceholderMap::Replace(BlockValue,GameRandom,System.Int32,System.Int32,System.Boolean,QuestTags)";
                public const string Block_convertRotation_BlockValue_BlockValue = "System.Byte Block::convertRotation(BlockValue,BlockValue)";
                public const string BlockValue_set_rotation_Byte = "System.Void BlockValue::set_rotation(System.Byte)";
                public const string BlockValue_get_meta = "System.Byte BlockValue::get_meta()";
                public const string BlockValue_set_meta_Byte = "System.Void BlockValue::set_meta(System.Byte)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string WorldBase_SetBlockRPC_Int32_Vector3i_BlockValue = "System.Void WorldBase::SetBlockRPC(System.Int32,Vector3i,BlockValue)";
                public const string ChunkCluster_GetTextureFull_Vector3i = "System.Int64 ChunkCluster::GetTextureFull(Vector3i)";
                public const string GameManager_SetBlockTextureServer_Vector3i_BlockFace_Int32_Int32 = "System.Void GameManager::SetBlockTextureServer(Vector3i,BlockFace,System.Int32,System.Int32)";
                public const string WorldBase_SetBlockRPC_Int32_Vector3i_BlockValue_SByte = "System.Void WorldBase::SetBlockRPC(System.Int32,Vector3i,BlockValue,System.SByte)";
                public const string Block_OnBlockDestroyedBy_WorldBase_Int32_Vector3i_BlockValue_Int32_Boolean = "Block/DestroyedResult Block::OnBlockDestroyedBy(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Boolean)";
                public const string Block_GetColorForSide_BlockValue_BlockFace = "UnityEngine.Color Block::GetColorForSide(BlockValue,BlockFace)";
                public const string Block_SpawnDestroyParticleEffect_WorldBase_BlockValue_Vector3i_Single_Color_Int32 = "System.Void Block::SpawnDestroyParticleEffect(WorldBase,BlockValue,Vector3i,System.Single,UnityEngine.Color,System.Int32)";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string List_1_get_Item_Int32 = "BlockFace System.Collections.Generic.List`1<BlockFace>::get_Item(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockFace>::get_Count()";
                public const string QuestEventManager_get_Current = "QuestEventManager QuestEventManager::get_Current()";
                public const string QuestEventManager_BlockDestroyed_Block_Vector3i = "System.Void QuestEventManager::BlockDestroyed(Block,Vector3i)";
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string TileEntity_OnDestroy = "System.Void TileEntity::OnDestroy()";
                public const string ReadOnlyCollection_1_get_Item_Int32 = "LocalPlayerUI System.Collections.ObjectModel.ReadOnlyCollection`1<LocalPlayerUI>::get_Item(System.Int32)";
                public const string LocalPlayerUI_get_windowManager = "GUIWindowManager LocalPlayerUI::get_windowManager()";
                public const string GUIWindowManager_IsWindowOpen_String = "System.Boolean GUIWindowManager::IsWindowOpen(System.String)";
                public const string LocalPlayerUI_get_xui = "XUi LocalPlayerUI::get_xui()";
                public const string XUi_GetWindow_String = "XUiV_Window XUi::GetWindow(System.String)";
                public const string XUiView_get_Controller = "XUiController XUiView::get_Controller()";
                public const string XUiC_LootWindow_GetLootBlockPos = "Vector3i XUiC_LootWindow::GetLootBlockPos()";
                public const string Vector3i_op_Equality_Vector3i_Vector3i = "System.Boolean Vector3i::op_Equality(Vector3i,Vector3i)";
                public const string GUIWindowManager_Close_String = "System.Void GUIWindowManager::Close(System.String)";
                public const string ReadOnlyCollection_1_get_Count = "System.Int32 System.Collections.ObjectModel.ReadOnlyCollection`1<LocalPlayerUI>::get_Count()";
                public const string WorldBase_GetChunkFromWorldPos_Vector3i = "IChunk WorldBase::GetChunkFromWorldPos(Vector3i)";
                public const string World_toBlock_Vector3i = "Vector3i World::toBlock(Vector3i)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<BlockChangeInfo>::Add(BlockChangeInfo)";
                public const string WorldBase_SetBlocksRPC_List_1 = "System.Void WorldBase::SetBlocksRPC(System.Collections.Generic.List`1<BlockChangeInfo>)";
                public const string WorldBase_GetDensity_Int32_Vector3i = "System.SByte WorldBase::GetDensity(System.Int32,Vector3i)";
                public const string Utils_FastMin_Single_Single = "System.Single Utils::FastMin(System.Single,System.Single)";
                public const string ChunkClusters = "ChunkClusterList WorldBase::ChunkClusters";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
                public const string list = "Block[] Block::list";
                public const string damage = "System.Int32 BlockValue::damage";
                public const string MaxDamage = "System.Int32 Block::MaxDamage";
                public const string UpgradeBlock = "BlockValue Block::UpgradeBlock";
                public const string Instance = "BlockPlaceholderMap BlockPlaceholderMap::Instance";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string shape = "BlockShape Block::shape";
                public const string Density = "System.SByte Block::Density";
                public const string DowngradeBlock = "BlockValue Block::DowngradeBlock";
                public const string RemovePaintOnDowngrade = "System.Collections.Generic.List`1<BlockFace> Block::RemovePaintOnDowngrade";
                public const string EnablePassThroughDamage = "System.Boolean Block::EnablePassThroughDamage";
                public const string Air = "BlockValue BlockValue::Air";
                public const string PlayerUIs = "System.Collections.ObjectModel.ReadOnlyCollection`1<LocalPlayerUI> LocalPlayerUI::PlayerUIs";
                public const string DensityTerrain = "System.SByte MarchingCubes::DensityTerrain";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<BlockChangeInfo>::.ctor()";
                public const string BlockChangeInfo_ctor_Vector3i_BlockValue_Boolean_Boolean = "System.Void BlockChangeInfo::.ctor(Vector3i,BlockValue,System.Boolean,System.Boolean)";
            }

            public const string convertRotation = "System.Byte Block::convertRotation(BlockValue,BlockValue)";
            public static class convertRotationInjects
            {
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
            }

            public const string AddDroppedId = "System.Void Block::AddDroppedId(EnumDropEvent,System.String,System.Int32,System.Int32,System.Single,System.Single,System.String,System.String)";
            public static class AddDroppedIdInjects
            {
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::ContainsKey(EnumDropEvent)";
                public const string Dictionary_2_get_Item_TKey = "System.Collections.Generic.List`1<Block/SItemDropProb> System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Item(EnumDropEvent)";
                public const string Dictionary_2_set_Item_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::set_Item(EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Block/SItemDropProb>::Add(Block/SItemDropProb)";
                public const string itemsToDrop = "System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> Block::itemsToDrop";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Block/SItemDropProb>::.ctor()";
                public const string SItemDropProb_ctor_String_Int32_Int32_Single_Single_String_String = "System.Void Block/SItemDropProb::.ctor(System.String,System.Int32,System.Int32,System.Single,System.Single,System.String,System.String)";
            }

            public const string HasItemsToDropForEvent = "System.Boolean Block::HasItemsToDropForEvent(EnumDropEvent)";
            public static class HasItemsToDropForEventInjects
            {
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::ContainsKey(EnumDropEvent)";
                public const string itemsToDrop = "System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> Block::itemsToDrop";
            }

            public const string DropItemsOnEvent = "System.Void Block::DropItemsOnEvent(WorldBase,BlockValue,EnumDropEvent,System.Single,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32,System.Boolean)";
            public static class DropItemsOnEventInjects
            {
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<ItemStack>::Clear()";
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::TryGetValue(EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>&)";
                public const string BlockValue_ToItemValue = "ItemValue BlockValue::ToItemValue()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<ItemStack>::Add(ItemStack)";
                public const string List_1_get_Item_Int32 = "Block/SItemDropProb System.Collections.Generic.List`1<Block/SItemDropProb>::get_Item(System.Int32)";
                public const string GameRandom_RandomRange_Int32_Int32 = "System.Int32 GameRandom::RandomRange(System.Int32,System.Int32)";
                public const string GameRandom_get_RandomFloat = "System.Single GameRandom::get_RandomFloat()";
                public const string String_Equals_String = "System.Boolean System.String::Equals(System.String)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string CraftingManager_GetRecipes_String = "System.Collections.Generic.List`1<Recipe> CraftingManager::GetRecipes(System.String)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Recipe>::get_Count()";
                public const string ItemClass_GetItem_String_Boolean = "ItemValue ItemClass::GetItem(System.String,System.Boolean)";
                public const string ItemValue_IsEmpty = "System.Boolean ItemValue::IsEmpty()";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string World_worldToBlockPos_Vector3 = "Vector3i World::worldToBlockPos(UnityEngine.Vector3)";
                public const string WorldBase_GetBlock_Vector3i = "BlockValue WorldBase::GetBlock(Vector3i)";
                public const string WorldBase_SetBlockRPC_Vector3i_BlockValue = "System.Void WorldBase::SetBlockRPC(Vector3i,BlockValue)";
                public const string ItemValue_get_ItemClass = "ItemClass ItemValue::get_ItemClass()";
                public const string ItemClass_GetLifetimeOnDrop = "System.Single ItemClass::GetLifetimeOnDrop()";
                public const string WorldBase_GetGameManager = "IGameManager WorldBase::GetGameManager()";
                public const string IGameManager_ItemDropServer_ItemStack_Vector3_Vector3_Int32_Single_Boolean = "System.Void IGameManager::ItemDropServer(ItemStack,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean)";
                public const string itemsDropped = "System.Collections.Generic.List`1<ItemStack> Block::itemsDropped";
                public const string itemsToDrop = "System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> Block::itemsToDrop";
                public const string minCount = "System.Int32 Block/SItemDropProb::minCount";
                public const string maxCount = "System.Int32 Block/SItemDropProb::maxCount";
                public const string stickChance = "System.Single Block/SItemDropProb::stickChance";
                public const string name = "System.String Block/SItemDropProb::name";
                public const string list = "Block[] Block::list";
                public const string ingredients = "System.Collections.Generic.List`1<ItemStack> Recipe::ingredients";
                public const string count = "System.Int32 ItemStack::count";
                public const string itemValue = "ItemValue ItemStack::itemValue";
                public const string type = "System.Int32 ItemValue::type";
                public const string prob = "System.Single Block/SItemDropProb::prob";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string ItemStack_ctor_ItemValue_Int32 = "System.Void ItemStack::.ctor(ItemValue,System.Int32)";
                public const string ItemValue_ctor_Int32_Boolean = "System.Void ItemValue::.ctor(System.Int32,System.Boolean)";
            }

            public const string GetResistance = "System.Single Block::GetResistance()";
            public static class GetResistanceInjects
            {
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string Resistance = "System.Single MaterialBlock::Resistance";
            }

            public const string intersectRayWithBlock = "System.Boolean Block::intersectRayWithBlock(BlockValue,System.Int32,System.Int32,System.Int32,UnityEngine.Ray,UnityEngine.Vector3&,World)";
            public static class intersectRayWithBlockInjects
            {
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<UnityEngine.Bounds>::Clear()";
                public const string Block_GetCollisionAABB_BlockValue_Int32_Int32_Int32_Single_List_1 = "System.Void Block::GetCollisionAABB(BlockValue,System.Int32,System.Int32,System.Int32,System.Single,System.Collections.Generic.List`1<UnityEngine.Bounds>)";
                public const string List_1_get_Item_Int32 = "UnityEngine.Bounds System.Collections.Generic.List`1<UnityEngine.Bounds>::get_Item(System.Int32)";
                public const string Bounds_IntersectRay_Ray = "System.Boolean UnityEngine.Bounds::IntersectRay(UnityEngine.Ray)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<UnityEngine.Bounds>::get_Count()";
                public const string Vector3_get_zero = "UnityEngine.Vector3 UnityEngine.Vector3::get_zero()";
                public const string staticList_IntersectRayWithBlockList = "System.Collections.Generic.List`1<UnityEngine.Bounds> Block::staticList_IntersectRayWithBlockList";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string OnBlockDestroyedByExplosion = "Block/DestroyedResult Block::OnBlockDestroyedByExplosion(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32)";
            public static class OnBlockDestroyedByExplosionInjects
            {
                public const string ChunkClusterList_get_Item_Int32 = "ChunkCluster ChunkClusterList::get_Item(System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string ChunkCluster_InvokeOnBlockDamagedDelegates_Vector3i_BlockValue_Int32_Int32 = "System.Void ChunkCluster::InvokeOnBlockDamagedDelegates(Vector3i,BlockValue,System.Int32,System.Int32)";
                public const string ChunkClusters = "ChunkClusterList WorldBase::ChunkClusters";
                public const string list = "Block[] Block::list";
                public const string MaxDamage = "System.Int32 Block::MaxDamage";
            }

            public const string OnBlockStartsToFall = "System.Void Block::OnBlockStartsToFall(WorldBase,Vector3i,BlockValue)";
            public static class OnBlockStartsToFallInjects
            {
                public const string WorldBase_SetBlockRPC_Vector3i_BlockValue = "System.Void WorldBase::SetBlockRPC(Vector3i,BlockValue)";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string CanPlaceBlockAt = "System.Boolean Block::CanPlaceBlockAt(WorldBase,System.Int32,Vector3i,BlockValue,System.Boolean)";
            public static class CanPlaceBlockAtInjects
            {
                public const string GameManager_IsEditMode = "System.Boolean GameManager::IsEditMode()";
                public const string World_IsWithinTraderArea_Vector3i = "System.Boolean World::IsWithinTraderArea(Vector3i)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_overlapsWithOtherBlock_WorldBase_Int32_Vector3i_BlockValue = "System.Boolean Block::overlapsWithOtherBlock(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string y = "System.Int32 Vector3i::y";
                public const string Instance = "GameManager GameManager::Instance";
                public const string list = "Block[] Block::list";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string dim = "Vector3i Block/MultiBlockArray::dim";
            }

            public const string GetFreePlacementPosition = "Vector3i Block::GetFreePlacementPosition(WorldBase,System.Int32,Vector3i,BlockValue,EntityAlive)";
            public static class GetFreePlacementPositionInjects
            {
                public const string Entity_getHeadPosition = "UnityEngine.Vector3 Entity::getHeadPosition()";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Vector3_get_one = "UnityEngine.Vector3 UnityEngine.Vector3::get_one()";
                public const string Vector3_op_Multiply_Vector3_Single = "UnityEngine.Vector3 UnityEngine.Vector3::op_Multiply(UnityEngine.Vector3,System.Single)";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Vector3_op_Subtraction_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Subtraction(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Voxel_OneVoxelStep_Vector3i_Vector3_Vector3_Vector3_BlockFace_ = "Vector3i Voxel::OneVoxelStep(Vector3i,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3&,BlockFace&)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_overlapsWithOtherBlock_WorldBase_Int32_Vector3i_BlockValue = "System.Boolean Block::overlapsWithOtherBlock(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string list = "Block[] Block::list";
            }

            public const string overlapsWithOtherBlock = "System.Boolean Block::overlapsWithOtherBlock(WorldBase,System.Int32,Vector3i,BlockValue)";
            public static class overlapsWithOtherBlockInjects
            {
                public const string WorldBase_GetBlock_Int32_Vector3i = "BlockValue WorldBase::GetBlock(System.Int32,Vector3i)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string MultiBlockArray_Get_Int32_Int32_Int32 = "Vector3i Block/MultiBlockArray::Get(System.Int32,System.Int32,System.Int32)";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string list = "Block[] Block::list";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsGroundCover = "System.Boolean MaterialBlock::IsGroundCover";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string Length = "System.Int32 Block/MultiBlockArray::Length";
            }

            public const string OnBlockPlaced = "BlockValue Block::OnBlockPlaced(WorldBase,System.Int32,Vector3i,BlockValue,GameRandom)";
            public const string OnBlockPlaceBefore = "System.Void Block::OnBlockPlaceBefore(WorldBase,BlockPlacement/Result&,EntityAlive,GameRandom)";
            public static class OnBlockPlaceBeforeInjects
            {
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Inventory_get_holdingItemItemValue = "ItemValue Inventory::get_holdingItemItemValue()";
                public const string Block_GetAltBlockValue_Int32 = "BlockValue Block::GetAltBlockValue(System.Int32)";
                public const string BlockValue_set_rotation_Byte = "System.Void BlockValue::set_rotation(System.Byte)";
                public const string Block_GetPlaceAltBlockValue_WorldBase = "System.String Block::GetPlaceAltBlockValue(WorldBase)";
                public const string String_get_Length = "System.Int32 System.String::get_Length()";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string SelectAlternates = "System.Boolean Block::SelectAlternates";
                public const string blockValue = "BlockValue BlockPlacement/Result::blockValue";
                public const string inventory = "Inventory EntityAlive::inventory";
                public const string Meta = "System.Int32 ItemValue::Meta";
            }

            public const string PlaceBlock = "System.Void Block::PlaceBlock(WorldBase,BlockPlacement/Result,EntityAlive)";
            public static class PlaceBlockInjects
            {
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string WorldBase_SetBlockRPC_Int32_Vector3i_BlockValue_SByte = "System.Void WorldBase::SetBlockRPC(System.Int32,Vector3i,BlockValue,System.SByte)";
                public const string WorldBase_SetBlockRPC_Int32_Vector3i_BlockValue = "System.Void WorldBase::SetBlockRPC(System.Int32,Vector3i,BlockValue)";
                public const string String_Equals_String = "System.Boolean System.String::Equals(System.String)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string Platform_get_AchievementManager = "AchievementManager Platform::get_AchievementManager()";
                public const string AchievementManager_SetAchievementStat_UserProfile_EnumAchievementDataStat_Int32 = "System.Void AchievementManager::SetAchievementStat(UserProfile,EnumAchievementDataStat,System.Int32)";
                public const string list = "Block[] Block::list";
                public const string blockValue = "BlockValue BlockPlacement/Result::blockValue";
                public const string shape = "BlockShape Block::shape";
                public const string clrIdx = "System.Int32 BlockPlacement/Result::clrIdx";
                public const string blockPos = "Vector3i BlockPlacement/Result::blockPos";
                public const string Density = "System.SByte Block::Density";
                public const string IsTerrainDecoration = "System.Boolean Block::IsTerrainDecoration";
                public const string DensityAir = "System.SByte MarchingCubes::DensityAir";
                public const string blockName = "System.String Block::blockName";
                public const string user = "UserProfile EntityPlayerLocal::user";
            }

            public const string OnBlockDestroyedBy = "Block/DestroyedResult Block::OnBlockDestroyedBy(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Boolean)";
            public const string OnBlockPickedUp = "ItemStack Block::OnBlockPickedUp(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32)";
            public static class OnBlockPickedUpInjects
            {
                public const string ItemClass_GetItem_String_Boolean = "ItemValue ItemClass::GetItem(System.String,System.Boolean)";
                public const string BlockValue_ToItemValue = "ItemValue BlockValue::ToItemValue()";
                public const string PickedUpItemValue = "System.String Block::PickedUpItemValue";
                public const string PickupTarget = "System.String Block::PickupTarget";
                public const string type = "System.Int32 ItemValue::type";
                public const string ItemStack_ctor_ItemValue_Int32 = "System.Void ItemStack::.ctor(ItemValue,System.Int32)";
                public const string ItemValue_ctor_Int32_Boolean = "System.Void ItemValue::.ctor(System.Int32,System.Boolean)";
            }

            public const string OnBlockActivated_WorldBase_Int32_Vector3i_BlockValue_EntityAlive = "System.Boolean Block::OnBlockActivated(WorldBase,System.Int32,Vector3i,BlockValue,EntityAlive)";
            public static class OnBlockActivated_WorldBase_Int32_Vector3i_BlockValue_EntityAliveInjects
            {
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string EntityAlive_set_AimingGun_Boolean = "System.Void EntityAlive::set_AimingGun(System.Boolean)";
                public const string TileEntity_ToWorldPos = "Vector3i TileEntity::ToWorldPos()";
                public const string WorldBase_GetGameManager = "IGameManager WorldBase::GetGameManager()";
                public const string IGameManager_TELockServer_Int32_Vector3i_Int32_Int32_String = "System.Void IGameManager::TELockServer(System.Int32,Vector3i,System.Int32,System.Int32,System.String)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string EffectManager_GetValue_PassiveEffects_ItemValue_Single_EntityAlive_Recipe_FastTags_Boolean_Boolean_Boolean_Boolean_Int32_Boolean = "System.Single EffectManager::GetValue(PassiveEffects,ItemValue,System.Single,EntityAlive,Recipe,FastTags,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)";
                public const string IGameManager_GetPersistentLocalPlayer = "PersistentPlayerData IGameManager::GetPersistentLocalPlayer()";
                public const string WorldBase_CanPickupBlockAt_Vector3i_PersistentPlayerData = "System.Boolean WorldBase::CanPickupBlockAt(Vector3i,PersistentPlayerData)";
                public const string Entity_PlayOneShot_String_Boolean = "System.Void Entity::PlayOneShot(System.String,System.Boolean)";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string GameManager_ShowTooltipWithAlert_EntityPlayerLocal_String_String = "System.Void GameManager::ShowTooltipWithAlert(EntityPlayerLocal,System.String,System.String)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_OnBlockPickedUp_WorldBase_Int32_Vector3i_BlockValue_Int32 = "ItemStack Block::OnBlockPickedUp(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32)";
                public const string Inventory_CanTakeItem_ItemStack = "System.Boolean Inventory::CanTakeItem(ItemStack)";
                public const string Bag_CanTakeItem_ItemStack = "System.Boolean Bag::CanTakeItem(ItemStack)";
                public const string QuestEventManager_get_Current = "QuestEventManager QuestEventManager::get_Current()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string QuestEventManager_BlockPickedUp_String_Vector3i = "System.Void QuestEventManager::BlockPickedUp(System.String,Vector3i)";
                public const string QuestEventManager_ItemAdded_ItemStack = "System.Void QuestEventManager::ItemAdded(ItemStack)";
                public const string IGameManager_PickupBlockServer_Int32_Vector3i_BlockValue_Int32_String = "System.Void IGameManager::PickupBlockServer(System.Int32,Vector3i,BlockValue,System.Int32,System.String)";
                public const string bTouched = "System.Boolean TileEntityLootContainer::bTouched";
                public const string bWasTouched = "System.Boolean TileEntityLootContainer::bWasTouched";
                public const string entityId = "System.Int32 TileEntity::entityId";
                public const string CanPickup = "System.Boolean Block::CanPickup";
                public const string Tags = "FastTags Block::Tags";
                public const string damage = "System.Int32 BlockValue::damage";
                public const string list = "Block[] Block::list";
                public const string inventory = "Inventory EntityAlive::inventory";
                public const string bag = "Bag EntityAlive::bag";
            }

            public const string OnEntityCollidedWithBlock = "System.Boolean Block::OnEntityCollidedWithBlock(WorldBase,System.Int32,Vector3i,BlockValue,Entity)";
            public const string OnEntityWalking = "System.Void Block::OnEntityWalking(WorldBase,System.Int32,System.Int32,System.Int32,BlockValue,Entity)";
            public const string CanPlantStay = "System.Boolean Block::CanPlantStay(WorldBase,System.Int32,Vector3i,BlockValue)";
            public const string SetBlockName = "System.Void Block::SetBlockName(System.String)";
            public static class SetBlockNameInjects
            {
                public const string blockName = "System.String Block::blockName";
            }

            public const string GetBlockName = "System.String Block::GetBlockName()";
            public static class GetBlockNameInjects
            {
                public const string blockName = "System.String Block::blockName";
            }

            public const string SetLocalizedBlockName = "System.Void Block::SetLocalizedBlockName(System.String)";
            public static class SetLocalizedBlockNameInjects
            {
                public const string localizedBlockName = "System.String Block::localizedBlockName";
            }

            public const string GetLocalizedBlockName = "System.String Block::GetLocalizedBlockName()";
            public static class GetLocalizedBlockNameInjects
            {
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string localizedBlockName = "System.String Block::localizedBlockName";
            }

            public const string SetSideTextureId_Int32 = "System.Void Block::SetSideTextureId(System.Int32)";
            public static class SetSideTextureId_Int32Injects
            {
                public const string singleTextureId = "System.Int32 Block::singleTextureId";
                public const string bTextureForEachSide = "System.Boolean Block::bTextureForEachSide";
            }

            public const string SetSideTextureId_BlockFace_Int32 = "System.Void Block::SetSideTextureId(BlockFace,System.Int32)";
            public static class SetSideTextureId_BlockFace_Int32Injects
            {
                public const string sideTextureIds = "System.Int32[] Block::sideTextureIds";
                public const string bTextureForEachSide = "System.Boolean Block::bTextureForEachSide";
            }

            public const string GetSideTextureId = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
            public static class GetSideTextureIdInjects
            {
                public const string BlockShape_MapSideAndRotationToTextureIdx_BlockValue_BlockFace = "System.Int32 BlockShape::MapSideAndRotationToTextureIdx(BlockValue,BlockFace)";
                public const string bTextureForEachSide = "System.Boolean Block::bTextureForEachSide";
                public const string shape = "BlockShape Block::shape";
                public const string sideTextureIds = "System.Int32[] Block::sideTextureIds";
                public const string singleTextureId = "System.Int32 Block::singleTextureId";
            }

            public const string GetMaterialForSide = "MaterialBlock Block::GetMaterialForSide(BlockValue,BlockFace)";
            public static class GetMaterialForSideInjects
            {
                public const string Block_GetSideTextureId_BlockValue_BlockFace = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_get_MeshIndex = "System.Byte Block::get_MeshIndex()";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string list = "Block[] Block::list";
                public const string textureAtlas = "TextureAtlas MeshDescription::textureAtlas";
                public const string uvMapping = "UVRectTiling[] TextureAtlas::uvMapping";
                public const string material = "MaterialBlock UVRectTiling::material";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
            }

            public const string GetParticleForSide = "System.String Block::GetParticleForSide(BlockValue,BlockFace)";
            public static class GetParticleForSideInjects
            {
                public const string Block_GetMaterialForSide_BlockValue_BlockFace = "MaterialBlock Block::GetMaterialForSide(BlockValue,BlockFace)";
                public const string ParticleCategory = "System.String MaterialBlock::ParticleCategory";
                public const string SurfaceCategory = "System.String MaterialBlock::SurfaceCategory";
            }

            public const string GetDestroyParticle = "System.String Block::GetDestroyParticle(BlockValue)";
            public static class GetDestroyParticleInjects
            {
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string ParticleDestroyCategory = "System.String MaterialBlock::ParticleDestroyCategory";
                public const string ParticleCategory = "System.String MaterialBlock::ParticleCategory";
                public const string SurfaceCategory = "System.String MaterialBlock::SurfaceCategory";
            }

            public const string GetColorForSide = "UnityEngine.Color Block::GetColorForSide(BlockValue,BlockFace)";
            public static class GetColorForSideInjects
            {
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_get_MeshIndex = "System.Byte Block::get_MeshIndex()";
                public const string Block_GetSideTextureId_BlockValue_BlockFace = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
                public const string Color_get_gray = "UnityEngine.Color UnityEngine.Color::get_gray()";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string list = "Block[] Block::list";
                public const string textureAtlas = "TextureAtlas MeshDescription::textureAtlas";
                public const string uvMapping = "UVRectTiling[] TextureAtlas::uvMapping";
                public const string color = "UnityEngine.Color UVRectTiling::color";
            }

            public const string GetMapColor = "UnityEngine.Color Block::GetMapColor(BlockValue,UnityEngine.Vector3,System.Int32)";
            public static class GetMapColorInjects
            {
                public const string Block_GetColorForSide_BlockValue_BlockFace = "UnityEngine.Color Block::GetColorForSide(BlockValue,BlockFace)";
                public const string Utils_FastMax_Int32_Int32 = "System.Int32 Utils::FastMax(System.Int32,System.Int32)";
                public const string Color_Lerp_Color_Color_Single = "UnityEngine.Color UnityEngine.Color::Lerp(UnityEngine.Color,UnityEngine.Color,System.Single)";
                public const string Utils_FastMax_Single_Single = "System.Single Utils::FastMax(System.Single,System.Single)";
                public const string Color_op_Multiply_Color_Single = "UnityEngine.Color UnityEngine.Color::op_Multiply(UnityEngine.Color,System.Single)";
                public const string Color_op_Addition_Color_Color = "UnityEngine.Color UnityEngine.Color::op_Addition(UnityEngine.Color,UnityEngine.Color)";
                public const string Utils_Saturate_Color = "UnityEngine.Color Utils::Saturate(UnityEngine.Color)";
                public const string bMapColorSet = "System.Boolean Block::bMapColorSet";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string MapColor = "UnityEngine.Color Block::MapColor";
                public const string MapSpecular = "System.Single Block::MapSpecular";
                public const string bMapColor2Set = "System.Boolean Block::bMapColor2Set";
                public const string MapElevMinMax = "Vector2i Block::MapElevMinMax";
                public const string y = "System.Int32 Vector2i::y";
                public const string MapColor2 = "UnityEngine.Color Block::MapColor2";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string a = "System.Single UnityEngine.Color::a";
            }

            public const string CanDrop = "System.Boolean Block::CanDrop(BlockValue)";
            public static class CanDropInjects
            {
                public const string BlockValue_Equals_BlockValue = "System.Boolean BlockValue::Equals(BlockValue)";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string IsElevator = "System.Boolean Block::IsElevator()";
            public const string IsElevator_Int32 = "System.Boolean Block::IsElevator(System.Int32)";
            public const string IsPlant = "System.Boolean Block::IsPlant()";
            public static class IsPlantInjects
            {
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsPlant = "System.Boolean MaterialBlock::IsPlant";
                public const string bIsPlant = "System.Boolean Block::bIsPlant";
            }

            public const string HasTag = "System.Boolean Block::HasTag(BlockTags)";
            public static class HasTagInjects
            {
                public const string BlockTag = "BlockTags Block::BlockTag";
            }

            public const string HasAnyFastTags = "System.Boolean Block::HasAnyFastTags(FastTags)";
            public static class HasAnyFastTagsInjects
            {
                public const string FastTags_Test_AnySet_FastTags = "System.Boolean FastTags::Test_AnySet(FastTags)";
                public const string Tags = "FastTags Block::Tags";
            }

            public const string HasAllFastTags = "System.Boolean Block::HasAllFastTags(FastTags)";
            public static class HasAllFastTagsInjects
            {
                public const string FastTags_Test_AllSet_FastTags = "System.Boolean FastTags::Test_AllSet(FastTags)";
                public const string Tags = "FastTags Block::Tags";
            }

            public const string CanRepair = "System.Boolean Block::CanRepair(BlockValue)";
            public static class CanRepairInjects
            {
                public const string damage = "System.Int32 BlockValue::damage";
            }

            public const string GetActivationText = "System.String Block::GetActivationText(WorldBase,BlockValue,System.Int32,Vector3i,EntityAlive)";
            public static class GetActivationTextInjects
            {
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string EntityPlayerLocal_get_playerInput = "PlayerActionsLocal EntityPlayerLocal::get_playerInput()";
                public const string XUiUtils_GetBindingXuiMarkupString_PlayerAction_EmptyBindingStyle_DisplayStyle_String = "System.String XUiUtils::GetBindingXuiMarkupString(InControl.PlayerAction,XUiUtils/EmptyBindingStyle,XUiUtils/DisplayStyle,System.String)";
                public const string PlayerActionsLocal_get_PermanentActions = "PlayerActionsPermanent PlayerActionsLocal::get_PermanentActions()";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string TileEntityLootContainer_IsEmpty = "System.Boolean TileEntityLootContainer::IsEmpty()";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string EffectManager_GetValue_PassiveEffects_ItemValue_Single_EntityAlive_Recipe_FastTags_Boolean_Boolean_Boolean_Boolean_Int32_Boolean = "System.Single EffectManager::GetValue(PassiveEffects,ItemValue,System.Single,EntityAlive,Recipe,FastTags,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)";
                public const string WorldBase_GetGameManager = "IGameManager WorldBase::GetGameManager()";
                public const string IGameManager_GetPersistentLocalPlayer = "PersistentPlayerData IGameManager::GetPersistentLocalPlayer()";
                public const string WorldBase_CanPickupBlockAt_Vector3i_PersistentPlayerData = "System.Boolean WorldBase::CanPickupBlockAt(Vector3i,PersistentPlayerData)";
                public const string String_op_Inequality_String_String = "System.Boolean System.String::op_Inequality(System.String,System.String)";
                public const string String_Format_String_Object = "System.String System.String::Format(System.String,System.Object)";
                public const string list = "Block[] Block::list";
                public const string Activate = "InControl.PlayerAction PlayerActionsLocal::Activate";
                public const string bTouched = "System.Boolean TileEntityLootContainer::bTouched";
                public const string CanPickup = "System.Boolean Block::CanPickup";
                public const string Tags = "FastTags Block::Tags";
                public const string PickedUpItemValue = "System.String Block::PickedUpItemValue";
                public const string PickupTarget = "System.String Block::PickupTarget";
            }

            public const string SpawnDestroyParticleEffect = "System.Void Block::SpawnDestroyParticleEffect(WorldBase,BlockValue,Vector3i,System.Single,UnityEngine.Color,System.Int32)";
            public static class SpawnDestroyParticleEffectInjects
            {
                public const string WorldBase_GetGameManager = "IGameManager WorldBase::GetGameManager()";
                public const string World_blockToTransformPos_Vector3i = "UnityEngine.Vector3 World::blockToTransformPos(Vector3i)";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string IGameManager_SpawnParticleEffectServer_ParticleEffect_Int32 = "System.Void IGameManager::SpawnParticleEffectServer(ParticleEffect,System.Int32)";
                public const string Block_GetMaterialForSide_BlockValue_BlockFace = "MaterialBlock Block::GetMaterialForSide(BlockValue,BlockFace)";
                public const string Block_GetDestroyParticle_BlockValue = "System.String Block::GetDestroyParticle(BlockValue)";
                public const string deathParticleName = "System.String Block::deathParticleName";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string SurfaceCategory = "System.String MaterialBlock::SurfaceCategory";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
                public const string ParticleEffect_ctor_String_Vector3_Single_Color_String_Transform_Boolean = "System.Void ParticleEffect::.ctor(System.String,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.String,UnityEngine.Transform,System.Boolean)";
            }

            public const string GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
            public static class GetBlockValue_String_BooleanInjects
            {
                public const string Block_GetBlockByName_String_Boolean = "Block Block::GetBlockByName(System.String,System.Boolean)";
                public const string BlockValue_set_type_Int32 = "System.Void BlockValue::set_type(System.Int32)";
                public const string blockID = "System.Int32 Block::blockID";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string GetBlockByName = "Block Block::GetBlockByName(System.String,System.Boolean)";
            public static class GetBlockByNameInjects
            {
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.String,Block>::ContainsKey(System.String)";
                public const string Dictionary_2_get_Item_TKey = "Block System.Collections.Generic.Dictionary`2<System.String,Block>::get_Item(System.String)";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string nameToBlockCaseInsensitive = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlockCaseInsensitive";
            }

            public const string GetBlockValue_Int32 = "BlockValue Block::GetBlockValue(System.Int32)";
            public static class GetBlockValue_Int32Injects
            {
                public const string BlockValue_set_type_Int32 = "System.Void BlockValue::set_type(System.Int32)";
                public const string list = "Block[] Block::list";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string GetBlockValueFromProperty = "BlockValue Block::GetBlockValueFromProperty(System.String)";
            public static class GetBlockValueFromPropertyInjects
            {
                public const string ValueWrapper_ContainsKey_String = "System.Boolean DynamicProperties/ValueWrapper::ContainsKey(System.String)";
                public const string String_Concat_String_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String,System.String)";
                public const string ValueWrapper_get_Item_String = "System.String DynamicProperties/ValueWrapper::get_Item(System.String)";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string BlockValue_Equals_BlockValue = "System.Boolean BlockValue::Equals(BlockValue)";
                public const string String_Concat_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String)";
                public const string Air = "BlockValue BlockValue::Air";
                public const string Properties = "DynamicProperties Block::Properties";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string blockName = "System.String Block::blockName";
                public const string Exception_ctor_String = "System.Void System.Exception::.ctor(System.String)";
            }

            public const string ShowModelOnFall = "System.Boolean Block::ShowModelOnFall()";
            public static class ShowModelOnFallInjects
            {
                public const string bShowModelOnFall = "System.Boolean Block::bShowModelOnFall";
            }

            public const string GetBlockActivationCommands = "BlockActivationCommand[] Block::GetBlockActivationCommands(WorldBase,BlockValue,System.Int32,Vector3i,EntityAlive)";
            public static class GetBlockActivationCommandsInjects
            {
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string EffectManager_GetValue_PassiveEffects_ItemValue_Single_EntityAlive_Recipe_FastTags_Boolean_Boolean_Boolean_Boolean_Int32_Boolean = "System.Single EffectManager::GetValue(PassiveEffects,ItemValue,System.Single,EntityAlive,Recipe,FastTags,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)";
                public const string CanPickup = "System.Boolean Block::CanPickup";
                public const string Tags = "FastTags Block::Tags";
                public const string cmds = "BlockActivationCommand[] Block::cmds";
                public const string enabled = "System.Boolean BlockActivationCommand::enabled";
            }

            public const string OnBlockActivated_Int32_WorldBase_Int32_Vector3i_BlockValue_EntityAlive = "System.Boolean Block::OnBlockActivated(System.Int32,WorldBase,System.Int32,Vector3i,BlockValue,EntityAlive)";
            public static class OnBlockActivated_Int32_WorldBase_Int32_Vector3i_BlockValue_EntityAliveInjects
            {
                public const string Block_OnBlockActivated_WorldBase_Int32_Vector3i_BlockValue_EntityAlive = "System.Boolean Block::OnBlockActivated(WorldBase,System.Int32,Vector3i,BlockValue,EntityAlive)";
            }

            public const string RenderDecorations = "System.Void Block::RenderDecorations(Vector3i,BlockValue,UnityEngine.Vector3,UnityEngine.Vector3[],LightingAround,System.Int64,VoxelMesh[],INeighborBlockCache)";
            public static class RenderDecorationsInjects
            {
                public const string BlockShape_renderDecorations_Vector3i_BlockValue_Vector3_Vector3_LightingAround_Int64_VoxelMesh_INeighborBlockCache_Boolean = "System.Void BlockShape::renderDecorations(Vector3i,BlockValue,UnityEngine.Vector3,UnityEngine.Vector3[],LightingAround,System.Int64,VoxelMesh[],INeighborBlockCache,System.Boolean)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string IsExplosionAffected = "System.Boolean Block::IsExplosionAffected()";
            public const string GetActivationDistanceSq = "System.Int32 Block::GetActivationDistanceSq()";
            public static class GetActivationDistanceSqInjects
            {
                public const string activationDistance = "System.Int32 Block::activationDistance";
                public const string cCollectItemDistance = "System.Single Constants::cCollectItemDistance";
            }

            public const string GetPlacementDistanceSq = "System.Int32 Block::GetPlacementDistanceSq()";
            public static class GetPlacementDistanceSqInjects
            {
                public const string placementDistance = "System.Int32 Block::placementDistance";
                public const string activationDistance = "System.Int32 Block::activationDistance";
                public const string cDigAndBuildDistance = "System.Single Constants::cDigAndBuildDistance";
            }

            public const string CheckUpdate = "System.Void Block::CheckUpdate(BlockValue,BlockValue,System.Boolean&,System.Boolean&,System.Boolean&)";
            public const string RotateVerticesOnCollisionCheck = "System.Boolean Block::RotateVerticesOnCollisionCheck(BlockValue)";
            public const string ActivateBlock = "System.Boolean Block::ActivateBlock(WorldBase,System.Int32,Vector3i,BlockValue,System.Boolean,System.Boolean)";
            public const string ActivateBlockOnce = "System.Boolean Block::ActivateBlockOnce(WorldBase,System.Int32,Vector3i,BlockValue)";
            public const string ToString = "System.String Block::ToString()";
            public static class ToStringInjects
            {
                public const string blockName = "System.String Block::blockName";
            }

            public const string assignIdsFromXml = "System.Void Block::assignIdsFromXml()";
            public static class assignIdsFromXmlInjects
            {
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block> System.Collections.Generic.Dictionary`2<System.String,Block>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,Block> System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::get_Current()";
                public const string KeyValuePair_2_get_Value = "Block System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Value()";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string list = "Block[] Block::list";
                public const string blockID = "System.Int32 Block::blockID";
            }

            public const string assignIdsLinear = "System.Void Block::assignIdsLinear()";
            public static class assignIdsLinearInjects
            {
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Dictionary_2_get_Count = "System.Int32 System.Collections.Generic.Dictionary`2<System.String,Block>::get_Count()";
                public const string Block_assignLeftOverBlocks_Boolean_List_1 = "System.Void Block::assignLeftOverBlocks(System.Boolean[],System.Collections.Generic.List`1<Block>)";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string List_1_ctor_Int32 = "System.Void System.Collections.Generic.List`1<Block>::.ctor(System.Int32)";
            }

            public const string assignId = "System.Void Block::assignId(Block,System.Int32,System.Boolean[])";
            public static class assignIdInjects
            {
                public const string list = "Block[] Block::list";
                public const string blockID = "System.Int32 Block::blockID";
            }

            public const string assignLeftOverBlocks = "System.Void Block::assignLeftOverBlocks(System.Boolean[],System.Collections.Generic.List`1<Block>)";
            public static class assignLeftOverBlocksInjects
            {
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Int32> System.Collections.Generic.Dictionary`2<System.String,System.Int32>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,System.Int32> System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Int32>::get_Current()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,System.Int32>::get_Key()";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.String,Block>::ContainsKey(System.String)";
                public const string Dictionary_2_get_Item_TKey = "Block System.Collections.Generic.Dictionary`2<System.String,Block>::get_Item(System.String)";
                public const string List_1_Contains_T = "System.Boolean System.Collections.Generic.List`1<Block>::Contains(Block)";
                public const string List_1_Remove_T = "System.Boolean System.Collections.Generic.List`1<Block>::Remove(Block)";
                public const string KeyValuePair_2_get_Value = "System.Int32 System.Collections.Generic.KeyValuePair`2<System.String,System.Int32>::get_Value()";
                public const string Block_assignId_Block_Int32_Boolean_ = "System.Void Block::assignId(Block,System.Int32,System.Boolean[])";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Int32>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Block> System.Collections.Generic.List`1<Block>::GetEnumerator()";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string fixedBlockIds = "System.Collections.Generic.Dictionary`2<System.String,System.Int32> Block::fixedBlockIds";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string shape = "BlockShape Block::shape";
            }

            public const string assignIdsFromMapping = "System.Void Block::assignIdsFromMapping()";
            public static class assignIdsFromMappingInjects
            {
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block> System.Collections.Generic.Dictionary`2<System.String,Block>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,Block> System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::get_Current()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Key()";
                public const string NameIdMapping_GetIdForName_String = "System.Int32 NameIdMapping::GetIdForName(System.String)";
                public const string KeyValuePair_2_get_Value = "Block System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Value()";
                public const string Block_assignId_Block_Int32_Boolean_ = "System.Void Block::assignId(Block,System.Int32,System.Boolean[])";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Block>::Add(Block)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string Block_assignLeftOverBlocks_Boolean_List_1 = "System.Void Block::assignLeftOverBlocks(System.Boolean[],System.Collections.Generic.List`1<Block>)";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string nameIdMapping = "NameIdMapping Block::nameIdMapping";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Block>::.ctor()";
            }

            public const string createFullMappingForClients = "System.Void Block::createFullMappingForClients()";
            public static class createFullMappingForClientsInjects
            {
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block> System.Collections.Generic.Dictionary`2<System.String,Block>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,Block> System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::get_Current()";
                public const string KeyValuePair_2_get_Value = "Block System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Value()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Key()";
                public const string NameIdMapping_AddMapping_Int32_String_Boolean = "System.Void NameIdMapping::AddMapping(System.Int32,System.String,System.Boolean)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string NameIdMapping_SaveToArray = "System.Byte[] NameIdMapping::SaveToArray()";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string blockID = "System.Int32 Block::blockID";
                public const string fullMappingDataForClients = "System.Byte[] Block::fullMappingDataForClients";
                public const string NameIdMapping_ctor_String_Int32 = "System.Void NameIdMapping::.ctor(System.String,System.Int32)";
            }

            public const string AssignIds = "System.Void Block::AssignIds()";
            public static class AssignIdsInjects
            {
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Block_assignIdsFromMapping = "System.Void Block::assignIdsFromMapping()";
                public const string Block_assignIdsLinear = "System.Void Block::assignIdsLinear()";
                public const string Block_createFullMappingForClients = "System.Void Block::createFullMappingForClients()";
                public const string nameIdMapping = "NameIdMapping Block::nameIdMapping";
            }

            public const string IsTileEntitySavedInPrefab = "System.Boolean Block::IsTileEntitySavedInPrefab()";
            public const string GetCustomDescription = "System.String Block::GetCustomDescription(Vector3i,BlockValue)";
            public const string GetPlaceAltBlockValue = "System.String Block::GetPlaceAltBlockValue(WorldBase)";
            public static class GetPlaceAltBlockValueInjects
            {
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string GameRandom_RandomRange_Int32_Int32 = "System.Int32 GameRandom::RandomRange(System.Int32,System.Int32)";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
                public const string Empty = "System.String System.String::Empty";
            }

            public const string GetAltBlockValue = "BlockValue Block::GetAltBlockValue(System.Int32)";
            public static class GetAltBlockValueInjects
            {
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string GetAltBlocks = "System.String[] Block::GetAltBlocks()";
            public static class GetAltBlocksInjects
            {
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
            }

            public const string AlternateBlockCount = "System.Int32 Block::AlternateBlockCount()";
            public static class AlternateBlockCountInjects
            {
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
            }

            public const string ContainsAlternateBlock = "System.Boolean Block::ContainsAlternateBlock(System.String)";
            public static class ContainsAlternateBlockInjects
            {
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
            }

            public const string GetAlternateBlockIndex = "System.Int32 Block::GetAlternateBlockIndex(System.String)";
            public static class GetAlternateBlockIndexInjects
            {
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
            }
        }
    }
}
