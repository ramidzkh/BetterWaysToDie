namespace BetterWaysToDie.Mixins
{
    [System.ComponentModel.DescriptionAttribute("Generated by SharpILMixins")]
    public static class GUIWindowConsoleTargets
    {
        public static class Methods
        {
            public const string Shutdown = "System.Void GUIWindowConsole::Shutdown()";
            public static class ShutdownInjects
            {
                public const string Logger_remove_LogCallbacks_LogCallbackDelegate = "System.Void Logger::remove_LogCallbacks(Logger/LogCallbackDelegate)";
                public const string Main = "Logger Logger::Main";
                public const string LogCallbackDelegate_ctor_Object_IntPtr = "System.Void Logger/LogCallbackDelegate::.ctor(System.Object,System.IntPtr)";
            }

            public const string LogCallback = "System.Void GUIWindowConsole::LogCallback(System.String,System.String,UnityEngine.LogType)";
            public static class LogCallbackInjects
            {
                public const string GUIWindowConsole_openConsole_String = "System.Void GUIWindowConsole::openConsole(System.String)";
                public const string GUIWindowConsole_internalAddLine_ConsoleLine = "System.Void GUIWindowConsole::internalAddLine(GUIWindowConsole/ConsoleLine)";
                public const string ConsoleLine_ctor_String_String_LogType = "System.Void GUIWindowConsole/ConsoleLine::.ctor(System.String,System.String,UnityEngine.LogType)";
            }

            public const string openConsole = "System.Void GUIWindowConsole::openConsole(System.String)";
            public static class openConsoleInjects
            {
                public const string String_StartsWith_String = "System.Boolean System.String::StartsWith(System.String)";
                public const string GUIWindowManager_IsWindowOpen_String = "System.Boolean GUIWindowManager::IsWindowOpen(System.String)";
                public const string GUIWindowManager_Open_GUIWindow_Boolean_Boolean_Boolean = "System.Void GUIWindowManager::Open(GUIWindow,System.Boolean,System.Boolean,System.Boolean)";
                public const string windowManager = "GUIWindowManager GUIWindow::windowManager";
                public const string ID = "System.String GUIWindowConsole::ID";
            }

            public const string AddLine = "System.Void GUIWindowConsole::AddLine(System.String)";
            public static class AddLineInjects
            {
                public const string GUIWindowConsole_internalAddLine_ConsoleLine = "System.Void GUIWindowConsole::internalAddLine(GUIWindowConsole/ConsoleLine)";
                public const string Empty = "System.String System.String::Empty";
                public const string ConsoleLine_ctor_String_String_LogType = "System.Void GUIWindowConsole/ConsoleLine::.ctor(System.String,System.String,UnityEngine.LogType)";
            }

            public const string internalAddLine = "System.Void GUIWindowConsole::internalAddLine(GUIWindowConsole/ConsoleLine)";
            public static class internalAddLineInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine>::Add(GUIWindowConsole/ConsoleLine)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string linesToAdd = "System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine> GUIWindowConsole::linesToAdd";
            }

            public const string OnGUI = "System.Void GUIWindowConsole::OnGUI(System.Boolean)";
            public static class OnGUIInjects
            {
                public const string GUIWindow_OnGUI_Boolean = "System.Void GUIWindow::OnGUI(System.Boolean)";
                public const string Screen_get_width = "System.Int32 UnityEngine.Screen::get_width()";
                public const string Screen_get_height = "System.Int32 UnityEngine.Screen::get_height()";
                public const string Vector2i_ctor_Int32_Int32 = "System.Void Vector2i::.ctor(System.Int32,System.Int32)";
                public const string Vector2i_op_Inequality_Vector2i_Vector2i = "System.Boolean Vector2i::op_Inequality(Vector2i,Vector2i)";
                public const string GUI_get_skin = "UnityEngine.GUISkin UnityEngine.GUI::get_skin()";
                public const string GUISkin_get_label = "UnityEngine.GUIStyle UnityEngine.GUISkin::get_label()";
                public const string GUISkin_get_textField = "UnityEngine.GUIStyle UnityEngine.GUISkin::get_textField()";
                public const string GUISkin_get_button = "UnityEngine.GUIStyle UnityEngine.GUISkin::get_button()";
                public const string GUIStyle_set_fontSize_Int32 = "System.Void UnityEngine.GUIStyle::set_fontSize(System.Int32)";
                public const string GUI_Box_Rect_String = "System.Void UnityEngine.GUI::Box(UnityEngine.Rect,System.String)";
                public const string GUILayout_Width_Single = "UnityEngine.GUILayoutOption UnityEngine.GUILayout::Width(System.Single)";
                public const string GUILayout_Height_Single = "UnityEngine.GUILayoutOption UnityEngine.GUILayout::Height(System.Single)";
                public const string GUILayout_BeginScrollView_Vector2_GUILayoutOption_ = "UnityEngine.Vector2 UnityEngine.GUILayout::BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])";
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string List_1_get_Item_Int32 = "GUIWindowConsole/ConsoleLine System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine>::get_Item(System.Int32)";
                public const string Color_get_white = "UnityEngine.Color UnityEngine.Color::get_white()";
                public const string GUI_set_color_Color = "System.Void UnityEngine.GUI::set_color(UnityEngine.Color)";
                public const string Color_get_yellow = "UnityEngine.Color UnityEngine.Color::get_yellow()";
                public const string Color_get_red = "UnityEngine.Color UnityEngine.Color::get_red()";
                public const string GUILayout_Label_String_GUIStyle_GUILayoutOption_ = "System.Void UnityEngine.GUILayout::Label(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine>::get_Count()";
                public const string Event_get_current = "UnityEngine.Event UnityEngine.Event::get_current()";
                public const string Event_get_type = "UnityEngine.EventType UnityEngine.Event::get_type()";
                public const string GUILayoutUtility_GetLastRect = "UnityEngine.Rect UnityEngine.GUILayoutUtility::GetLastRect()";
                public const string GUILayout_Space_Single = "System.Void UnityEngine.GUILayout::Space(System.Single)";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string GUILayout_EndScrollView = "System.Void UnityEngine.GUILayout::EndScrollView()";
                public const string Rect_get_y = "System.Single UnityEngine.Rect::get_y()";
                public const string GUI_SetNextControlName_String = "System.Void UnityEngine.GUI::SetNextControlName(System.String)";
                public const string GUI_TextField_Rect_String_Int32_GUIStyle = "System.String UnityEngine.GUI::TextField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)";
                public const string String_get_Length = "System.Int32 System.String::get_Length()";
                public const string String_Remove_Int32 = "System.String System.String::Remove(System.Int32)";
                public const string GUI_FocusControl_String = "System.Void UnityEngine.GUI::FocusControl(System.String)";
                public const string GUIWindowConsole_MoveCursorToEnd = "System.Void GUIWindowConsole::MoveCursorToEnd()";
                public const string GUI_Button_Rect_String_GUIStyle = "System.Boolean UnityEngine.GUI::Button(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)";
                public const string GUIWindowConsole_CloseConsole = "System.Void GUIWindowConsole::CloseConsole()";
                public const string Event_get_keyCode = "UnityEngine.KeyCode UnityEngine.Event::get_keyCode()";
                public const string GUIWindowConsole_EnterCommand = "System.Void GUIWindowConsole::EnterCommand()";
                public const string GUIWindowConsole_PreviousCommand = "System.Void GUIWindowConsole::PreviousCommand()";
                public const string GUIWindowConsole_NextCommand = "System.Void GUIWindowConsole::NextCommand()";
                public const string Math_Max_Single_Single = "System.Single System.Math::Max(System.Single,System.Single)";
                public const string lastResolution = "Vector2i GUIWindowConsole::lastResolution";
                public const string labelStyle = "UnityEngine.GUIStyle GUIWindowConsole::labelStyle";
                public const string textfieldStyle = "UnityEngine.GUIStyle GUIWindowConsole::textfieldStyle";
                public const string buttonStyle = "UnityEngine.GUIStyle GUIWindowConsole::buttonStyle";
                public const string y = "System.Int32 Vector2i::y";
                public const string inputAreaHeight = "System.Int32 GUIWindowConsole::inputAreaHeight";
                public const string scrollPosition = "UnityEngine.Vector2 GUIWindowConsole::scrollPosition";
                public const string m_sConsoleContent = "System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine> GUIWindowConsole::m_sConsoleContent";
                public const string type = "UnityEngine.LogType GUIWindowConsole/ConsoleLine::type";
                public const string text = "System.String GUIWindowConsole/ConsoleLine::text";
                public const string scrolledToBottom = "System.Boolean GUIWindowConsole::scrolledToBottom";
                public const string curCommand = "System.String GUIWindowConsole::curCommand";
                public const string bFirstTime = "System.Boolean GUIWindowConsole::bFirstTime";
                public const string bUpdateCursor = "System.Boolean GUIWindowConsole::bUpdateCursor";
                public const string GUIStyle_ctor_GUIStyle = "System.Void UnityEngine.GUIStyle::.ctor(UnityEngine.GUIStyle)";
                public const string Rect_ctor_Single_Single_Single_Single = "System.Void UnityEngine.Rect::.ctor(System.Single,System.Single,System.Single,System.Single)";
            }

            public const string Update = "System.Void GUIWindowConsole::Update()";
            public static class UpdateInjects
            {
                public const string Monitor_Enter_Object_Boolean_ = "System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine>::get_Count()";
                public const string List_1_AddRange_IEnumerable_1 = "System.Void System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine>::AddRange(System.Collections.Generic.IEnumerable`1<GUIWindowConsole/ConsoleLine>)";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine>::Clear()";
                public const string Monitor_Exit_Object = "System.Void System.Threading.Monitor::Exit(System.Object)";
                public const string List_1_RemoveRange_Int32_Int32 = "System.Void System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine>::RemoveRange(System.Int32,System.Int32)";
                public const string PlayerActionsGlobal_get_Instance = "PlayerActionsGlobal PlayerActionsGlobal::get_Instance()";
                public const string OneAxisInputControl_get_WasPressed = "System.Boolean InControl.OneAxisInputControl::get_WasPressed()";
                public const string GUIWindowConsole_EnterCommand = "System.Void GUIWindowConsole::EnterCommand()";
                public const string GUIWindowConsole_PreviousCommand = "System.Void GUIWindowConsole::PreviousCommand()";
                public const string GUIWindowConsole_NextCommand = "System.Void GUIWindowConsole::NextCommand()";
                public const string Platform_get_VirtualKeyboard = "VirtualKeyboard Platform::get_VirtualKeyboard()";
                public const string VirtualKeyboard_Open_String_String_Action_2_InputType_Boolean = "System.Boolean VirtualKeyboard::Open(System.String,System.String,System.Action`2<System.Boolean,System.String>,UIInput/InputType,System.Boolean)";
                public const string GUIWindowConsole_CloseConsole = "System.Void GUIWindowConsole::CloseConsole()";
                public const string linesToAdd = "System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine> GUIWindowConsole::linesToAdd";
                public const string m_sConsoleContent = "System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine> GUIWindowConsole::m_sConsoleContent";
                public const string scrolledToBottom = "System.Boolean GUIWindowConsole::scrolledToBottom";
                public const string scrollPosition = "UnityEngine.Vector2 GUIWindowConsole::scrollPosition";
                public const string y = "System.Single UnityEngine.Vector2::y";
                public const string submitCommand = "System.Boolean GUIWindowConsole::submitCommand";
                public const string Submit = "InControl.PlayerAction PlayerActionsGUI::Submit";
                public const string DPad_Up = "InControl.PlayerAction PlayerActionsGUI::DPad_Up";
                public const string DPad_Down = "InControl.PlayerAction PlayerActionsGUI::DPad_Down";
                public const string DPad_Left = "InControl.PlayerAction PlayerActionsGUI::DPad_Left";
                public const string curCommand = "System.String GUIWindowConsole::curCommand";
                public const string Cancel = "InControl.PlayerAction PlayerActionsGUI::Cancel";
                public const string Console = "InControl.PlayerAction PlayerActionsGlobal::Console";
                public const string Action_2_ctor_Object_IntPtr = "System.Void System.Action`2<System.Boolean,System.String>::.ctor(System.Object,System.IntPtr)";
            }

            public const string OnTextReceived = "System.Void GUIWindowConsole::OnTextReceived(System.Boolean,System.String)";
            public static class OnTextReceivedInjects
            {
                public const string curCommand = "System.String GUIWindowConsole::curCommand";
                public const string submitCommand = "System.Boolean GUIWindowConsole::submitCommand";
            }

            public const string CloseConsole = "System.Void GUIWindowConsole::CloseConsole()";
            public static class CloseConsoleInjects
            {
                public const string GUIWindowManager_Close_GUIWindow_Boolean = "System.Void GUIWindowManager::Close(GUIWindow,System.Boolean)";
                public const string windowManager = "GUIWindowManager GUIWindow::windowManager";
                public const string curCommand = "System.String GUIWindowConsole::curCommand";
            }

            public const string EnterCommand = "System.Void GUIWindowConsole::EnterCommand()";
            public static class EnterCommandInjects
            {
                public const string String_get_Length = "System.Int32 System.String::get_Length()";
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string GUIWindowConsole_Clear = "System.Void GUIWindowConsole::Clear()";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string GUIWindowConsole_internalAddLine_ConsoleLine = "System.Void GUIWindowConsole::internalAddLine(GUIWindowConsole/ConsoleLine)";
                public const string ConnectionManager_get_IsClient = "System.Boolean ConnectionManager::get_IsClient()";
                public const string SdtdConsole_ExecuteSync_String_ClientInfo = "System.Collections.Generic.List`1<System.String> SdtdConsole::ExecuteSync(System.String,ClientInfo)";
                public const string GUIWindowConsole_AddLines_List_1 = "System.Void GUIWindowConsole::AddLines(System.Collections.Generic.List`1<System.String>)";
                public const string GameManager_get_World = "World GameManager::get_World()";
                public const string World_GetPrimaryPlayerId = "System.Int32 World::GetPrimaryPlayerId()";
                public const string NetPackageConsoleCmdServer_Setup_Int32_String = "NetPackageConsoleCmdServer NetPackageConsoleCmdServer::Setup(System.Int32,System.String)";
                public const string ConnectionManager_SendToServer_NetPackage_Boolean = "System.Void ConnectionManager::SendToServer(NetPackage,System.Boolean)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<System.String>::get_Count()";
                public const string List_1_get_Item_Int32 = "System.String System.Collections.Generic.List`1<System.String>::get_Item(System.Int32)";
                public const string String_Equals_String = "System.Boolean System.String::Equals(System.String)";
                public const string List_1_Contains_T = "System.Boolean System.Collections.Generic.List`1<System.String>::Contains(System.String)";
                public const string List_1_Remove_T = "System.Boolean System.Collections.Generic.List`1<System.String>::Remove(System.String)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<System.String>::Add(System.String)";
                public const string curCommand = "System.String GUIWindowConsole::curCommand";
                public const string scrollPosition = "UnityEngine.Vector2 GUIWindowConsole::scrollPosition";
                public const string y = "System.Single UnityEngine.Vector2::y";
                public const string Empty = "System.String System.String::Empty";
                public const string Instance = "ConnectionManager SingletonMonoBehaviour`1<ConnectionManager>::Instance";
                public const string lastCommands = "System.Collections.Generic.List`1<System.String> GUIWindowConsole::lastCommands";
                public const string lastCommandsIdx = "System.Int32 GUIWindowConsole::lastCommandsIdx";
                public const string ConsoleLine_ctor_String_String_LogType = "System.Void GUIWindowConsole/ConsoleLine::.ctor(System.String,System.String,UnityEngine.LogType)";
            }

            public const string PreviousCommand = "System.Void GUIWindowConsole::PreviousCommand()";
            public static class PreviousCommandInjects
            {
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<System.String>::get_Count()";
                public const string Mathf_Max_Int32_Int32 = "System.Int32 UnityEngine.Mathf::Max(System.Int32,System.Int32)";
                public const string List_1_get_Item_Int32 = "System.String System.Collections.Generic.List`1<System.String>::get_Item(System.Int32)";
                public const string lastCommands = "System.Collections.Generic.List`1<System.String> GUIWindowConsole::lastCommands";
                public const string lastCommandsIdx = "System.Int32 GUIWindowConsole::lastCommandsIdx";
                public const string curCommand = "System.String GUIWindowConsole::curCommand";
                public const string bUpdateCursor = "System.Boolean GUIWindowConsole::bUpdateCursor";
            }

            public const string NextCommand = "System.Void GUIWindowConsole::NextCommand()";
            public static class NextCommandInjects
            {
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<System.String>::get_Count()";
                public const string Mathf_Min_Int32_Int32 = "System.Int32 UnityEngine.Mathf::Min(System.Int32,System.Int32)";
                public const string List_1_get_Item_Int32 = "System.String System.Collections.Generic.List`1<System.String>::get_Item(System.Int32)";
                public const string lastCommands = "System.Collections.Generic.List`1<System.String> GUIWindowConsole::lastCommands";
                public const string lastCommandsIdx = "System.Int32 GUIWindowConsole::lastCommandsIdx";
                public const string curCommand = "System.String GUIWindowConsole::curCommand";
                public const string bUpdateCursor = "System.Boolean GUIWindowConsole::bUpdateCursor";
                public const string Empty = "System.String System.String::Empty";
            }

            public const string MoveCursorToEnd = "System.Void GUIWindowConsole::MoveCursorToEnd()";
            public static class MoveCursorToEndInjects
            {
                public const string Type_GetTypeFromHandle_RuntimeTypeHandle = "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)";
                public const string GUIUtility_get_keyboardControl = "System.Int32 UnityEngine.GUIUtility::get_keyboardControl()";
                public const string GUIUtility_GetStateObject_Type_Int32 = "System.Object UnityEngine.GUIUtility::GetStateObject(System.Type,System.Int32)";
                public const string String_get_Length = "System.Int32 System.String::get_Length()";
                public const string TextEditor_set_selectIndex_Int32 = "System.Void UnityEngine.TextEditor::set_selectIndex(System.Int32)";
                public const string TextEditor_set_cursorIndex_Int32 = "System.Void UnityEngine.TextEditor::set_cursorIndex(System.Int32)";
                public const string curCommand = "System.String GUIWindowConsole::curCommand";
            }

            public const string Clear = "System.Void GUIWindowConsole::Clear()";
            public static class ClearInjects
            {
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine>::Clear()";
                public const string m_sConsoleContent = "System.Collections.Generic.List`1<GUIWindowConsole/ConsoleLine> GUIWindowConsole::m_sConsoleContent";
            }

            public const string OnOpen = "System.Void GUIWindowConsole::OnOpen()";
            public static class OnOpenInjects
            {
                public const string GamePrefs_GetBool_EnumGamePrefs = "System.Boolean GamePrefs::GetBool(EnumGamePrefs)";
                public const string GUIWindowManager_IsWindowOpen_String = "System.Boolean GUIWindowManager::IsWindowOpen(System.String)";
                public const string GUIWindowManager_Close_String = "System.Void GUIWindowManager::Close(System.String)";
                public const string windowManager = "GUIWindowManager GUIWindow::windowManager";
                public const string ID = "System.String XUiC_InGameDebugMenu::ID";
                public const string bShouldReopenGebugMenu = "System.Boolean GUIWindowConsole::bShouldReopenGebugMenu";
                public const string scrollPosition = "UnityEngine.Vector2 GUIWindowConsole::scrollPosition";
                public const string y = "System.Single UnityEngine.Vector2::y";
                public const string curCommand = "System.String GUIWindowConsole::curCommand";
                public const string bFirstTime = "System.Boolean GUIWindowConsole::bFirstTime";
                public const string isInputActive = "System.Boolean GUIWindow::isInputActive";
            }

            public const string OnClose = "System.Void GUIWindowConsole::OnClose()";
            public static class OnCloseInjects
            {
                public const string GUIWindow_OnClose = "System.Void GUIWindow::OnClose()";
                public const string GamePrefs_GetBool_EnumGamePrefs = "System.Boolean GamePrefs::GetBool(EnumGamePrefs)";
                public const string GUIWindowManager_Open_String_Boolean_Boolean_Boolean = "System.Void GUIWindowManager::Open(System.String,System.Boolean,System.Boolean,System.Boolean)";
                public const string bShouldReopenGebugMenu = "System.Boolean GUIWindowConsole::bShouldReopenGebugMenu";
                public const string windowManager = "GUIWindowManager GUIWindow::windowManager";
                public const string ID = "System.String XUiC_InGameDebugMenu::ID";
                public const string isInputActive = "System.Boolean GUIWindow::isInputActive";
            }
        }
    }

    [System.ComponentModel.DescriptionAttribute("Generated by SharpILMixins")]
    public static class MainMenuMonoTargets
    {
        public static class Methods
        {
            public const string Awake = "System.Void MainMenuMono::Awake()";
            public static class AwakeInjects
            {
                public const string windowManager = "GUIWindowManager MainMenuMono::windowManager";
                public const string nguiWindowManager = "NGUIWindowManager MainMenuMono::nguiWindowManager";
            }

            public const string Start = "System.Void MainMenuMono::Start()";
            public static class StartInjects
            {
                public const string Type_GetTypeFromHandle_RuntimeTypeHandle = "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)";
                public const string Object_FindObjectOfType_Type = "UnityEngine.Object UnityEngine.Object::FindObjectOfType(System.Type)";
                public const string GameManager_get_IsDedicatedServer = "System.Boolean GameManager::get_IsDedicatedServer()";
                public const string GamePrefs_GetString_EnumGamePrefs = "System.String GamePrefs::GetString(EnumGamePrefs)";
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string MainMenuMono_startGeneration_Action = "System.Collections.IEnumerator MainMenuMono::startGeneration(System.Action)";
                public const string MonoBehaviour_StartCoroutine_IEnumerator = "UnityEngine.Coroutine UnityEngine.MonoBehaviour::StartCoroutine(System.Collections.IEnumerator)";
                public const string MainMenuMono_startServer = "System.Void MainMenuMono::startServer()";
                public const string MainMenuMono_checkVersion = "System.Void MainMenuMono::checkVersion()";
                public const string NGUIWindowManager_GetWindow_EnumNGUIWindow = "UnityEngine.Transform NGUIWindowManager::GetWindow(EnumNGUIWindow)";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string UILabel_set_text_String = "System.Void UILabel::set_text(System.String)";
                public const string Cursor_set_visible_Boolean = "System.Void UnityEngine.Cursor::set_visible(System.Boolean)";
                public const string Cursor_set_lockState_CursorLockMode = "System.Void UnityEngine.Cursor::set_lockState(UnityEngine.CursorLockMode)";
                public const string NGUIWindowManager_Open_EnumNGUIWindow = "UnityEngine.Transform NGUIWindowManager::Open(EnumNGUIWindow)";
                public const string gameStartup = "GameStartupHelper GameManager::gameStartup";
                public const string nguiWindowManager = "NGUIWindowManager MainMenuMono::nguiWindowManager";
                public const string cVersion = "System.String Constants::cVersion";
                public const string Action_ctor_Object_IntPtr = "System.Void System.Action::.ctor(System.Object,System.IntPtr)";
            }

            public const string startGeneration = "System.Collections.IEnumerator MainMenuMono::startGeneration(System.Action)";
            public static class startGenerationInjects
            {
                public const string onGenerationComplete = "System.Action MainMenuMono/<startGeneration>d__6::onGenerationComplete";
                public const string _startGeneration_d_6_ctor_Int32 = "System.Void MainMenuMono/<startGeneration>d__6::.ctor(System.Int32)";
            }

            public const string startServer = "System.Void MainMenuMono::startServer()";
            public static class startServerInjects
            {
                public const string MainMenuMono_startServerCo = "System.Collections.IEnumerator MainMenuMono::startServerCo()";
                public const string MonoBehaviour_StartCoroutine_IEnumerator = "UnityEngine.Coroutine UnityEngine.MonoBehaviour::StartCoroutine(System.Collections.IEnumerator)";
            }

            public const string startServerCo = "System.Collections.IEnumerator MainMenuMono::startServerCo()";
            public static class startServerCoInjects
            {
                public const string _startServerCo_d_8_ctor_Int32 = "System.Void MainMenuMono/<startServerCo>d__8::.ctor(System.Int32)";
            }

            public const string checkVersion = "System.Void MainMenuMono::checkVersion()";
            public static class checkVersionInjects
            {
                public const string GameStats_Set_EnumGameStats_Boolean = "System.Void GameStats::Set(EnumGameStats,System.Boolean)";
            }

            public const string CheckLogin = "System.Boolean MainMenuMono::CheckLogin()";
            public static class CheckLoginInjects
            {
                public const string GameManager_get_IsDedicatedServer = "System.Boolean GameManager::get_IsDedicatedServer()";
                public const string Steam_get_User = "UserClient Steam::get_User()";
                public const string UserClient_LoginToSteam_LoginUserCallback = "System.Void UserClient::LoginToSteam(LoginUserCallback)";
                public const string loginCheckDone = "System.Boolean MainMenuMono::loginCheckDone";
                public const string bOpenMainMenu = "System.Boolean MainMenuMono::bOpenMainMenu";
                public const string LoginUserCallback_ctor_Object_IntPtr = "System.Void LoginUserCallback::.ctor(System.Object,System.IntPtr)";
            }

            public const string Update = "System.Void MainMenuMono::Update()";
            public static class UpdateInjects
            {
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string NGUIWindowManager_GetWindow_EnumNGUIWindow = "UnityEngine.Transform NGUIWindowManager::GetWindow(EnumNGUIWindow)";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string UILabel_set_text_String = "System.Void UILabel::set_text(System.String)";
                public const string GameStateManager_IsGameStarted = "System.Boolean GameStateManager::IsGameStarted()";
                public const string NGUIWindowManager_IsShowing_EnumNGUIWindow = "System.Boolean NGUIWindowManager::IsShowing(EnumNGUIWindow)";
                public const string NGUIWindowManager_Close_EnumNGUIWindow = "System.Void NGUIWindowManager::Close(EnumNGUIWindow)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string LocalPlayerUI_get_xui = "XUi LocalPlayerUI::get_xui()";
                public const string XUi_get_isReady = "System.Boolean XUi::get_isReady()";
                public const string MainMenuMono_CheckLogin = "System.Boolean MainMenuMono::CheckLogin()";
                public const string GUIWindowManager_Open_String_Boolean_Boolean_Boolean = "System.Void GUIWindowManager::Open(System.String,System.Boolean,System.Boolean,System.Boolean)";
                public const string gameStartup = "GameStartupHelper MainMenuMono::gameStartup";
                public const string bOpenMainMenuAfterAwake = "System.Boolean GameStartupHelper::bOpenMainMenuAfterAwake";
                public const string Instance = "GameManager GameManager::Instance";
                public const string bStaticDataLoaded = "System.Boolean GameManager::bStaticDataLoaded";
                public const string loadingText = "System.String MainMenuMono::loadingText";
                public const string nguiWindowManager = "NGUIWindowManager MainMenuMono::nguiWindowManager";
                public const string CurrentLoadAction = "System.String GameManager::CurrentLoadAction";
                public const string gameStateManager = "GameStateManager GameManager::gameStateManager";
                public const string windowManager = "GUIWindowManager MainMenuMono::windowManager";
                public const string playerUI = "LocalPlayerUI GUIWindowManager::playerUI";
                public const string loginCheckDone = "System.Boolean MainMenuMono::loginCheckDone";
                public const string bOpenMainMenu = "System.Boolean MainMenuMono::bOpenMainMenu";
                public const string ID = "System.String XUiC_MainMenu::ID";
            }

            public const string GUIWindowMessageBox_OnOkPressed = "System.Void MainMenuMono::GUIWindowMessageBox_OnOkPressed()";
            public static class GUIWindowMessageBox_OnOkPressedInjects
            {
                public const string bOpenMainMenu = "System.Boolean MainMenuMono::bOpenMainMenu";
            }
        }
    }

    [System.ComponentModel.DescriptionAttribute("Generated by SharpILMixins")]
    public static class BlockTargets
    {
        public static class Methods
        {
            public const string get_UnlockedBy = "RecipeUnlockData[] Block::get_UnlockedBy()";
            public static class get_UnlockedByInjects
            {
                public const string ValueWrapper_ContainsKey_String = "System.Boolean DynamicProperties/ValueWrapper::ContainsKey(System.String)";
                public const string ValueWrapper_get_Item_String = "System.String DynamicProperties/ValueWrapper::get_Item(System.String)";
                public const string String_Split_Char_ = "System.String[] System.String::Split(System.Char[])";
                public const string unlockedBy = "RecipeUnlockData[] Block::unlockedBy";
                public const string Properties = "DynamicProperties Block::Properties";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string PropUnlockedBy = "System.String Block::PropUnlockedBy";
                public const string RecipeUnlockData_ctor_String = "System.Void RecipeUnlockData::.ctor(System.String)";
            }

            public const string get_MeshIndex = "System.Byte Block::get_MeshIndex()";
            public static class get_MeshIndexInjects
            {
                public const string shape = "BlockShape Block::shape";
                public const string MeshIndex = "System.Int32 BlockShape::MeshIndex";
            }

            public const string set_MeshIndex = "System.Void Block::set_MeshIndex(System.Byte)";
            public static class set_MeshIndexInjects
            {
                public const string shape = "BlockShape Block::shape";
                public const string MeshIndex = "System.Int32 BlockShape::MeshIndex";
            }

            public const string get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
            public static class get_IsCollideMovementInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideSight = "System.Boolean Block::get_IsCollideSight()";
            public static class get_IsCollideSightInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideBullets = "System.Boolean Block::get_IsCollideBullets()";
            public static class get_IsCollideBulletsInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideRockets = "System.Boolean Block::get_IsCollideRockets()";
            public static class get_IsCollideRocketsInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideMelee = "System.Boolean Block::get_IsCollideMelee()";
            public static class get_IsCollideMeleeInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsCollideArrows = "System.Boolean Block::get_IsCollideArrows()";
            public static class get_IsCollideArrowsInjects
            {
                public const string BlockingType = "System.Int32 Block::BlockingType";
            }

            public const string get_IsNotifyOnLoadUnload = "System.Boolean Block::get_IsNotifyOnLoadUnload()";
            public static class get_IsNotifyOnLoadUnloadInjects
            {
                public const string bNotifyOnLoadUnload = "System.Boolean Block::bNotifyOnLoadUnload";
                public const string shape = "BlockShape Block::shape";
                public const string IsNotifyOnLoadUnload = "System.Boolean BlockShape::IsNotifyOnLoadUnload";
            }

            public const string set_IsNotifyOnLoadUnload = "System.Void Block::set_IsNotifyOnLoadUnload(System.Boolean)";
            public static class set_IsNotifyOnLoadUnloadInjects
            {
                public const string bNotifyOnLoadUnload = "System.Boolean Block::bNotifyOnLoadUnload";
            }

            public const string StringToVector3 = "UnityEngine.Vector3 Block::StringToVector3(System.String)";
            public static class StringToVector3Injects
            {
                public const string Vector3_get_zero = "UnityEngine.Vector3 UnityEngine.Vector3::get_zero()";
                public const string StringParsers_GetSeparatorPositions_String_Char_Int32_Int32_Int32 = "StringParsers/SeparatorPositions StringParsers::GetSeparatorPositions(System.String,System.Char,System.Int32,System.Int32,System.Int32)";
                public const string StringParsers_TryParseSInt32_String_Int32_Int32_Int32_NumberStyles = "System.Boolean StringParsers::TryParseSInt32(System.String,System.Int32&,System.Int32,System.Int32,System.Globalization.NumberStyles)";
                public const string Sep1 = "System.Int32 StringParsers/SeparatorPositions::Sep1";
                public const string TotalFound = "System.Int32 StringParsers/SeparatorPositions::TotalFound";
                public const string Sep2 = "System.Int32 StringParsers/SeparatorPositions::Sep2";
                public const string Sep3 = "System.Int32 StringParsers/SeparatorPositions::Sep3";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string z = "System.Single UnityEngine.Vector3::z";
            }

            public const string AddRandomTintColor_String_String = "System.Void Block::AddRandomTintColor(System.String,System.String)";
            public static class AddRandomTintColor_String_StringInjects
            {
                public const string Block_StringToVector3_String = "UnityEngine.Vector3 Block::StringToVector3(System.String)";
                public const string Block_AddRandomTintColor_Vector3_String = "System.Void Block::AddRandomTintColor(UnityEngine.Vector3,System.String)";
            }

            public const string AddRandomTintColor_Vector3_String = "System.Void Block::AddRandomTintColor(UnityEngine.Vector3,System.String)";
            public static class AddRandomTintColor_Vector3_StringInjects
            {
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Block/TintColorOnMaterial>::Add(Block/TintColorOnMaterial)";
                public const string randomTintColors = "System.Collections.Generic.List`1<Block/TintColorOnMaterial> Block::randomTintColors";
                public const string color = "UnityEngine.Vector3 Block/TintColorOnMaterial::color";
                public const string materialName = "System.String Block/TintColorOnMaterial::materialName";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Block/TintColorOnMaterial>::.ctor()";
            }

            public const string Init = "System.Void Block::Init()";
            public static class InitInjects
            {
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.String,Block>::ContainsKey(System.String)";
                public const string String_Concat_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String)";
                public const string Log_Error_String = "System.Void Log::Error(System.String)";
                public const string Dictionary_2_set_Item_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<System.String,Block>::set_Item(System.String,Block)";
                public const string ValueWrapper_ContainsKey_String = "System.Boolean DynamicProperties/ValueWrapper::ContainsKey(System.String)";
                public const string ValueWrapper_get_Item_String = "System.String DynamicProperties/ValueWrapper::get_Item(System.String)";
                public const string FastTags_Parse_String = "FastTags FastTags::Parse(System.String)";
                public const string Int32_TryParse_String_Int32_ = "System.Boolean System.Int32::TryParse(System.String,System.Int32&)";
                public const string Math_Max_Int32_Int32 = "System.Int32 System.Math::Max(System.Int32,System.Int32)";
                public const string Block_StringToVector3_String = "UnityEngine.Vector3 Block::StringToVector3(System.String)";
                public const string String_Concat_Object_Object = "System.String System.String::Concat(System.Object,System.Object)";
                public const string DictionarySave_2_ContainsKey_T1 = "System.Boolean DictionarySave`2<System.String,System.String>::ContainsKey(System.String)";
                public const string DictionarySave_2_get_Item_T1 = "System.String DictionarySave`2<System.String,System.String>::get_Item(System.String)";
                public const string Block_AddRandomTintColor_String_String = "System.Void Block::AddRandomTintColor(System.String,System.String)";
                public const string StringParsers_TryParseBool_String_Boolean_Int32_Int32_Boolean = "System.Boolean StringParsers::TryParseBool(System.String,System.Boolean&,System.Int32,System.Int32,System.Boolean)";
                public const string StringParsers_ParseBool_String_Int32_Int32_Boolean = "System.Boolean StringParsers::ParseBool(System.String,System.Int32,System.Int32,System.Boolean)";
                public const string String_Split_Char_ = "System.String[] System.String::Split(System.Char[])";
                public const string Int32_Parse_String = "System.Int32 System.Int32::Parse(System.String)";
                public const string StringParsers_ParseFloat_String_Int32_Int32_NumberStyles = "System.Single StringParsers::ParseFloat(System.String,System.Int32,System.Int32,System.Globalization.NumberStyles)";
                public const string StringParsers_ParseColor32_String = "UnityEngine.Color StringParsers::ParseColor32(System.String)";
                public const string StringParsers_ParseVector2i_String_Char = "Vector2i StringParsers::ParseVector2i(System.String,System.Char)";
                public const string String_Trim = "System.String System.String::Trim()";
                public const string StringParsers_ParseHexColor_String = "UnityEngine.Color StringParsers::ParseHexColor(System.String)";
                public const string Color_get_white = "UnityEngine.Color UnityEngine.Color::get_white()";
                public const string StringParsers_ParseVector3i_String_Int32_Int32_Boolean = "Vector3i StringParsers::ParseVector3i(System.String,System.Int32,System.Int32,System.Boolean)";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string String_get_Length = "System.Int32 System.String::get_Length()";
                public const string String_Concat_Object_ = "System.String System.String::Concat(System.Object[])";
                public const string String_get_Chars_Int32 = "System.Char System.String::get_Chars(System.Int32)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Vector3i>::Add(Vector3i)";
                public const string Mathf_RoundToInt_Single = "System.Int32 UnityEngine.Mathf::RoundToInt(System.Single)";
                public const string UInt32_Parse_String = "System.UInt32 System.UInt32::Parse(System.String)";
                public const string String_Split_Char_StringSplitOptions = "System.String[] System.String::Split(System.Char[],System.StringSplitOptions)";
                public const string DynamicProperties_ParseBool_String_Boolean_ = "System.Void DynamicProperties::ParseBool(System.String,System.Boolean&)";
                public const string StringParsers_TryParseFloat_String_Single_Int32_Int32_NumberStyles = "System.Boolean StringParsers::TryParseFloat(System.String,System.Single&,System.Int32,System.Int32,System.Globalization.NumberStyles)";
                public const string DynamicProperties_ParseString_String_String_ = "System.Void DynamicProperties::ParseString(System.String,System.String&)";
                public const string HashSet_1_Add_T = "System.Boolean System.Collections.Generic.HashSet`1<BlockFace>::Add(BlockFace)";
                public const string HashSet_1_Contains_T = "System.Boolean System.Collections.Generic.HashSet`1<BlockFace>::Contains(BlockFace)";
                public const string String_Contains_String = "System.Boolean System.String::Contains(System.String)";
                public const string String_StartsWith_String = "System.Boolean System.String::StartsWith(System.String)";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string String_Split_String_StringSplitOptions = "System.String[] System.String::Split(System.String[],System.StringSplitOptions)";
                public const string String_IndexOf_Char = "System.Int32 System.String::IndexOf(System.Char)";
                public const string String_Substring_Int32_Int32 = "System.String System.String::Substring(System.Int32,System.Int32)";
                public const string List_1_ToArray = "BlockRadiusEffect[] System.Collections.Generic.List`1<BlockRadiusEffect>::ToArray()";
                public const string String_Format_String_Object = "System.String System.String::Format(System.String,System.Object)";
                public const string Localization_Exists_String = "System.Boolean Localization::Exists(System.String)";
                public const string DynamicProperties_ParseFloat_String_Single_ = "System.Void DynamicProperties::ParseFloat(System.String,System.Single&)";
                public const string nameToBlockCaseInsensitive = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlockCaseInsensitive";
                public const string blockName = "System.String Block::blockName";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string Properties = "DynamicProperties Block::Properties";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string PropTag = "System.String Block::PropTag";
                public const string Tags = "FastTags Block::Tags";
                public const string PropLightOpacity = "System.String Block::PropLightOpacity";
                public const string lightOpacity = "System.Int32 Block::lightOpacity";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string LightOpacity = "System.Int32 MaterialBlock::LightOpacity";
                public const string shape = "BlockShape Block::shape";
                public const string PropTintColor = "System.String Block::PropTintColor";
                public const string tintColor = "UnityEngine.Vector3 Block::tintColor";
                public const string PropRandomTintColor = "System.String Block::PropRandomTintColor";
                public const string Params1 = "DictionarySave`2<System.String,System.String> DynamicProperties::Params1";
                public const string PropCanPickup = "System.String Block::PropCanPickup";
                public const string CanPickup = "System.Boolean Block::CanPickup";
                public const string PickedUpItemValue = "System.String Block::PickedUpItemValue";
                public const string PropFuelValue = "System.String Block::PropFuelValue";
                public const string FuelValue = "System.Int32 Block::FuelValue";
                public const string PropWeight = "System.String Block::PropWeight";
                public const string Weight = "DataItem`1<System.Int32> Block::Weight";
                public const string PropCanMobsSpawnOn = "System.String Block::PropCanMobsSpawnOn";
                public const string CanMobsSpawnOn = "System.Boolean Block::CanMobsSpawnOn";
                public const string PropCanPlayersSpawnOn = "System.String Block::PropCanPlayersSpawnOn";
                public const string CanPlayersSpawnOn = "System.Boolean Block::CanPlayersSpawnOn";
                public const string PropPickupTarget = "System.String Block::PropPickupTarget";
                public const string PickupTarget = "System.String Block::PickupTarget";
                public const string PropPickupSource = "System.String Block::PropPickupSource";
                public const string PickupSource = "System.String Block::PickupSource";
                public const string PropPlaceAltBlockValue = "System.String Block::PropPlaceAltBlockValue";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
                public const string PropIndexName = "System.String Block::PropIndexName";
                public const string IndexName = "System.String Block::IndexName";
                public const string PropCanDecorateOnSlopes = "System.String Block::PropCanDecorateOnSlopes";
                public const string CanDecorateOnSlopes = "System.Boolean Block::CanDecorateOnSlopes";
                public const string PropIsTerrainDecoration = "System.String Block::PropIsTerrainDecoration";
                public const string IsTerrainDecoration = "System.Boolean Block::IsTerrainDecoration";
                public const string PropIsDecoration = "System.String Block::PropIsDecoration";
                public const string IsDecoration = "System.Boolean Block::IsDecoration";
                public const string PropDistantDecoration = "System.String Block::PropDistantDecoration";
                public const string IsDistantDecoration = "System.Boolean Block::IsDistantDecoration";
                public const string PropBigDecorationRadius = "System.String Block::PropBigDecorationRadius";
                public const string BigDecorationRadius = "System.Int32 Block::BigDecorationRadius";
                public const string PropSmallDecorationRadius = "System.String Block::PropSmallDecorationRadius";
                public const string SmallDecorationRadius = "System.Int32 Block::SmallDecorationRadius";
                public const string LPHardnessScale = "System.Single Block::LPHardnessScale";
                public const string PropLPScale = "System.String Block::PropLPScale";
                public const string PropMapColor = "System.String Block::PropMapColor";
                public const string MapColor = "UnityEngine.Color Block::MapColor";
                public const string bMapColorSet = "System.Boolean Block::bMapColorSet";
                public const string PropMapColor2 = "System.String Block::PropMapColor2";
                public const string MapColor2 = "UnityEngine.Color Block::MapColor2";
                public const string bMapColor2Set = "System.Boolean Block::bMapColor2Set";
                public const string PropMapElevMinMax = "System.String Block::PropMapElevMinMax";
                public const string MapElevMinMax = "Vector2i Block::MapElevMinMax";
                public const string zero = "Vector2i Vector2i::zero";
                public const string PropMapSpecular = "System.String Block::PropMapSpecular";
                public const string MapSpecular = "System.Single Block::MapSpecular";
                public const string PropGroupName = "System.String Block::PropGroupName";
                public const string GroupNames = "System.String[] Block::GroupNames";
                public const string PropCustomIcon = "System.String Block::PropCustomIcon";
                public const string CustomIcon = "System.String Block::CustomIcon";
                public const string PropCustomIconTint = "System.String Block::PropCustomIconTint";
                public const string CustomIconTint = "UnityEngine.Color Block::CustomIconTint";
                public const string PropPlacementWireframe = "System.String Block::PropPlacementWireframe";
                public const string bHasPlacementWireframe = "System.Boolean Block::bHasPlacementWireframe";
                public const string PropMultiBlockDim = "System.String Block::PropMultiBlockDim";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string PropMultiBlockLayer = "System.String Block::PropMultiBlockLayer";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string y = "System.Int32 Vector3i::y";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string PropHeatMapStrength = "System.String Block::PropHeatMapStrength";
                public const string HeatMapStrength = "System.Single Block::HeatMapStrength";
                public const string PropHeatMapTime = "System.String Block::PropHeatMapTime";
                public const string HeatMapTime = "System.UInt32 Block::HeatMapTime";
                public const string PropHeatMapFrequency = "System.String Block::PropHeatMapFrequency";
                public const string HeatMapFrequency = "System.UInt32 Block::HeatMapFrequency";
                public const string FallDamage = "System.Single Block::FallDamage";
                public const string PropFallDamage = "System.String Block::PropFallDamage";
                public const string PropCount = "System.String Block::PropCount";
                public const string Count = "System.Int32 Block::Count";
                public const string PropAllowAllRotations = "System.String Block::PropAllowAllRotations";
                public const string AllowAllRotations = "System.Boolean Block::AllowAllRotations";
                public const string bImposterExclude = "System.Boolean Block::bImposterExclude";
                public const string bImposterExcludeAndStop = "System.Boolean Block::bImposterExcludeAndStop";
                public const string bImposterDontBlock = "System.Boolean Block::bImposterDontBlock";
                public const string OnlySimpleRotations = "System.Boolean Block::OnlySimpleRotations";
                public const string PropIsPlant = "System.String Block::PropIsPlant";
                public const string bIsPlant = "System.Boolean Block::bIsPlant";
                public const string CustomPlaceSound = "System.String Block::CustomPlaceSound";
                public const string CustomUpgradeSound = "System.String Block::CustomUpgradeSound";
                public const string PropBuffsWhenWalkedOn = "System.String Block::PropBuffsWhenWalkedOn";
                public const string BuffsWhenWalkedOn = "System.String[] Block::BuffsWhenWalkedOn";
                public const string PropIsReplaceRandom = "System.String Block::PropIsReplaceRandom";
                public const string IsReplaceRandom = "System.Boolean Block::IsReplaceRandom";
                public const string PropCraftExpValue = "System.String Block::PropCraftExpValue";
                public const string CraftComponentExp = "System.Single Block::CraftComponentExp";
                public const string PropCraftTimeValue = "System.String Block::PropCraftTimeValue";
                public const string CraftComponentTime = "System.Single Block::CraftComponentTime";
                public const string PropLootExpValue = "System.String Block::PropLootExpValue";
                public const string LootExp = "System.Single Block::LootExp";
                public const string PropDestroyExpValue = "System.String Block::PropDestroyExpValue";
                public const string DestroyExp = "System.Single Block::DestroyExp";
                public const string PropParticleOnDeath = "System.String Block::PropParticleOnDeath";
                public const string deathParticleName = "System.String Block::deathParticleName";
                public const string PropPlaceExpValue = "System.String Block::PropPlaceExpValue";
                public const string PlaceExp = "System.Single Block::PlaceExp";
                public const string PropUpgradeExpValue = "System.String Block::PropUpgradeExpValue";
                public const string UpgradeExp = "System.Single Block::UpgradeExp";
                public const string PropEconomicValue = "System.String Block::PropEconomicValue";
                public const string EconomicValue = "System.Single Block::EconomicValue";
                public const string PropEconomicBundleSize = "System.String Block::PropEconomicBundleSize";
                public const string EconomicBundleSize = "System.Int32 Block::EconomicBundleSize";
                public const string PropSellableToTrader = "System.String Block::PropSellableToTrader";
                public const string SellableToTrader = "System.Boolean Block::SellableToTrader";
                public const string PropPickupJournalEntry = "System.String Block::PropPickupJournalEntry";
                public const string PickupJournalEntry = "System.String Block::PickupJournalEntry";
                public const string PropCreativeMode = "System.String Block::PropCreativeMode";
                public const string CreativeMode = "EnumCreativeMode Block::CreativeMode";
                public const string PropFilterTag = "System.String Block::PropFilterTag";
                public const string FilterTags = "System.String[] Block::FilterTags";
                public const string Empty = "System.String System.String::Empty";
                public const string PropCreativeSort1 = "System.String Block::PropCreativeSort1";
                public const string PropCreativeSort2 = "System.String Block::PropCreativeSort2";
                public const string SortOrder = "System.String Block::SortOrder";
                public const string PropDisplayType = "System.String Block::PropDisplayType";
                public const string DisplayType = "System.String Block::DisplayType";
                public const string PropItemTypeIcon = "System.String Block::PropItemTypeIcon";
                public const string ItemTypeIcon = "System.String Block::ItemTypeIcon";
                public const string PropMaxDamage = "System.String Block::PropMaxDamage";
                public const string MaxDamage = "System.Int32 Block::MaxDamage";
                public const string PropActivationDistance = "System.String Block::PropActivationDistance";
                public const string activationDistance = "System.Int32 Block::activationDistance";
                public const string PropPlacementDistance = "System.String Block::PropPlacementDistance";
                public const string placementDistance = "System.Int32 Block::placementDistance";
                public const string EnablePassThroughDamage = "System.Boolean Block::EnablePassThroughDamage";
                public const string RemovePaintOnDowngrade = "System.Collections.Generic.List`1<BlockFace> Block::RemovePaintOnDowngrade";
                public const string UseGlobalUV = "Block/EnumUVState[] Block::UseGlobalUV";
                public const string bForceCPU_UVs = "System.Boolean Block::bForceCPU_UVs";
                public const string PropRadiusEffect = "System.String Block::PropRadiusEffect";
                public const string radius = "System.Single BlockRadiusEffect::radius";
                public const string variable = "System.String BlockRadiusEffect::variable";
                public const string RadiusEffects = "BlockRadiusEffect[] Block::RadiusEffects";
                public const string PropDescriptionKey = "System.String Block::PropDescriptionKey";
                public const string DescriptionKey = "System.String Block::DescriptionKey";
                public const string defaultBlockDescriptionKey = "System.String Block::defaultBlockDescriptionKey";
                public const string PropCraftingSkillGroup = "System.String Block::PropCraftingSkillGroup";
                public const string CraftingSkillGroup = "System.String Block::CraftingSkillGroup";
                public const string PropHarvestOverdamage = "System.String Block::PropHarvestOverdamage";
                public const string HarvestOverdamage = "System.Boolean Block::HarvestOverdamage";
                public const string PropShowModelOnFall = "System.String Block::PropShowModelOnFall";
                public const string bShowModelOnFall = "System.Boolean Block::bShowModelOnFall";
                public const string HandleFace = "BlockFace Block::HandleFace";
                public const string DisplayInfo = "Block/EnumDisplayInfo Block::DisplayInfo";
                public const string SelectAlternates = "System.Boolean Block::SelectAlternates";
                public const string PropNoScrapping = "System.String Block::PropNoScrapping";
                public const string NoScrapping = "System.Boolean Block::NoScrapping";
                public const string VehicleHitScale = "System.Single Block::VehicleHitScale";
                public const string PropVehicleHitScale = "System.String Block::PropVehicleHitScale";
                public const string DataItem_1_ctor_T = "System.Void DataItem`1<System.Int32>::.ctor(System.Int32)";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Vector3i>::.ctor()";
                public const string Exception_ctor_String = "System.Void System.Exception::.ctor(System.String)";
                public const string Vector3i_ctor_Int32_Int32_Int32 = "System.Void Vector3i::.ctor(System.Int32,System.Int32,System.Int32)";
                public const string MultiBlockArray_ctor_Vector3i_List_1 = "System.Void Block/MultiBlockArray::.ctor(Vector3i,System.Collections.Generic.List`1<Vector3i>)";
                public const string HashSet_1_ctor = "System.Void System.Collections.Generic.HashSet`1<BlockFace>::.ctor()";
            }

            public const string LateInit = "System.Void Block::LateInit()";
            public static class LateInitInjects
            {
                public const string BlockShape_LateInit = "System.Void BlockShape::LateInit()";
                public const string ValueWrapper_ContainsKey_String = "System.Boolean DynamicProperties/ValueWrapper::ContainsKey(System.String)";
                public const string ValueWrapper_get_Item_String = "System.String DynamicProperties/ValueWrapper::get_Item(System.String)";
                public const string ItemClass_GetItem_String_Boolean = "ItemValue ItemClass::GetItem(System.String,System.Boolean)";
                public const string ItemValue_ToBlockValue = "BlockValue ItemValue::ToBlockValue()";
                public const string BlockValue_Equals_BlockValue = "System.Boolean BlockValue::Equals(BlockValue)";
                public const string String_Concat_String_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String,System.String)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string DictionarySave_2_ContainsKey_T1 = "System.Boolean DictionarySave`2<System.String,System.String>::ContainsKey(System.String)";
                public const string DictionarySave_2_get_Item_T1 = "System.String DictionarySave`2<System.String,System.String>::get_Item(System.String)";
                public const string Int32_Parse_String = "System.Int32 System.Int32::Parse(System.String)";
                public const string Log_Warning_String_Object_ = "System.Void Log::Warning(System.String,System.Object[])";
                public const string String_Split_Char_ = "System.String[] System.String::Split(System.Char[])";
                public const string String_Trim = "System.String System.String::Trim()";
                public const string shape = "BlockShape Block::shape";
                public const string Properties = "DynamicProperties Block::Properties";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string PropSiblingBlock = "System.String Block::PropSiblingBlock";
                public const string SiblingBlock = "BlockValue Block::SiblingBlock";
                public const string Air = "BlockValue BlockValue::Air";
                public const string blockName = "System.String Block::blockName";
                public const string MirrorSibling = "System.Int32 Block::MirrorSibling";
                public const string PropUpgradeBlock = "System.String Block::PropUpgradeBlock";
                public const string UpgradeBlock = "BlockValue Block::UpgradeBlock";
                public const string PropDowngradeBlock = "System.String Block::PropDowngradeBlock";
                public const string DowngradeBlock = "BlockValue Block::DowngradeBlock";
                public const string ImposterExchange = "System.Int32 Block::ImposterExchange";
                public const string Params1 = "DictionarySave`2<System.String,System.String> DynamicProperties::Params1";
                public const string ImposterExchangeTexIdx = "System.Byte Block::ImposterExchangeTexIdx";
                public const string MergeIntoId = "System.Int32 Block::MergeIntoId";
                public const string MergeIntoTexIds = "System.Int32[] Block::MergeIntoTexIds";
                public const string Exception_ctor_String = "System.Void System.Exception::.ctor(System.String)";
            }

            public const string InitStatic = "System.Void Block::InitStatic()";
            public static class InitStaticInjects
            {
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string nameToBlockCaseInsensitive = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlockCaseInsensitive";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string list = "Block[] Block::list";
                public const string Dictionary_2_ctor = "System.Void System.Collections.Generic.Dictionary`2<System.String,Block>::.ctor()";
                public const string CaseInsensitiveStringDictionary_1_ctor = "System.Void CaseInsensitiveStringDictionary`1<Block>::.ctor()";
            }

            public const string LateInitAll = "System.Void Block::LateInitAll()";
            public static class LateInitAllInjects
            {
                public const string Block_LateInit = "System.Void Block::LateInit()";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Log_Warning_String_Object_ = "System.Void Log::Warning(System.String,System.Object[])";
                public const string list = "Block[] Block::list";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string Air = "BlockValue BlockValue::Air";
                public const string MaxDamage = "System.Int32 Block::MaxDamage";
                public const string DowngradeBlock = "BlockValue Block::DowngradeBlock";
                public const string blockName = "System.String Block::blockName";
                public const string MaxDamagePlusDowngrades = "System.Int32 Block::MaxDamagePlusDowngrades";
            }

            public const string Cleanup = "System.Void Block::Cleanup()";
            public static class CleanupInjects
            {
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string nameToBlockCaseInsensitive = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlockCaseInsensitive";
                public const string list = "Block[] Block::list";
                public const string fullMappingDataForClients = "System.Byte[] Block::fullMappingDataForClients";
            }

            public const string CopyDroppedFrom = "System.Void Block::CopyDroppedFrom(Block)";
            public static class CopyDroppedFromInjects
            {
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> System.Collections.Generic.Dictionary`2/Enumerator<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Current()";
                public const string KeyValuePair_2_get_Key = "EnumDropEvent System.Collections.Generic.KeyValuePair`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Key()";
                public const string KeyValuePair_2_get_Value = "System.Collections.Generic.List`1<Block/SItemDropProb> System.Collections.Generic.KeyValuePair`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Value()";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::ContainsKey(EnumDropEvent)";
                public const string Dictionary_2_get_Item_TKey = "System.Collections.Generic.List`1<Block/SItemDropProb> System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Item(EnumDropEvent)";
                public const string Dictionary_2_set_Item_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::set_Item(EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>)";
                public const string List_1_get_Item_Int32 = "Block/SItemDropProb System.Collections.Generic.List`1<Block/SItemDropProb>::get_Item(System.Int32)";
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Block/SItemDropProb>::get_Count()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Block/SItemDropProb>::Add(Block/SItemDropProb)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string itemsToDrop = "System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> Block::itemsToDrop";
                public const string name = "System.String Block/SItemDropProb::name";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Block/SItemDropProb>::.ctor()";
            }

            public const string getInventoryFace = "BlockFace Block::getInventoryFace()";
            public const string GetLightValue = "System.Byte Block::GetLightValue(BlockValue)";
            public static class GetLightValueInjects
            {
                public const string lightValue = "System.Byte Block::lightValue";
            }

            public const string SetLightValue = "Block Block::SetLightValue(System.Single)";
            public static class SetLightValueInjects
            {
                public const string lightValue = "System.Byte Block::lightValue";
            }

            public const string IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
            public static class IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string IBlockAccess_GetBlock_Vector3i = "BlockValue IBlockAccess::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string BlockShape_IsMovementBlocked_BlockValue_BlockFace = "System.Boolean BlockShape::IsMovementBlocked(BlockValue,BlockFace)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
                public const string BlocksMovement = "System.Byte Block::BlocksMovement";
                public const string shape = "BlockShape Block::shape";
            }

            public const string IsSeeThrough = "System.Boolean Block::IsSeeThrough(WorldBase,System.Int32,Vector3i,BlockValue)";
            public static class IsSeeThroughInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string WorldBase_GetBlock_Vector3i = "BlockValue WorldBase::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsSeeThrough_WorldBase_Int32_Vector3i_BlockValue = "System.Boolean Block::IsSeeThrough(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string Block_get_IsCollideSight = "System.Boolean Block::get_IsCollideSight()";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
                public const string shape = "BlockShape Block::shape";
                public const string IsTransparent = "System.Boolean BlockShape::IsTransparent";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
            }

            public const string IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceFlag = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFaceFlag)";
            public static class IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceFlagInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string IBlockAccess_GetBlock_Vector3i = "BlockValue IBlockAccess::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceFlag = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFaceFlag)";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
            }

            public const string IsWaterBlocked = "System.Boolean Block::IsWaterBlocked(IBlockAccess,Vector3i,BlockValue,BlockFaceFlag)";
            public static class IsWaterBlockedInjects
            {
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFaceFlag = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFaceFlag)";
            }

            public const string IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_Vector3 = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,UnityEngine.Vector3)";
            public static class IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_Vector3Injects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string IBlockAccess_GetBlock_Vector3i = "BlockValue IBlockAccess::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_Vector3 = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,UnityEngine.Vector3)";
                public const string BlockFaceFlags_FrontSidesFromPosition_Vector3i_Vector3 = "BlockFaceFlag BlockFaceFlags::FrontSidesFromPosition(Vector3i,UnityEngine.Vector3)";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
            }

            public const string IsMovementBlockedAny = "System.Boolean Block::IsMovementBlockedAny(IBlockAccess,Vector3i,BlockValue,UnityEngine.Vector3)";
            public static class IsMovementBlockedAnyInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string IBlockAccess_GetBlock_Vector3i = "BlockValue IBlockAccess::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string Block_IsMovementBlockedAny_IBlockAccess_Vector3i_BlockValue_Vector3 = "System.Boolean Block::IsMovementBlockedAny(IBlockAccess,Vector3i,BlockValue,UnityEngine.Vector3)";
                public const string BlockFaceFlags_FrontSidesFromPosition_Vector3i_Vector3 = "BlockFaceFlag BlockFaceFlags::FrontSidesFromPosition(Vector3i,UnityEngine.Vector3)";
                public const string Block_IsMovementBlocked_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Boolean Block::IsMovementBlocked(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
            }

            public const string JumpFaces = "BlockFaceFlag Block::JumpFaces(BlockValue,System.Single)";
            public static class JumpFacesInjects
            {
                public const string BlockShape_JumpFaces_BlockValue_Single = "BlockFaceFlag BlockShape::JumpFaces(BlockValue,System.Single)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string StepMoveOffsetFromCenter = "UnityEngine.Vector3 Block::StepMoveOffsetFromCenter(BlockValue,BlockFace,BlockFace,System.Single)";
            public static class StepMoveOffsetFromCenterInjects
            {
                public const string BlockShape_StepMoveOffsetFromCenter_BlockValue_BlockFace_BlockFace_Single = "UnityEngine.Vector3 BlockShape::StepMoveOffsetFromCenter(BlockValue,BlockFace,BlockFace,System.Single)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string GetStepHeight = "System.Single Block::GetStepHeight(IBlockAccess,Vector3i,BlockValue,BlockFace)";
            public static class GetStepHeightInjects
            {
                public const string Block_get_IsCollideMovement = "System.Boolean Block::get_IsCollideMovement()";
                public const string BlockShape_GetStepHeight_BlockValue_BlockFace = "System.Single BlockShape::GetStepHeight(BlockValue,BlockFace)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string MinStepHeight_BlockValue_BlockFaceFlag = "System.Single Block::MinStepHeight(BlockValue,BlockFaceFlag)";
            public static class MinStepHeight_BlockValue_BlockFaceFlagInjects
            {
                public const string Block_GetStepHeight_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Single Block::GetStepHeight(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string Math_Min_Single_Single = "System.Single System.Math::Min(System.Single,System.Single)";
                public const string Math_Max_Single_Single = "System.Single System.Math::Max(System.Single,System.Single)";
                public const string zero = "Vector3i Vector3i::zero";
            }

            public const string MaxStepHeight_BlockValue_BlockFaceFlag = "System.Single Block::MaxStepHeight(BlockValue,BlockFaceFlag)";
            public static class MaxStepHeight_BlockValue_BlockFaceFlagInjects
            {
                public const string Block_GetStepHeight_IBlockAccess_Vector3i_BlockValue_BlockFace = "System.Single Block::GetStepHeight(IBlockAccess,Vector3i,BlockValue,BlockFace)";
                public const string Math_Max_Single_Single = "System.Single System.Math::Max(System.Single,System.Single)";
                public const string zero = "Vector3i Vector3i::zero";
            }

            public const string MinStepHeight_Vector3i_BlockValue_Vector3 = "System.Single Block::MinStepHeight(Vector3i,BlockValue,UnityEngine.Vector3)";
            public static class MinStepHeight_Vector3i_BlockValue_Vector3Injects
            {
                public const string BlockFaceFlags_FrontSidesFromPosition_Vector3i_Vector3 = "BlockFaceFlag BlockFaceFlags::FrontSidesFromPosition(Vector3i,UnityEngine.Vector3)";
                public const string Block_MinStepHeight_BlockValue_BlockFaceFlag = "System.Single Block::MinStepHeight(BlockValue,BlockFaceFlag)";
            }

            public const string MaxStepHeight_Vector3i_BlockValue_Vector3 = "System.Single Block::MaxStepHeight(Vector3i,BlockValue,UnityEngine.Vector3)";
            public static class MaxStepHeight_Vector3i_BlockValue_Vector3Injects
            {
                public const string BlockFaceFlags_FrontSidesFromPosition_Vector3i_Vector3 = "BlockFaceFlag BlockFaceFlags::FrontSidesFromPosition(Vector3i,UnityEngine.Vector3)";
                public const string Block_MaxStepHeight_BlockValue_BlockFaceFlag = "System.Single Block::MaxStepHeight(BlockValue,BlockFaceFlag)";
            }

            public const string GetHardness = "System.Single Block::GetHardness()";
            public static class GetHardnessInjects
            {
                public const string DataItem_1_get_Value = "System.Single DataItem`1<System.Single>::get_Value()";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string Hardness = "DataItem`1<System.Single> MaterialBlock::Hardness";
            }

            public const string GetWeight = "System.Int32 Block::GetWeight()";
            public static class GetWeightInjects
            {
                public const string DataItem_1_get_Value = "System.Int32 DataItem`1<System.Int32>::get_Value()";
                public const string Weight = "DataItem`1<System.Int32> Block::Weight";
            }

            public const string getUVRectFromSideAndMetadata_Int32_BlockFace_Vector3_BlockValue = "UnityEngine.Rect Block::getUVRectFromSideAndMetadata(System.Int32,BlockFace,UnityEngine.Vector3,BlockValue)";
            public static class getUVRectFromSideAndMetadata_Int32_BlockFace_Vector3_BlockValueInjects
            {
                public const string Block_GetSideTextureId_BlockValue_BlockFace = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
                public const string Rect_get_x = "System.Single UnityEngine.Rect::get_x()";
                public const string Rect_get_width = "System.Single UnityEngine.Rect::get_width()";
                public const string Utils_FastRoundToIntAndMod_Single_Int32 = "System.Int32 Utils::FastRoundToIntAndMod(System.Single,System.Int32)";
                public const string Rect_get_y = "System.Single UnityEngine.Rect::get_y()";
                public const string Rect_get_height = "System.Single UnityEngine.Rect::get_height()";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string textureAtlas = "TextureAtlas MeshDescription::textureAtlas";
                public const string uvMapping = "UVRectTiling[] TextureAtlas::uvMapping";
                public const string Empty = "UVRectTiling UVRectTiling::Empty";
                public const string uv = "UnityEngine.Rect UVRectTiling::uv";
                public const string blockW = "System.Int32 UVRectTiling::blockW";
                public const string blockH = "System.Int32 UVRectTiling::blockH";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string Rect_ctor_Single_Single_Single_Single = "System.Void UnityEngine.Rect::.ctor(System.Single,System.Single,System.Single,System.Single)";
            }

            public const string getUVRectFromSideAndRotationWedged = "UnityEngine.Rect Block::getUVRectFromSideAndRotationWedged(System.Int32,BlockFace,System.Int32,UnityEngine.Vector3,BlockValue)";
            public static class getUVRectFromSideAndRotationWedgedInjects
            {
                public const string Block_GetSideTextureId_BlockValue_BlockFace = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
                public const string Rect_get_x = "System.Single UnityEngine.Rect::get_x()";
                public const string Rect_get_width = "System.Single UnityEngine.Rect::get_width()";
                public const string Utils_FastRoundToIntAndMod_Single_Int32 = "System.Int32 Utils::FastRoundToIntAndMod(System.Single,System.Int32)";
                public const string Rect_get_y = "System.Single UnityEngine.Rect::get_y()";
                public const string Rect_get_height = "System.Single UnityEngine.Rect::get_height()";
                public const string Empty = "UVRectTiling UVRectTiling::Empty";
                public const string uv = "UnityEngine.Rect UVRectTiling::uv";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string textureAtlas = "TextureAtlas MeshDescription::textureAtlas";
                public const string uvMapping = "UVRectTiling[] TextureAtlas::uvMapping";
                public const string blockW = "System.Int32 UVRectTiling::blockW";
                public const string blockH = "System.Int32 UVRectTiling::blockH";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string y = "System.Single UnityEngine.Vector3::y";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string Rect_ctor_Single_Single_Single_Single = "System.Void UnityEngine.Rect::.ctor(System.Single,System.Single,System.Single,System.Single)";
            }

            public const string GetCollidingAABB = "System.Void Block::GetCollidingAABB(BlockValue,System.Int32,System.Int32,System.Int32,System.Single,UnityEngine.Bounds,System.Collections.Generic.List`1<UnityEngine.Bounds>)";
            public static class GetCollidingAABBInjects
            {
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<UnityEngine.Bounds>::Clear()";
                public const string Block_GetCollisionAABB_BlockValue_Int32_Int32_Int32_Single_List_1 = "System.Void Block::GetCollisionAABB(BlockValue,System.Int32,System.Int32,System.Int32,System.Single,System.Collections.Generic.List`1<UnityEngine.Bounds>)";
                public const string List_1_get_Item_Int32 = "UnityEngine.Bounds System.Collections.Generic.List`1<UnityEngine.Bounds>::get_Item(System.Int32)";
                public const string Bounds_Intersects_Bounds = "System.Boolean UnityEngine.Bounds::Intersects(UnityEngine.Bounds)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<UnityEngine.Bounds>::Add(UnityEngine.Bounds)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<UnityEngine.Bounds>::get_Count()";
                public const string staticList_IntersectRayWithBlockList = "System.Collections.Generic.List`1<UnityEngine.Bounds> Block::staticList_IntersectRayWithBlockList";
            }

            public const string GetCollisionAABB = "System.Void Block::GetCollisionAABB(BlockValue,System.Int32,System.Int32,System.Int32,System.Single,System.Collections.Generic.List`1<UnityEngine.Bounds>)";
            public static class GetCollisionAABBInjects
            {
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
                public const string BlockShape_GetBounds_BlockValue = "UnityEngine.Bounds[] BlockShape::GetBounds(BlockValue)";
                public const string Bounds_get_center = "UnityEngine.Vector3 UnityEngine.Bounds::get_center()";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Bounds_set_center_Vector3 = "System.Void UnityEngine.Bounds::set_center(UnityEngine.Vector3)";
                public const string Bounds_get_max = "UnityEngine.Vector3 UnityEngine.Bounds::get_max()";
                public const string Bounds_set_max_Vector3 = "System.Void UnityEngine.Bounds::set_max(UnityEngine.Vector3)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<UnityEngine.Bounds>::Add(UnityEngine.Bounds)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string GetClipBoundsList = "System.Collections.Generic.IList`1<UnityEngine.Bounds> Block::GetClipBoundsList(BlockValue,UnityEngine.Vector3)";
            public static class GetClipBoundsListInjects
            {
                public const string BlockShape_GetBounds_BlockValue = "UnityEngine.Bounds[] BlockShape::GetBounds(BlockValue)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string UpdateTick = "System.Boolean Block::UpdateTick(WorldBase,System.Int32,Vector3i,BlockValue,System.Boolean,System.UInt64,GameRandom)";
            public const string DoExchangeAction = "System.Void Block::DoExchangeAction(WorldBase,Vector3i,BlockValue,System.String,System.Int32)";
            public const string OnBlockLoaded = "System.Void Block::OnBlockLoaded(WorldBase,System.Int32,Vector3i,BlockValue)";
            public static class OnBlockLoadedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockLoaded_WorldBase_Int32_Vector3i_BlockValue = "System.Void BlockShape::OnBlockLoaded(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string OnBlockUnloaded = "System.Void Block::OnBlockUnloaded(WorldBase,System.Int32,Vector3i,BlockValue)";
            public static class OnBlockUnloadedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockUnloaded_WorldBase_Int32_Vector3i_BlockValue = "System.Void BlockShape::OnBlockUnloaded(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string OnNeighborBlockChange = "System.Void Block::OnNeighborBlockChange(WorldBase,System.Int32,Vector3i,BlockValue,Vector3i,BlockValue,BlockValue)";
            public const string CanFallBelow = "System.Boolean Block::CanFallBelow(WorldBase,System.Int32,System.Int32,System.Int32)";
            public static class CanFallBelowInjects
            {
                public const string WorldBase_GetBlock_Int32_Int32_Int32 = "BlockValue WorldBase::GetBlock(System.Int32,System.Int32,System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string list = "Block[] Block::list";
                public const string StabilitySupport = "System.Boolean Block::StabilitySupport";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
            }

            public const string GetTickRate = "System.UInt64 Block::GetTickRate()";
            public const string OnBlockAdded = "System.Void Block::OnBlockAdded(WorldBase,Chunk,Vector3i,BlockValue)";
            public static class OnBlockAddedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockAdded_WorldBase_Chunk_Vector3i_BlockValue = "System.Void BlockShape::OnBlockAdded(WorldBase,Chunk,Vector3i,BlockValue)";
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string MultiBlockArray_AddChilds_WorldBase_Chunk_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::AddChilds(WorldBase,Chunk,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
            }

            public const string OnBlockRemoved = "System.Void Block::OnBlockRemoved(WorldBase,Chunk,Vector3i,BlockValue)";
            public static class OnBlockRemovedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockRemoved_WorldBase_Chunk_Vector3i_BlockValue = "System.Void BlockShape::OnBlockRemoved(WorldBase,Chunk,Vector3i,BlockValue)";
                public const string Chunk_get_ClrIdx = "System.Int32 Chunk::get_ClrIdx()";
                public const string MultiBlockArray_RemoveChilds_WorldBase_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::RemoveChilds(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string MultiBlockArray_RemoveParentBlock_WorldBase_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::RemoveParentBlock(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
            }

            public const string OnBlockValueChanged = "System.Void Block::OnBlockValueChanged(WorldBase,Chunk,System.Int32,Vector3i,BlockValue,BlockValue)";
            public static class OnBlockValueChangedInjects
            {
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string BlockShape_OnBlockValueChanged_WorldBase_Vector3i_Int32_BlockValue_BlockValue = "System.Void BlockShape::OnBlockValueChanged(WorldBase,Vector3i,System.Int32,BlockValue,BlockValue)";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string ChunkClusterList_get_Item_Int32 = "ChunkCluster ChunkClusterList::get_Item(System.Int32)";
                public const string MultiBlockArray_RemoveChilds_WorldBase_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::RemoveChilds(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string MultiBlockArray_AddChilds_WorldBase_Chunk_Int32_Vector3i_BlockValue = "System.Void Block/MultiBlockArray::AddChilds(WorldBase,Chunk,System.Int32,Vector3i,BlockValue)";
                public const string shape = "BlockShape Block::shape";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string ChunkClusters = "ChunkClusterList WorldBase::ChunkClusters";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
            }

            public const string OnBlockEntityTransformBeforeActivated = "System.Void Block::OnBlockEntityTransformBeforeActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
            public static class OnBlockEntityTransformBeforeActivatedInjects
            {
                public const string BlockShape_OnBlockEntityTransformBeforeActivated_WorldBase_Vector3i_Int32_BlockValue_BlockEntityData = "System.Void BlockShape::OnBlockEntityTransformBeforeActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string OnBlockEntityTransformAfterActivated = "System.Void Block::OnBlockEntityTransformAfterActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
            public static class OnBlockEntityTransformAfterActivatedInjects
            {
                public const string BlockShape_OnBlockEntityTransformAfterActivated_WorldBase_Vector3i_Int32_BlockValue_BlockEntityData = "System.Void BlockShape::OnBlockEntityTransformAfterActivated(WorldBase,Vector3i,System.Int32,BlockValue,BlockEntityData)";
                public const string BlockEntityData_UpdateTemperature = "System.Void BlockEntityData::UpdateTemperature()";
                public const string Block_ForceAnimationState_BlockValue_BlockEntityData = "System.Void Block::ForceAnimationState(BlockValue,BlockEntityData)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string ForceAnimationState = "System.Void Block::ForceAnimationState(BlockValue,BlockEntityData)";
            public const string DamageBlock = "System.Int32 Block::DamageBlock(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Int32,System.Boolean,System.Boolean)";
            public static class DamageBlockInjects
            {
                public const string Block_OnBlockDamaged_WorldBase_Int32_Vector3i_BlockValue_Int32_Int32_Boolean_Boolean_Int32 = "System.Int32 Block::OnBlockDamaged(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)";
            }

            public const string OnBlockDamaged = "System.Int32 Block::OnBlockDamaged(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)";
            public static class OnBlockDamagedInjects
            {
                public const string ChunkClusterList_get_Item_Int32 = "ChunkCluster ChunkClusterList::get_Item(System.Int32)";
                public const string BlockValue_get_ischild = "System.Boolean BlockValue::get_ischild()";
                public const string MultiBlockArray_GetParentPos_Vector3i_BlockValue = "Vector3i Block/MultiBlockArray::GetParentPos(Vector3i,BlockValue)";
                public const string ChunkCluster_GetBlock_Vector3i = "BlockValue ChunkCluster::GetBlock(Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Log_Error_String_Object_ = "System.Void Log::Error(System.String,System.Object[])";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_OnBlockDamaged_WorldBase_Int32_Vector3i_BlockValue_Int32_Int32_Boolean_Boolean_Int32 = "System.Int32 Block::OnBlockDamaged(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)";
                public const string ChunkCluster_InvokeOnBlockDamagedDelegates_Vector3i_BlockValue_Int32_Int32 = "System.Void ChunkCluster::InvokeOnBlockDamagedDelegates(Vector3i,BlockValue,System.Int32,System.Int32)";
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string BlockPlaceholderMap_Replace_BlockValue_GameRandom_Int32_Int32_Boolean_QuestTags = "BlockValue BlockPlaceholderMap::Replace(BlockValue,GameRandom,System.Int32,System.Int32,System.Boolean,QuestTags)";
                public const string Block_convertRotation_BlockValue_BlockValue = "System.Byte Block::convertRotation(BlockValue,BlockValue)";
                public const string BlockValue_set_rotation_Byte = "System.Void BlockValue::set_rotation(System.Byte)";
                public const string BlockValue_get_meta = "System.Byte BlockValue::get_meta()";
                public const string BlockValue_set_meta_Byte = "System.Void BlockValue::set_meta(System.Byte)";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string WorldBase_SetBlockRPC_Int32_Vector3i_BlockValue = "System.Void WorldBase::SetBlockRPC(System.Int32,Vector3i,BlockValue)";
                public const string ChunkCluster_GetTextureFull_Vector3i = "System.Int64 ChunkCluster::GetTextureFull(Vector3i)";
                public const string GameManager_SetBlockTextureServer_Vector3i_BlockFace_Int32_Int32 = "System.Void GameManager::SetBlockTextureServer(Vector3i,BlockFace,System.Int32,System.Int32)";
                public const string WorldBase_SetBlockRPC_Int32_Vector3i_BlockValue_SByte = "System.Void WorldBase::SetBlockRPC(System.Int32,Vector3i,BlockValue,System.SByte)";
                public const string Block_OnBlockDestroyedBy_WorldBase_Int32_Vector3i_BlockValue_Int32_Boolean = "Block/DestroyedResult Block::OnBlockDestroyedBy(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Boolean)";
                public const string Block_GetColorForSide_BlockValue_BlockFace = "UnityEngine.Color Block::GetColorForSide(BlockValue,BlockFace)";
                public const string Block_SpawnDestroyParticleEffect_WorldBase_BlockValue_Vector3i_Single_Color_Int32 = "System.Void Block::SpawnDestroyParticleEffect(WorldBase,BlockValue,Vector3i,System.Single,UnityEngine.Color,System.Int32)";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string List_1_get_Item_Int32 = "BlockFace System.Collections.Generic.List`1<BlockFace>::get_Item(System.Int32)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<BlockFace>::get_Count()";
                public const string QuestEventManager_get_Current = "QuestEventManager QuestEventManager::get_Current()";
                public const string QuestEventManager_BlockDestroyed_Block_Vector3i = "System.Void QuestEventManager::BlockDestroyed(Block,Vector3i)";
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string TileEntity_OnDestroy = "System.Void TileEntity::OnDestroy()";
                public const string ReadOnlyCollection_1_get_Item_Int32 = "LocalPlayerUI System.Collections.ObjectModel.ReadOnlyCollection`1<LocalPlayerUI>::get_Item(System.Int32)";
                public const string LocalPlayerUI_get_windowManager = "GUIWindowManager LocalPlayerUI::get_windowManager()";
                public const string GUIWindowManager_IsWindowOpen_String = "System.Boolean GUIWindowManager::IsWindowOpen(System.String)";
                public const string LocalPlayerUI_get_xui = "XUi LocalPlayerUI::get_xui()";
                public const string XUi_GetWindow_String = "XUiV_Window XUi::GetWindow(System.String)";
                public const string XUiView_get_Controller = "XUiController XUiView::get_Controller()";
                public const string XUiC_LootWindow_GetLootBlockPos = "Vector3i XUiC_LootWindow::GetLootBlockPos()";
                public const string Vector3i_op_Equality_Vector3i_Vector3i = "System.Boolean Vector3i::op_Equality(Vector3i,Vector3i)";
                public const string GUIWindowManager_Close_String = "System.Void GUIWindowManager::Close(System.String)";
                public const string ReadOnlyCollection_1_get_Count = "System.Int32 System.Collections.ObjectModel.ReadOnlyCollection`1<LocalPlayerUI>::get_Count()";
                public const string WorldBase_GetChunkFromWorldPos_Vector3i = "IChunk WorldBase::GetChunkFromWorldPos(Vector3i)";
                public const string World_toBlock_Vector3i = "Vector3i World::toBlock(Vector3i)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<BlockChangeInfo>::Add(BlockChangeInfo)";
                public const string WorldBase_SetBlocksRPC_List_1 = "System.Void WorldBase::SetBlocksRPC(System.Collections.Generic.List`1<BlockChangeInfo>)";
                public const string WorldBase_GetDensity_Int32_Vector3i = "System.SByte WorldBase::GetDensity(System.Int32,Vector3i)";
                public const string Utils_FastMin_Single_Single = "System.Single Utils::FastMin(System.Single,System.Single)";
                public const string ChunkClusters = "ChunkClusterList WorldBase::ChunkClusters";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string blockName = "System.String Block::blockName";
                public const string list = "Block[] Block::list";
                public const string damage = "System.Int32 BlockValue::damage";
                public const string MaxDamage = "System.Int32 Block::MaxDamage";
                public const string UpgradeBlock = "BlockValue Block::UpgradeBlock";
                public const string Instance = "BlockPlaceholderMap BlockPlaceholderMap::Instance";
                public const string x = "System.Int32 Vector3i::x";
                public const string z = "System.Int32 Vector3i::z";
                public const string shape = "BlockShape Block::shape";
                public const string Density = "System.SByte Block::Density";
                public const string DowngradeBlock = "BlockValue Block::DowngradeBlock";
                public const string RemovePaintOnDowngrade = "System.Collections.Generic.List`1<BlockFace> Block::RemovePaintOnDowngrade";
                public const string EnablePassThroughDamage = "System.Boolean Block::EnablePassThroughDamage";
                public const string Air = "BlockValue BlockValue::Air";
                public const string PlayerUIs = "System.Collections.ObjectModel.ReadOnlyCollection`1<LocalPlayerUI> LocalPlayerUI::PlayerUIs";
                public const string DensityTerrain = "System.SByte MarchingCubes::DensityTerrain";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<BlockChangeInfo>::.ctor()";
                public const string BlockChangeInfo_ctor_Vector3i_BlockValue_Boolean_Boolean = "System.Void BlockChangeInfo::.ctor(Vector3i,BlockValue,System.Boolean,System.Boolean)";
            }

            public const string convertRotation = "System.Byte Block::convertRotation(BlockValue,BlockValue)";
            public static class convertRotationInjects
            {
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
            }

            public const string AddDroppedId = "System.Void Block::AddDroppedId(EnumDropEvent,System.String,System.Int32,System.Int32,System.Single,System.Single,System.String,System.String)";
            public static class AddDroppedIdInjects
            {
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::ContainsKey(EnumDropEvent)";
                public const string Dictionary_2_get_Item_TKey = "System.Collections.Generic.List`1<Block/SItemDropProb> System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::get_Item(EnumDropEvent)";
                public const string Dictionary_2_set_Item_TKey_TValue = "System.Void System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::set_Item(EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>)";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Block/SItemDropProb>::Add(Block/SItemDropProb)";
                public const string itemsToDrop = "System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> Block::itemsToDrop";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Block/SItemDropProb>::.ctor()";
                public const string SItemDropProb_ctor_String_Int32_Int32_Single_Single_String_String = "System.Void Block/SItemDropProb::.ctor(System.String,System.Int32,System.Int32,System.Single,System.Single,System.String,System.String)";
            }

            public const string HasItemsToDropForEvent = "System.Boolean Block::HasItemsToDropForEvent(EnumDropEvent)";
            public static class HasItemsToDropForEventInjects
            {
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::ContainsKey(EnumDropEvent)";
                public const string itemsToDrop = "System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> Block::itemsToDrop";
            }

            public const string DropItemsOnEvent = "System.Void Block::DropItemsOnEvent(WorldBase,BlockValue,EnumDropEvent,System.Single,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32,System.Boolean)";
            public static class DropItemsOnEventInjects
            {
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<ItemStack>::Clear()";
                public const string Dictionary_2_TryGetValue_TKey_TValue_ = "System.Boolean System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>>::TryGetValue(EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>&)";
                public const string BlockValue_ToItemValue = "ItemValue BlockValue::ToItemValue()";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<ItemStack>::Add(ItemStack)";
                public const string List_1_get_Item_Int32 = "Block/SItemDropProb System.Collections.Generic.List`1<Block/SItemDropProb>::get_Item(System.Int32)";
                public const string GameRandom_RandomRange_Int32_Int32 = "System.Int32 GameRandom::RandomRange(System.Int32,System.Int32)";
                public const string GameRandom_get_RandomFloat = "System.Single GameRandom::get_RandomFloat()";
                public const string String_Equals_String = "System.Boolean System.String::Equals(System.String)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string CraftingManager_GetRecipes_String = "System.Collections.Generic.List`1<Recipe> CraftingManager::GetRecipes(System.String)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<Recipe>::get_Count()";
                public const string ItemClass_GetItem_String_Boolean = "ItemValue ItemClass::GetItem(System.String,System.Boolean)";
                public const string ItemValue_IsEmpty = "System.Boolean ItemValue::IsEmpty()";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string World_worldToBlockPos_Vector3 = "Vector3i World::worldToBlockPos(UnityEngine.Vector3)";
                public const string WorldBase_GetBlock_Vector3i = "BlockValue WorldBase::GetBlock(Vector3i)";
                public const string WorldBase_SetBlockRPC_Vector3i_BlockValue = "System.Void WorldBase::SetBlockRPC(Vector3i,BlockValue)";
                public const string ItemValue_get_ItemClass = "ItemClass ItemValue::get_ItemClass()";
                public const string ItemClass_GetLifetimeOnDrop = "System.Single ItemClass::GetLifetimeOnDrop()";
                public const string WorldBase_GetGameManager = "IGameManager WorldBase::GetGameManager()";
                public const string IGameManager_ItemDropServer_ItemStack_Vector3_Vector3_Int32_Single_Boolean = "System.Void IGameManager::ItemDropServer(ItemStack,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean)";
                public const string itemsDropped = "System.Collections.Generic.List`1<ItemStack> Block::itemsDropped";
                public const string itemsToDrop = "System.Collections.Generic.Dictionary`2<EnumDropEvent,System.Collections.Generic.List`1<Block/SItemDropProb>> Block::itemsToDrop";
                public const string minCount = "System.Int32 Block/SItemDropProb::minCount";
                public const string maxCount = "System.Int32 Block/SItemDropProb::maxCount";
                public const string stickChance = "System.Single Block/SItemDropProb::stickChance";
                public const string name = "System.String Block/SItemDropProb::name";
                public const string list = "Block[] Block::list";
                public const string ingredients = "System.Collections.Generic.List`1<ItemStack> Recipe::ingredients";
                public const string count = "System.Int32 ItemStack::count";
                public const string itemValue = "ItemValue ItemStack::itemValue";
                public const string type = "System.Int32 ItemValue::type";
                public const string prob = "System.Single Block/SItemDropProb::prob";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string ItemStack_ctor_ItemValue_Int32 = "System.Void ItemStack::.ctor(ItemValue,System.Int32)";
                public const string ItemValue_ctor_Int32_Boolean = "System.Void ItemValue::.ctor(System.Int32,System.Boolean)";
            }

            public const string GetResistance = "System.Single Block::GetResistance()";
            public static class GetResistanceInjects
            {
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string Resistance = "System.Single MaterialBlock::Resistance";
            }

            public const string intersectRayWithBlock = "System.Boolean Block::intersectRayWithBlock(BlockValue,System.Int32,System.Int32,System.Int32,UnityEngine.Ray,UnityEngine.Vector3&,World)";
            public static class intersectRayWithBlockInjects
            {
                public const string List_1_Clear = "System.Void System.Collections.Generic.List`1<UnityEngine.Bounds>::Clear()";
                public const string Block_GetCollisionAABB_BlockValue_Int32_Int32_Int32_Single_List_1 = "System.Void Block::GetCollisionAABB(BlockValue,System.Int32,System.Int32,System.Int32,System.Single,System.Collections.Generic.List`1<UnityEngine.Bounds>)";
                public const string List_1_get_Item_Int32 = "UnityEngine.Bounds System.Collections.Generic.List`1<UnityEngine.Bounds>::get_Item(System.Int32)";
                public const string Bounds_IntersectRay_Ray = "System.Boolean UnityEngine.Bounds::IntersectRay(UnityEngine.Ray)";
                public const string List_1_get_Count = "System.Int32 System.Collections.Generic.List`1<UnityEngine.Bounds>::get_Count()";
                public const string Vector3_get_zero = "UnityEngine.Vector3 UnityEngine.Vector3::get_zero()";
                public const string staticList_IntersectRayWithBlockList = "System.Collections.Generic.List`1<UnityEngine.Bounds> Block::staticList_IntersectRayWithBlockList";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
            }

            public const string OnBlockDestroyedByExplosion = "Block/DestroyedResult Block::OnBlockDestroyedByExplosion(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32)";
            public static class OnBlockDestroyedByExplosionInjects
            {
                public const string ChunkClusterList_get_Item_Int32 = "ChunkCluster ChunkClusterList::get_Item(System.Int32)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string ChunkCluster_InvokeOnBlockDamagedDelegates_Vector3i_BlockValue_Int32_Int32 = "System.Void ChunkCluster::InvokeOnBlockDamagedDelegates(Vector3i,BlockValue,System.Int32,System.Int32)";
                public const string ChunkClusters = "ChunkClusterList WorldBase::ChunkClusters";
                public const string list = "Block[] Block::list";
                public const string MaxDamage = "System.Int32 Block::MaxDamage";
            }

            public const string OnBlockStartsToFall = "System.Void Block::OnBlockStartsToFall(WorldBase,Vector3i,BlockValue)";
            public static class OnBlockStartsToFallInjects
            {
                public const string WorldBase_SetBlockRPC_Vector3i_BlockValue = "System.Void WorldBase::SetBlockRPC(Vector3i,BlockValue)";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string CanPlaceBlockAt = "System.Boolean Block::CanPlaceBlockAt(WorldBase,System.Int32,Vector3i,BlockValue,System.Boolean)";
            public static class CanPlaceBlockAtInjects
            {
                public const string GameManager_IsEditMode = "System.Boolean GameManager::IsEditMode()";
                public const string World_IsWithinTraderArea_Vector3i = "System.Boolean World::IsWithinTraderArea(Vector3i)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_overlapsWithOtherBlock_WorldBase_Int32_Vector3i_BlockValue = "System.Boolean Block::overlapsWithOtherBlock(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string y = "System.Int32 Vector3i::y";
                public const string Instance = "GameManager GameManager::Instance";
                public const string list = "Block[] Block::list";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string dim = "Vector3i Block/MultiBlockArray::dim";
            }

            public const string GetFreePlacementPosition = "Vector3i Block::GetFreePlacementPosition(WorldBase,System.Int32,Vector3i,BlockValue,EntityAlive)";
            public static class GetFreePlacementPositionInjects
            {
                public const string Entity_getHeadPosition = "UnityEngine.Vector3 Entity::getHeadPosition()";
                public const string Vector3i_ToVector3 = "UnityEngine.Vector3 Vector3i::ToVector3()";
                public const string Vector3_get_one = "UnityEngine.Vector3 UnityEngine.Vector3::get_one()";
                public const string Vector3_op_Multiply_Vector3_Single = "UnityEngine.Vector3 UnityEngine.Vector3::op_Multiply(UnityEngine.Vector3,System.Single)";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Vector3_op_Subtraction_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Subtraction(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string Voxel_OneVoxelStep_Vector3i_Vector3_Vector3_Vector3_BlockFace_ = "Vector3i Voxel::OneVoxelStep(Vector3i,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3&,BlockFace&)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_overlapsWithOtherBlock_WorldBase_Int32_Vector3i_BlockValue = "System.Boolean Block::overlapsWithOtherBlock(WorldBase,System.Int32,Vector3i,BlockValue)";
                public const string list = "Block[] Block::list";
            }

            public const string overlapsWithOtherBlock = "System.Boolean Block::overlapsWithOtherBlock(WorldBase,System.Int32,Vector3i,BlockValue)";
            public static class overlapsWithOtherBlockInjects
            {
                public const string WorldBase_GetBlock_Int32_Vector3i = "BlockValue WorldBase::GetBlock(System.Int32,Vector3i)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string MultiBlockArray_Get_Int32_Int32_Int32 = "Vector3i Block/MultiBlockArray::Get(System.Int32,System.Int32,System.Int32)";
                public const string Vector3i_op_Addition_Vector3i_Vector3i = "Vector3i Vector3i::op_Addition(Vector3i,Vector3i)";
                public const string isMultiBlock = "System.Boolean Block::isMultiBlock";
                public const string list = "Block[] Block::list";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsGroundCover = "System.Boolean MaterialBlock::IsGroundCover";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string multiBlockPos = "Block/MultiBlockArray Block::multiBlockPos";
                public const string Length = "System.Int32 Block/MultiBlockArray::Length";
            }

            public const string OnBlockPlaced = "BlockValue Block::OnBlockPlaced(WorldBase,System.Int32,Vector3i,BlockValue,GameRandom)";
            public const string OnBlockPlaceBefore = "System.Void Block::OnBlockPlaceBefore(WorldBase,BlockPlacement/Result&,EntityAlive,GameRandom)";
            public static class OnBlockPlaceBeforeInjects
            {
                public const string BlockValue_get_rotation = "System.Byte BlockValue::get_rotation()";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string Inventory_get_holdingItemItemValue = "ItemValue Inventory::get_holdingItemItemValue()";
                public const string Block_GetAltBlockValue_Int32 = "BlockValue Block::GetAltBlockValue(System.Int32)";
                public const string BlockValue_set_rotation_Byte = "System.Void BlockValue::set_rotation(System.Byte)";
                public const string Block_GetPlaceAltBlockValue_WorldBase = "System.String Block::GetPlaceAltBlockValue(WorldBase)";
                public const string String_get_Length = "System.Int32 System.String::get_Length()";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string SelectAlternates = "System.Boolean Block::SelectAlternates";
                public const string blockValue = "BlockValue BlockPlacement/Result::blockValue";
                public const string inventory = "Inventory EntityAlive::inventory";
                public const string Meta = "System.Int32 ItemValue::Meta";
            }

            public const string PlaceBlock = "System.Void Block::PlaceBlock(WorldBase,BlockPlacement/Result,EntityAlive)";
            public static class PlaceBlockInjects
            {
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string WorldBase_SetBlockRPC_Int32_Vector3i_BlockValue_SByte = "System.Void WorldBase::SetBlockRPC(System.Int32,Vector3i,BlockValue,System.SByte)";
                public const string WorldBase_SetBlockRPC_Int32_Vector3i_BlockValue = "System.Void WorldBase::SetBlockRPC(System.Int32,Vector3i,BlockValue)";
                public const string String_Equals_String = "System.Boolean System.String::Equals(System.String)";
                public const string Object_op_Inequality_Object_Object = "System.Boolean UnityEngine.Object::op_Inequality(UnityEngine.Object,UnityEngine.Object)";
                public const string Platform_get_AchievementManager = "AchievementManager Platform::get_AchievementManager()";
                public const string AchievementManager_SetAchievementStat_UserProfile_EnumAchievementDataStat_Int32 = "System.Void AchievementManager::SetAchievementStat(UserProfile,EnumAchievementDataStat,System.Int32)";
                public const string list = "Block[] Block::list";
                public const string blockValue = "BlockValue BlockPlacement/Result::blockValue";
                public const string shape = "BlockShape Block::shape";
                public const string clrIdx = "System.Int32 BlockPlacement/Result::clrIdx";
                public const string blockPos = "Vector3i BlockPlacement/Result::blockPos";
                public const string Density = "System.SByte Block::Density";
                public const string IsTerrainDecoration = "System.Boolean Block::IsTerrainDecoration";
                public const string DensityAir = "System.SByte MarchingCubes::DensityAir";
                public const string blockName = "System.String Block::blockName";
                public const string user = "UserProfile EntityPlayerLocal::user";
            }

            public const string OnBlockDestroyedBy = "Block/DestroyedResult Block::OnBlockDestroyedBy(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32,System.Boolean)";
            public const string OnBlockPickedUp = "ItemStack Block::OnBlockPickedUp(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32)";
            public static class OnBlockPickedUpInjects
            {
                public const string ItemClass_GetItem_String_Boolean = "ItemValue ItemClass::GetItem(System.String,System.Boolean)";
                public const string BlockValue_ToItemValue = "ItemValue BlockValue::ToItemValue()";
                public const string PickedUpItemValue = "System.String Block::PickedUpItemValue";
                public const string PickupTarget = "System.String Block::PickupTarget";
                public const string type = "System.Int32 ItemValue::type";
                public const string ItemStack_ctor_ItemValue_Int32 = "System.Void ItemStack::.ctor(ItemValue,System.Int32)";
                public const string ItemValue_ctor_Int32_Boolean = "System.Void ItemValue::.ctor(System.Int32,System.Boolean)";
            }

            public const string OnBlockActivated_WorldBase_Int32_Vector3i_BlockValue_EntityAlive = "System.Boolean Block::OnBlockActivated(WorldBase,System.Int32,Vector3i,BlockValue,EntityAlive)";
            public static class OnBlockActivated_WorldBase_Int32_Vector3i_BlockValue_EntityAliveInjects
            {
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string EntityAlive_set_AimingGun_Boolean = "System.Void EntityAlive::set_AimingGun(System.Boolean)";
                public const string TileEntity_ToWorldPos = "Vector3i TileEntity::ToWorldPos()";
                public const string WorldBase_GetGameManager = "IGameManager WorldBase::GetGameManager()";
                public const string IGameManager_TELockServer_Int32_Vector3i_Int32_Int32_String = "System.Void IGameManager::TELockServer(System.Int32,Vector3i,System.Int32,System.Int32,System.String)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string EffectManager_GetValue_PassiveEffects_ItemValue_Single_EntityAlive_Recipe_FastTags_Boolean_Boolean_Boolean_Boolean_Int32_Boolean = "System.Single EffectManager::GetValue(PassiveEffects,ItemValue,System.Single,EntityAlive,Recipe,FastTags,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)";
                public const string IGameManager_GetPersistentLocalPlayer = "PersistentPlayerData IGameManager::GetPersistentLocalPlayer()";
                public const string WorldBase_CanPickupBlockAt_Vector3i_PersistentPlayerData = "System.Boolean WorldBase::CanPickupBlockAt(Vector3i,PersistentPlayerData)";
                public const string Entity_PlayOneShot_String_Boolean = "System.Void Entity::PlayOneShot(System.String,System.Boolean)";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string GameManager_ShowTooltipWithAlert_EntityPlayerLocal_String_String = "System.Void GameManager::ShowTooltipWithAlert(EntityPlayerLocal,System.String,System.String)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_OnBlockPickedUp_WorldBase_Int32_Vector3i_BlockValue_Int32 = "ItemStack Block::OnBlockPickedUp(WorldBase,System.Int32,Vector3i,BlockValue,System.Int32)";
                public const string Inventory_CanTakeItem_ItemStack = "System.Boolean Inventory::CanTakeItem(ItemStack)";
                public const string Bag_CanTakeItem_ItemStack = "System.Boolean Bag::CanTakeItem(ItemStack)";
                public const string QuestEventManager_get_Current = "QuestEventManager QuestEventManager::get_Current()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string QuestEventManager_BlockPickedUp_String_Vector3i = "System.Void QuestEventManager::BlockPickedUp(System.String,Vector3i)";
                public const string QuestEventManager_ItemAdded_ItemStack = "System.Void QuestEventManager::ItemAdded(ItemStack)";
                public const string IGameManager_PickupBlockServer_Int32_Vector3i_BlockValue_Int32_String = "System.Void IGameManager::PickupBlockServer(System.Int32,Vector3i,BlockValue,System.Int32,System.String)";
                public const string bTouched = "System.Boolean TileEntityLootContainer::bTouched";
                public const string bWasTouched = "System.Boolean TileEntityLootContainer::bWasTouched";
                public const string entityId = "System.Int32 TileEntity::entityId";
                public const string CanPickup = "System.Boolean Block::CanPickup";
                public const string Tags = "FastTags Block::Tags";
                public const string damage = "System.Int32 BlockValue::damage";
                public const string list = "Block[] Block::list";
                public const string inventory = "Inventory EntityAlive::inventory";
                public const string bag = "Bag EntityAlive::bag";
            }

            public const string OnEntityCollidedWithBlock = "System.Boolean Block::OnEntityCollidedWithBlock(WorldBase,System.Int32,Vector3i,BlockValue,Entity)";
            public const string OnEntityWalking = "System.Void Block::OnEntityWalking(WorldBase,System.Int32,System.Int32,System.Int32,BlockValue,Entity)";
            public const string CanPlantStay = "System.Boolean Block::CanPlantStay(WorldBase,System.Int32,Vector3i,BlockValue)";
            public const string SetBlockName = "System.Void Block::SetBlockName(System.String)";
            public static class SetBlockNameInjects
            {
                public const string blockName = "System.String Block::blockName";
            }

            public const string GetBlockName = "System.String Block::GetBlockName()";
            public static class GetBlockNameInjects
            {
                public const string blockName = "System.String Block::blockName";
            }

            public const string SetLocalizedBlockName = "System.Void Block::SetLocalizedBlockName(System.String)";
            public static class SetLocalizedBlockNameInjects
            {
                public const string localizedBlockName = "System.String Block::localizedBlockName";
            }

            public const string GetLocalizedBlockName = "System.String Block::GetLocalizedBlockName()";
            public static class GetLocalizedBlockNameInjects
            {
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string localizedBlockName = "System.String Block::localizedBlockName";
            }

            public const string SetSideTextureId_Int32 = "System.Void Block::SetSideTextureId(System.Int32)";
            public static class SetSideTextureId_Int32Injects
            {
                public const string singleTextureId = "System.Int32 Block::singleTextureId";
                public const string bTextureForEachSide = "System.Boolean Block::bTextureForEachSide";
            }

            public const string SetSideTextureId_BlockFace_Int32 = "System.Void Block::SetSideTextureId(BlockFace,System.Int32)";
            public static class SetSideTextureId_BlockFace_Int32Injects
            {
                public const string sideTextureIds = "System.Int32[] Block::sideTextureIds";
                public const string bTextureForEachSide = "System.Boolean Block::bTextureForEachSide";
            }

            public const string GetSideTextureId = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
            public static class GetSideTextureIdInjects
            {
                public const string BlockShape_MapSideAndRotationToTextureIdx_BlockValue_BlockFace = "System.Int32 BlockShape::MapSideAndRotationToTextureIdx(BlockValue,BlockFace)";
                public const string bTextureForEachSide = "System.Boolean Block::bTextureForEachSide";
                public const string shape = "BlockShape Block::shape";
                public const string sideTextureIds = "System.Int32[] Block::sideTextureIds";
                public const string singleTextureId = "System.Int32 Block::singleTextureId";
            }

            public const string GetMaterialForSide = "MaterialBlock Block::GetMaterialForSide(BlockValue,BlockFace)";
            public static class GetMaterialForSideInjects
            {
                public const string Block_GetSideTextureId_BlockValue_BlockFace = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_get_MeshIndex = "System.Byte Block::get_MeshIndex()";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string list = "Block[] Block::list";
                public const string textureAtlas = "TextureAtlas MeshDescription::textureAtlas";
                public const string uvMapping = "UVRectTiling[] TextureAtlas::uvMapping";
                public const string material = "MaterialBlock UVRectTiling::material";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
            }

            public const string GetParticleForSide = "System.String Block::GetParticleForSide(BlockValue,BlockFace)";
            public static class GetParticleForSideInjects
            {
                public const string Block_GetMaterialForSide_BlockValue_BlockFace = "MaterialBlock Block::GetMaterialForSide(BlockValue,BlockFace)";
                public const string ParticleCategory = "System.String MaterialBlock::ParticleCategory";
                public const string SurfaceCategory = "System.String MaterialBlock::SurfaceCategory";
            }

            public const string GetDestroyParticle = "System.String Block::GetDestroyParticle(BlockValue)";
            public static class GetDestroyParticleInjects
            {
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string ParticleDestroyCategory = "System.String MaterialBlock::ParticleDestroyCategory";
                public const string ParticleCategory = "System.String MaterialBlock::ParticleCategory";
                public const string SurfaceCategory = "System.String MaterialBlock::SurfaceCategory";
            }

            public const string GetColorForSide = "UnityEngine.Color Block::GetColorForSide(BlockValue,BlockFace)";
            public static class GetColorForSideInjects
            {
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_get_MeshIndex = "System.Byte Block::get_MeshIndex()";
                public const string Block_GetSideTextureId_BlockValue_BlockFace = "System.Int32 Block::GetSideTextureId(BlockValue,BlockFace)";
                public const string Color_get_gray = "UnityEngine.Color UnityEngine.Color::get_gray()";
                public const string meshes = "MeshDescription[] MeshDescription::meshes";
                public const string list = "Block[] Block::list";
                public const string textureAtlas = "TextureAtlas MeshDescription::textureAtlas";
                public const string uvMapping = "UVRectTiling[] TextureAtlas::uvMapping";
                public const string color = "UnityEngine.Color UVRectTiling::color";
            }

            public const string GetMapColor = "UnityEngine.Color Block::GetMapColor(BlockValue,UnityEngine.Vector3,System.Int32)";
            public static class GetMapColorInjects
            {
                public const string Block_GetColorForSide_BlockValue_BlockFace = "UnityEngine.Color Block::GetColorForSide(BlockValue,BlockFace)";
                public const string Utils_FastMax_Int32_Int32 = "System.Int32 Utils::FastMax(System.Int32,System.Int32)";
                public const string Color_Lerp_Color_Color_Single = "UnityEngine.Color UnityEngine.Color::Lerp(UnityEngine.Color,UnityEngine.Color,System.Single)";
                public const string Utils_FastMax_Single_Single = "System.Single Utils::FastMax(System.Single,System.Single)";
                public const string Color_op_Multiply_Color_Single = "UnityEngine.Color UnityEngine.Color::op_Multiply(UnityEngine.Color,System.Single)";
                public const string Color_op_Addition_Color_Color = "UnityEngine.Color UnityEngine.Color::op_Addition(UnityEngine.Color,UnityEngine.Color)";
                public const string Utils_Saturate_Color = "UnityEngine.Color Utils::Saturate(UnityEngine.Color)";
                public const string bMapColorSet = "System.Boolean Block::bMapColorSet";
                public const string x = "System.Single UnityEngine.Vector3::x";
                public const string z = "System.Single UnityEngine.Vector3::z";
                public const string MapColor = "UnityEngine.Color Block::MapColor";
                public const string MapSpecular = "System.Single Block::MapSpecular";
                public const string bMapColor2Set = "System.Boolean Block::bMapColor2Set";
                public const string MapElevMinMax = "Vector2i Block::MapElevMinMax";
                public const string y = "System.Int32 Vector2i::y";
                public const string MapColor2 = "UnityEngine.Color Block::MapColor2";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsLiquid = "System.Boolean MaterialBlock::IsLiquid";
                public const string a = "System.Single UnityEngine.Color::a";
            }

            public const string CanDrop = "System.Boolean Block::CanDrop(BlockValue)";
            public static class CanDropInjects
            {
                public const string BlockValue_Equals_BlockValue = "System.Boolean BlockValue::Equals(BlockValue)";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string IsElevator = "System.Boolean Block::IsElevator()";
            public const string IsElevator_Int32 = "System.Boolean Block::IsElevator(System.Int32)";
            public const string IsPlant = "System.Boolean Block::IsPlant()";
            public static class IsPlantInjects
            {
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string IsPlant = "System.Boolean MaterialBlock::IsPlant";
                public const string bIsPlant = "System.Boolean Block::bIsPlant";
            }

            public const string HasTag = "System.Boolean Block::HasTag(BlockTags)";
            public static class HasTagInjects
            {
                public const string BlockTag = "BlockTags Block::BlockTag";
            }

            public const string HasAnyFastTags = "System.Boolean Block::HasAnyFastTags(FastTags)";
            public static class HasAnyFastTagsInjects
            {
                public const string FastTags_Test_AnySet_FastTags = "System.Boolean FastTags::Test_AnySet(FastTags)";
                public const string Tags = "FastTags Block::Tags";
            }

            public const string HasAllFastTags = "System.Boolean Block::HasAllFastTags(FastTags)";
            public static class HasAllFastTagsInjects
            {
                public const string FastTags_Test_AllSet_FastTags = "System.Boolean FastTags::Test_AllSet(FastTags)";
                public const string Tags = "FastTags Block::Tags";
            }

            public const string CanRepair = "System.Boolean Block::CanRepair(BlockValue)";
            public static class CanRepairInjects
            {
                public const string damage = "System.Int32 BlockValue::damage";
            }

            public const string GetActivationText = "System.String Block::GetActivationText(WorldBase,BlockValue,System.Int32,Vector3i,EntityAlive)";
            public static class GetActivationTextInjects
            {
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string BlockValue_get_type = "System.Int32 BlockValue::get_type()";
                public const string Block_GetBlockName = "System.String Block::GetBlockName()";
                public const string Localization_Get_String = "System.String Localization::Get(System.String)";
                public const string EntityPlayerLocal_get_playerInput = "PlayerActionsLocal EntityPlayerLocal::get_playerInput()";
                public const string XUiUtils_GetBindingXuiMarkupString_PlayerAction_EmptyBindingStyle_DisplayStyle_String = "System.String XUiUtils::GetBindingXuiMarkupString(InControl.PlayerAction,XUiUtils/EmptyBindingStyle,XUiUtils/DisplayStyle,System.String)";
                public const string PlayerActionsLocal_get_PermanentActions = "PlayerActionsPermanent PlayerActionsLocal::get_PermanentActions()";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string String_Format_String_Object_Object = "System.String System.String::Format(System.String,System.Object,System.Object)";
                public const string TileEntityLootContainer_IsEmpty = "System.Boolean TileEntityLootContainer::IsEmpty()";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string EffectManager_GetValue_PassiveEffects_ItemValue_Single_EntityAlive_Recipe_FastTags_Boolean_Boolean_Boolean_Boolean_Int32_Boolean = "System.Single EffectManager::GetValue(PassiveEffects,ItemValue,System.Single,EntityAlive,Recipe,FastTags,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)";
                public const string WorldBase_GetGameManager = "IGameManager WorldBase::GetGameManager()";
                public const string IGameManager_GetPersistentLocalPlayer = "PersistentPlayerData IGameManager::GetPersistentLocalPlayer()";
                public const string WorldBase_CanPickupBlockAt_Vector3i_PersistentPlayerData = "System.Boolean WorldBase::CanPickupBlockAt(Vector3i,PersistentPlayerData)";
                public const string String_op_Inequality_String_String = "System.Boolean System.String::op_Inequality(System.String,System.String)";
                public const string String_Format_String_Object = "System.String System.String::Format(System.String,System.Object)";
                public const string list = "Block[] Block::list";
                public const string Activate = "InControl.PlayerAction PlayerActionsLocal::Activate";
                public const string bTouched = "System.Boolean TileEntityLootContainer::bTouched";
                public const string CanPickup = "System.Boolean Block::CanPickup";
                public const string Tags = "FastTags Block::Tags";
                public const string PickedUpItemValue = "System.String Block::PickedUpItemValue";
                public const string PickupTarget = "System.String Block::PickupTarget";
            }

            public const string SpawnDestroyParticleEffect = "System.Void Block::SpawnDestroyParticleEffect(WorldBase,BlockValue,Vector3i,System.Single,UnityEngine.Color,System.Int32)";
            public static class SpawnDestroyParticleEffectInjects
            {
                public const string WorldBase_GetGameManager = "IGameManager WorldBase::GetGameManager()";
                public const string World_blockToTransformPos_Vector3i = "UnityEngine.Vector3 World::blockToTransformPos(Vector3i)";
                public const string Vector3_op_Addition_Vector3_Vector3 = "UnityEngine.Vector3 UnityEngine.Vector3::op_Addition(UnityEngine.Vector3,UnityEngine.Vector3)";
                public const string String_Concat_String_String = "System.String System.String::Concat(System.String,System.String)";
                public const string IGameManager_SpawnParticleEffectServer_ParticleEffect_Int32 = "System.Void IGameManager::SpawnParticleEffectServer(ParticleEffect,System.Int32)";
                public const string Block_GetMaterialForSide_BlockValue_BlockFace = "MaterialBlock Block::GetMaterialForSide(BlockValue,BlockFace)";
                public const string Block_GetDestroyParticle_BlockValue = "System.String Block::GetDestroyParticle(BlockValue)";
                public const string deathParticleName = "System.String Block::deathParticleName";
                public const string blockMaterial = "MaterialBlock Block::blockMaterial";
                public const string SurfaceCategory = "System.String MaterialBlock::SurfaceCategory";
                public const string Vector3_ctor_Single_Single_Single = "System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)";
                public const string ParticleEffect_ctor_String_Vector3_Single_Color_String_Transform_Boolean = "System.Void ParticleEffect::.ctor(System.String,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.String,UnityEngine.Transform,System.Boolean)";
            }

            public const string GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
            public static class GetBlockValue_String_BooleanInjects
            {
                public const string Block_GetBlockByName_String_Boolean = "Block Block::GetBlockByName(System.String,System.Boolean)";
                public const string BlockValue_set_type_Int32 = "System.Void BlockValue::set_type(System.Int32)";
                public const string blockID = "System.Int32 Block::blockID";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string GetBlockByName = "Block Block::GetBlockByName(System.String,System.Boolean)";
            public static class GetBlockByNameInjects
            {
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.String,Block>::ContainsKey(System.String)";
                public const string Dictionary_2_get_Item_TKey = "Block System.Collections.Generic.Dictionary`2<System.String,Block>::get_Item(System.String)";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string nameToBlockCaseInsensitive = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlockCaseInsensitive";
            }

            public const string GetBlockValue_Int32 = "BlockValue Block::GetBlockValue(System.Int32)";
            public static class GetBlockValue_Int32Injects
            {
                public const string BlockValue_set_type_Int32 = "System.Void BlockValue::set_type(System.Int32)";
                public const string list = "Block[] Block::list";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string GetBlockValueFromProperty = "BlockValue Block::GetBlockValueFromProperty(System.String)";
            public static class GetBlockValueFromPropertyInjects
            {
                public const string ValueWrapper_ContainsKey_String = "System.Boolean DynamicProperties/ValueWrapper::ContainsKey(System.String)";
                public const string String_Concat_String_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String,System.String)";
                public const string ValueWrapper_get_Item_String = "System.String DynamicProperties/ValueWrapper::get_Item(System.String)";
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string BlockValue_Equals_BlockValue = "System.Boolean BlockValue::Equals(BlockValue)";
                public const string String_Concat_String_String_String = "System.String System.String::Concat(System.String,System.String,System.String)";
                public const string Air = "BlockValue BlockValue::Air";
                public const string Properties = "DynamicProperties Block::Properties";
                public const string Values = "DynamicProperties/ValueWrapper DynamicProperties::Values";
                public const string blockName = "System.String Block::blockName";
                public const string Exception_ctor_String = "System.Void System.Exception::.ctor(System.String)";
            }

            public const string ShowModelOnFall = "System.Boolean Block::ShowModelOnFall()";
            public static class ShowModelOnFallInjects
            {
                public const string bShowModelOnFall = "System.Boolean Block::bShowModelOnFall";
            }

            public const string GetBlockActivationCommands = "BlockActivationCommand[] Block::GetBlockActivationCommands(WorldBase,BlockValue,System.Int32,Vector3i,EntityAlive)";
            public static class GetBlockActivationCommandsInjects
            {
                public const string WorldBase_GetTileEntity_Int32_Vector3i = "TileEntity WorldBase::GetTileEntity(System.Int32,Vector3i)";
                public const string BlockValue_get_Block = "Block BlockValue::get_Block()";
                public const string EffectManager_GetValue_PassiveEffects_ItemValue_Single_EntityAlive_Recipe_FastTags_Boolean_Boolean_Boolean_Boolean_Int32_Boolean = "System.Single EffectManager::GetValue(PassiveEffects,ItemValue,System.Single,EntityAlive,Recipe,FastTags,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)";
                public const string CanPickup = "System.Boolean Block::CanPickup";
                public const string Tags = "FastTags Block::Tags";
                public const string cmds = "BlockActivationCommand[] Block::cmds";
                public const string enabled = "System.Boolean BlockActivationCommand::enabled";
            }

            public const string OnBlockActivated_Int32_WorldBase_Int32_Vector3i_BlockValue_EntityAlive = "System.Boolean Block::OnBlockActivated(System.Int32,WorldBase,System.Int32,Vector3i,BlockValue,EntityAlive)";
            public static class OnBlockActivated_Int32_WorldBase_Int32_Vector3i_BlockValue_EntityAliveInjects
            {
                public const string Block_OnBlockActivated_WorldBase_Int32_Vector3i_BlockValue_EntityAlive = "System.Boolean Block::OnBlockActivated(WorldBase,System.Int32,Vector3i,BlockValue,EntityAlive)";
            }

            public const string RenderDecorations = "System.Void Block::RenderDecorations(Vector3i,BlockValue,UnityEngine.Vector3,UnityEngine.Vector3[],LightingAround,System.Int64,VoxelMesh[],INeighborBlockCache)";
            public static class RenderDecorationsInjects
            {
                public const string BlockShape_renderDecorations_Vector3i_BlockValue_Vector3_Vector3_LightingAround_Int64_VoxelMesh_INeighborBlockCache_Boolean = "System.Void BlockShape::renderDecorations(Vector3i,BlockValue,UnityEngine.Vector3,UnityEngine.Vector3[],LightingAround,System.Int64,VoxelMesh[],INeighborBlockCache,System.Boolean)";
                public const string shape = "BlockShape Block::shape";
            }

            public const string IsExplosionAffected = "System.Boolean Block::IsExplosionAffected()";
            public const string GetActivationDistanceSq = "System.Int32 Block::GetActivationDistanceSq()";
            public static class GetActivationDistanceSqInjects
            {
                public const string activationDistance = "System.Int32 Block::activationDistance";
                public const string cCollectItemDistance = "System.Single Constants::cCollectItemDistance";
            }

            public const string GetPlacementDistanceSq = "System.Int32 Block::GetPlacementDistanceSq()";
            public static class GetPlacementDistanceSqInjects
            {
                public const string placementDistance = "System.Int32 Block::placementDistance";
                public const string activationDistance = "System.Int32 Block::activationDistance";
                public const string cDigAndBuildDistance = "System.Single Constants::cDigAndBuildDistance";
            }

            public const string CheckUpdate = "System.Void Block::CheckUpdate(BlockValue,BlockValue,System.Boolean&,System.Boolean&,System.Boolean&)";
            public const string RotateVerticesOnCollisionCheck = "System.Boolean Block::RotateVerticesOnCollisionCheck(BlockValue)";
            public const string ActivateBlock = "System.Boolean Block::ActivateBlock(WorldBase,System.Int32,Vector3i,BlockValue,System.Boolean,System.Boolean)";
            public const string ActivateBlockOnce = "System.Boolean Block::ActivateBlockOnce(WorldBase,System.Int32,Vector3i,BlockValue)";
            public const string ToString = "System.String Block::ToString()";
            public static class ToStringInjects
            {
                public const string blockName = "System.String Block::blockName";
            }

            public const string assignIdsFromXml = "System.Void Block::assignIdsFromXml()";
            public static class assignIdsFromXmlInjects
            {
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block> System.Collections.Generic.Dictionary`2<System.String,Block>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,Block> System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::get_Current()";
                public const string KeyValuePair_2_get_Value = "Block System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Value()";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string list = "Block[] Block::list";
                public const string blockID = "System.Int32 Block::blockID";
            }

            public const string assignIdsLinear = "System.Void Block::assignIdsLinear()";
            public static class assignIdsLinearInjects
            {
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Dictionary_2_get_Count = "System.Int32 System.Collections.Generic.Dictionary`2<System.String,Block>::get_Count()";
                public const string Block_assignLeftOverBlocks_Boolean_List_1 = "System.Void Block::assignLeftOverBlocks(System.Boolean[],System.Collections.Generic.List`1<Block>)";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string List_1_ctor_Int32 = "System.Void System.Collections.Generic.List`1<Block>::.ctor(System.Int32)";
            }

            public const string assignId = "System.Void Block::assignId(Block,System.Int32,System.Boolean[])";
            public static class assignIdInjects
            {
                public const string list = "Block[] Block::list";
                public const string blockID = "System.Int32 Block::blockID";
            }

            public const string assignLeftOverBlocks = "System.Void Block::assignLeftOverBlocks(System.Boolean[],System.Collections.Generic.List`1<Block>)";
            public static class assignLeftOverBlocksInjects
            {
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Int32> System.Collections.Generic.Dictionary`2<System.String,System.Int32>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,System.Int32> System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Int32>::get_Current()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,System.Int32>::get_Key()";
                public const string Dictionary_2_ContainsKey_TKey = "System.Boolean System.Collections.Generic.Dictionary`2<System.String,Block>::ContainsKey(System.String)";
                public const string Dictionary_2_get_Item_TKey = "Block System.Collections.Generic.Dictionary`2<System.String,Block>::get_Item(System.String)";
                public const string List_1_Contains_T = "System.Boolean System.Collections.Generic.List`1<Block>::Contains(Block)";
                public const string List_1_Remove_T = "System.Boolean System.Collections.Generic.List`1<Block>::Remove(Block)";
                public const string KeyValuePair_2_get_Value = "System.Int32 System.Collections.Generic.KeyValuePair`2<System.String,System.Int32>::get_Value()";
                public const string Block_assignId_Block_Int32_Boolean_ = "System.Void Block::assignId(Block,System.Int32,System.Boolean[])";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,System.Int32>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string List_1_GetEnumerator = "System.Collections.Generic.List`1/Enumerator<Block> System.Collections.Generic.List`1<Block>::GetEnumerator()";
                public const string BlockShape_IsTerrain = "System.Boolean BlockShape::IsTerrain()";
                public const string fixedBlockIds = "System.Collections.Generic.Dictionary`2<System.String,System.Int32> Block::fixedBlockIds";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string shape = "BlockShape Block::shape";
            }

            public const string assignIdsFromMapping = "System.Void Block::assignIdsFromMapping()";
            public static class assignIdsFromMappingInjects
            {
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block> System.Collections.Generic.Dictionary`2<System.String,Block>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,Block> System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::get_Current()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Key()";
                public const string NameIdMapping_GetIdForName_String = "System.Int32 NameIdMapping::GetIdForName(System.String)";
                public const string KeyValuePair_2_get_Value = "Block System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Value()";
                public const string Block_assignId_Block_Int32_Boolean_ = "System.Void Block::assignId(Block,System.Int32,System.Boolean[])";
                public const string List_1_Add_T = "System.Void System.Collections.Generic.List`1<Block>::Add(Block)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string Block_assignLeftOverBlocks_Boolean_List_1 = "System.Void Block::assignLeftOverBlocks(System.Boolean[],System.Collections.Generic.List`1<Block>)";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string nameIdMapping = "NameIdMapping Block::nameIdMapping";
                public const string List_1_ctor = "System.Void System.Collections.Generic.List`1<Block>::.ctor()";
            }

            public const string createFullMappingForClients = "System.Void Block::createFullMappingForClients()";
            public static class createFullMappingForClientsInjects
            {
                public const string Dictionary_2_GetEnumerator = "System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block> System.Collections.Generic.Dictionary`2<System.String,Block>::GetEnumerator()";
                public const string Enumerator_get_Current = "System.Collections.Generic.KeyValuePair`2<System.String,Block> System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::get_Current()";
                public const string KeyValuePair_2_get_Value = "Block System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Value()";
                public const string KeyValuePair_2_get_Key = "System.String System.Collections.Generic.KeyValuePair`2<System.String,Block>::get_Key()";
                public const string NameIdMapping_AddMapping_Int32_String_Boolean = "System.Void NameIdMapping::AddMapping(System.Int32,System.String,System.Boolean)";
                public const string Enumerator_MoveNext = "System.Boolean System.Collections.Generic.Dictionary`2/Enumerator<System.String,Block>::MoveNext()";
                public const string IDisposable_Dispose = "System.Void System.IDisposable::Dispose()";
                public const string NameIdMapping_SaveToArray = "System.Byte[] NameIdMapping::SaveToArray()";
                public const string MAX_BLOCKS = "System.Int32 Block::MAX_BLOCKS";
                public const string nameToBlock = "System.Collections.Generic.Dictionary`2<System.String,Block> Block::nameToBlock";
                public const string blockID = "System.Int32 Block::blockID";
                public const string fullMappingDataForClients = "System.Byte[] Block::fullMappingDataForClients";
                public const string NameIdMapping_ctor_String_Int32 = "System.Void NameIdMapping::.ctor(System.String,System.Int32)";
            }

            public const string AssignIds = "System.Void Block::AssignIds()";
            public static class AssignIdsInjects
            {
                public const string Log_Out_String = "System.Void Log::Out(System.String)";
                public const string Block_assignIdsFromMapping = "System.Void Block::assignIdsFromMapping()";
                public const string Block_assignIdsLinear = "System.Void Block::assignIdsLinear()";
                public const string Block_createFullMappingForClients = "System.Void Block::createFullMappingForClients()";
                public const string nameIdMapping = "NameIdMapping Block::nameIdMapping";
            }

            public const string IsTileEntitySavedInPrefab = "System.Boolean Block::IsTileEntitySavedInPrefab()";
            public const string GetCustomDescription = "System.String Block::GetCustomDescription(Vector3i,BlockValue)";
            public const string GetPlaceAltBlockValue = "System.String Block::GetPlaceAltBlockValue(WorldBase)";
            public static class GetPlaceAltBlockValueInjects
            {
                public const string WorldBase_GetGameRandom = "GameRandom WorldBase::GetGameRandom()";
                public const string GameRandom_RandomRange_Int32_Int32 = "System.Int32 GameRandom::RandomRange(System.Int32,System.Int32)";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
                public const string Empty = "System.String System.String::Empty";
            }

            public const string GetAltBlockValue = "BlockValue Block::GetAltBlockValue(System.Int32)";
            public static class GetAltBlockValueInjects
            {
                public const string Block_GetBlockValue_String_Boolean = "BlockValue Block::GetBlockValue(System.String,System.Boolean)";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
                public const string Air = "BlockValue BlockValue::Air";
            }

            public const string GetAltBlocks = "System.String[] Block::GetAltBlocks()";
            public static class GetAltBlocksInjects
            {
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
            }

            public const string AlternateBlockCount = "System.Int32 Block::AlternateBlockCount()";
            public static class AlternateBlockCountInjects
            {
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
            }

            public const string ContainsAlternateBlock = "System.Boolean Block::ContainsAlternateBlock(System.String)";
            public static class ContainsAlternateBlockInjects
            {
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
            }

            public const string GetAlternateBlockIndex = "System.Int32 Block::GetAlternateBlockIndex(System.String)";
            public static class GetAlternateBlockIndexInjects
            {
                public const string String_op_Equality_String_String = "System.Boolean System.String::op_Equality(System.String,System.String)";
                public const string placeAltBlockValues = "System.String[] Block::placeAltBlockValues";
            }
        }
    }
}
